/*
 * generated by Xtext
 */
package org.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ARMGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsARMInstrParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//	elements+=ARMInstr*;
		@Override public ParserRule getRule() { return rule; }

		//elements+=ARMInstr*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//ARMInstr
		public RuleCall getElementsARMInstrParserRuleCall_0() { return cElementsARMInstrParserRuleCall_0; }
	}

	public class ARMInstrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ARMInstr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCcodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationInstrParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ARMInstr:
		//	Ccode | OperationInstr;
		@Override public ParserRule getRule() { return rule; }

		//Ccode | OperationInstr
		public Alternatives getAlternatives() { return cAlternatives; }

		//Ccode
		public RuleCall getCcodeParserRuleCall_0() { return cCcodeParserRuleCall_0; }

		//OperationInstr
		public RuleCall getOperationInstrParserRuleCall_1() { return cOperationInstrParserRuleCall_1; }
	}

	public class OperationInstrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationInstr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAdd_sub_instrParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAdrl_adr_instrParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMul_3R_instrParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMul_4R_instrParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMov_instrParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cShift_instrParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cClz_instrParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cCompare_test_instrParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cLogical_instrParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cBranch_instrParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cMrs_instrParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cMsr_instrParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cLdr_str_irpre_instrParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cLdr_str_spre_instrParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cLdr_str_irpsot_instrParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cLdr_str_rpost_instrParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cLdm_instrParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cPush_pop_instrParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cBkpt_instrParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cSvc_instrParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cSwp_instrParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cNOPParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		
		//OperationInstr:
		//	add_sub_instr | adrl_adr_instr | mul_3R_instr | mul_4R_instr | mov_instr | shift_instr | clz_instr |
		//	compare_test_instr | logical_instr | branch_instr | mrs_instr | msr_instr | ldr_str_irpre_instr | ldr_str_spre_instr |
		//	ldr_str_irpsot_instr | ldr_str_rpost_instr | ldm_instr | push_pop_instr | bkpt_instr | svc_instr | swp_instr | NOP;
		@Override public ParserRule getRule() { return rule; }

		//add_sub_instr | adrl_adr_instr | mul_3R_instr | mul_4R_instr | mov_instr | shift_instr | clz_instr | compare_test_instr
		//| logical_instr | branch_instr | mrs_instr | msr_instr | ldr_str_irpre_instr | ldr_str_spre_instr |
		//ldr_str_irpsot_instr | ldr_str_rpost_instr | ldm_instr | push_pop_instr | bkpt_instr | svc_instr | swp_instr | NOP
		public Alternatives getAlternatives() { return cAlternatives; }

		//add_sub_instr
		public RuleCall getAdd_sub_instrParserRuleCall_0() { return cAdd_sub_instrParserRuleCall_0; }

		//adrl_adr_instr
		public RuleCall getAdrl_adr_instrParserRuleCall_1() { return cAdrl_adr_instrParserRuleCall_1; }

		//mul_3R_instr
		public RuleCall getMul_3R_instrParserRuleCall_2() { return cMul_3R_instrParserRuleCall_2; }

		//mul_4R_instr
		public RuleCall getMul_4R_instrParserRuleCall_3() { return cMul_4R_instrParserRuleCall_3; }

		//mov_instr
		public RuleCall getMov_instrParserRuleCall_4() { return cMov_instrParserRuleCall_4; }

		//shift_instr
		public RuleCall getShift_instrParserRuleCall_5() { return cShift_instrParserRuleCall_5; }

		//clz_instr
		public RuleCall getClz_instrParserRuleCall_6() { return cClz_instrParserRuleCall_6; }

		//compare_test_instr
		public RuleCall getCompare_test_instrParserRuleCall_7() { return cCompare_test_instrParserRuleCall_7; }

		//logical_instr
		public RuleCall getLogical_instrParserRuleCall_8() { return cLogical_instrParserRuleCall_8; }

		//branch_instr
		public RuleCall getBranch_instrParserRuleCall_9() { return cBranch_instrParserRuleCall_9; }

		//mrs_instr
		public RuleCall getMrs_instrParserRuleCall_10() { return cMrs_instrParserRuleCall_10; }

		//msr_instr
		public RuleCall getMsr_instrParserRuleCall_11() { return cMsr_instrParserRuleCall_11; }

		//ldr_str_irpre_instr
		public RuleCall getLdr_str_irpre_instrParserRuleCall_12() { return cLdr_str_irpre_instrParserRuleCall_12; }

		//ldr_str_spre_instr
		public RuleCall getLdr_str_spre_instrParserRuleCall_13() { return cLdr_str_spre_instrParserRuleCall_13; }

		//ldr_str_irpsot_instr
		public RuleCall getLdr_str_irpsot_instrParserRuleCall_14() { return cLdr_str_irpsot_instrParserRuleCall_14; }

		//ldr_str_rpost_instr
		public RuleCall getLdr_str_rpost_instrParserRuleCall_15() { return cLdr_str_rpost_instrParserRuleCall_15; }

		//ldm_instr
		public RuleCall getLdm_instrParserRuleCall_16() { return cLdm_instrParserRuleCall_16; }

		//push_pop_instr
		public RuleCall getPush_pop_instrParserRuleCall_17() { return cPush_pop_instrParserRuleCall_17; }

		//bkpt_instr
		public RuleCall getBkpt_instrParserRuleCall_18() { return cBkpt_instrParserRuleCall_18; }

		//svc_instr
		public RuleCall getSvc_instrParserRuleCall_19() { return cSvc_instrParserRuleCall_19; }

		//swp_instr
		public RuleCall getSwp_instrParserRuleCall_20() { return cSwp_instrParserRuleCall_20; }

		//NOP
		public RuleCall getNOPParserRuleCall_21() { return cNOPParserRuleCall_21; }
	}

	public class CcodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ccode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cReverseSolidusKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cPREPROCESSORParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Keyword cDefinedKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Assignment cExpressionAssignment_0_2_3 = (Assignment)cGroup_0_2.eContents().get(3);
		private final RuleCall cExpressionVariableParserRuleCall_0_2_3_0 = (RuleCall)cExpressionAssignment_0_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2_4 = (Keyword)cGroup_0_2.eContents().get(4);
		private final Group cGroup_0_2_5 = (Group)cGroup_0_2.eContents().get(5);
		private final Alternatives cAlternatives_0_2_5_0 = (Alternatives)cGroup_0_2_5.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_0_2_5_0_0 = (Keyword)cAlternatives_0_2_5_0.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_0_2_5_0_1 = (Keyword)cAlternatives_0_2_5_0.eContents().get(1);
		private final Keyword cDefinedKeyword_0_2_5_1 = (Keyword)cGroup_0_2_5.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2_5_2 = (Keyword)cGroup_0_2_5.eContents().get(2);
		private final Assignment cExpression2Assignment_0_2_5_3 = (Assignment)cGroup_0_2_5.eContents().get(3);
		private final RuleCall cExpression2VariableParserRuleCall_0_2_5_3_0 = (RuleCall)cExpression2Assignment_0_2_5_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2_5_4 = (Keyword)cGroup_0_2_5.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_0_2_6 = (Keyword)cGroup_0_2.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cPREPROCESSOR_DEFINEParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cExpressionAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cExpressionVariableParserRuleCall_1_2_0_0 = (RuleCall)cExpressionAssignment_1_2_0.eContents().get(0);
		private final Assignment cExpression2Assignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cExpression2VariableParserRuleCall_1_2_1_0 = (RuleCall)cExpression2Assignment_1_2_1.eContents().get(0);
		private final RuleCall cPREPROCESSOR_ENDIFParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPREPROCESSOR_ELSEParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cCExtendCodeParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cExpressionAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cExpressionVariableParserRuleCall_4_1_0_0 = (RuleCall)cExpressionAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Alternatives cAlternatives_4_1_1_1 = (Alternatives)cGroup_4_1_1.eContents().get(1);
		private final Keyword cFullStopKeyword_4_1_1_1_0 = (Keyword)cAlternatives_4_1_1_1.eContents().get(0);
		private final Assignment cExpression2Assignment_4_1_1_1_1 = (Assignment)cAlternatives_4_1_1_1.eContents().get(1);
		private final RuleCall cExpression2VariableParserRuleCall_4_1_1_1_1_0 = (RuleCall)cExpression2Assignment_4_1_1_1_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cAssembler_Directives_equParserRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Assignment cExpressionAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cExpressionVariableParserRuleCall_5_1_0_0 = (RuleCall)cExpressionAssignment_5_1_0.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cGroup_5_1.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_1_0 = (Keyword)cGroup_5_1_1.eContents().get(0);
		private final Alternatives cAlternatives_5_1_1_1 = (Alternatives)cGroup_5_1_1.eContents().get(1);
		private final Keyword cFullStopKeyword_5_1_1_1_0 = (Keyword)cAlternatives_5_1_1_1.eContents().get(0);
		private final Assignment cExpression2Assignment_5_1_1_1_1 = (Assignment)cAlternatives_5_1_1_1.eContents().get(1);
		private final RuleCall cExpression2VariableParserRuleCall_5_1_1_1_1_0 = (RuleCall)cExpression2Assignment_5_1_1_1_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final RuleCall cAssembler_DirectivesParserRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Assignment cExpressionAssignment_6_1_0 = (Assignment)cGroup_6_1.eContents().get(0);
		private final RuleCall cExpressionVariableParserRuleCall_6_1_0_0 = (RuleCall)cExpressionAssignment_6_1_0.eContents().get(0);
		private final Group cGroup_6_1_1 = (Group)cGroup_6_1.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_1_0 = (Keyword)cGroup_6_1_1.eContents().get(0);
		private final Assignment cExpression2Assignment_6_1_1_1 = (Assignment)cGroup_6_1_1.eContents().get(1);
		private final RuleCall cExpression2VariableParserRuleCall_6_1_1_1_0 = (RuleCall)cExpression2Assignment_6_1_1_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final RuleCall cAssembler_Directives_macroParserRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Assignment cExpressionAssignment_7_1_0 = (Assignment)cGroup_7_1.eContents().get(0);
		private final RuleCall cExpressionDefinitionParserRuleCall_7_1_0_0 = (RuleCall)cExpressionAssignment_7_1_0.eContents().get(0);
		private final Group cGroup_7_1_1 = (Group)cGroup_7_1.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_1_0 = (Keyword)cGroup_7_1_1.eContents().get(0);
		private final Assignment cDefinitionAssignment_7_1_1_1 = (Assignment)cGroup_7_1_1.eContents().get(1);
		private final RuleCall cDefinitionDefinitionParserRuleCall_7_1_1_1_0 = (RuleCall)cDefinitionAssignment_7_1_1_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final RuleCall cAssember_Directives_typeParserRuleCall_8_0 = (RuleCall)cGroup_8.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Assignment cExpressionAssignment_8_1_0 = (Assignment)cGroup_8_1.eContents().get(0);
		private final RuleCall cExpressionVariableParserRuleCall_8_1_0_0 = (RuleCall)cExpressionAssignment_8_1_0.eContents().get(0);
		private final Group cGroup_8_1_1 = (Group)cGroup_8_1.eContents().get(1);
		private final Keyword cCommaKeyword_8_1_1_0 = (Keyword)cGroup_8_1_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_8_1_1_1 = (Assignment)cGroup_8_1_1.eContents().get(1);
		private final RuleCall cDescriptionDescriptionParserRuleCall_8_1_1_1_0 = (RuleCall)cDescriptionAssignment_8_1_1_1.eContents().get(0);
		private final RuleCall cAssembler_Directives_endmParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final RuleCall cARM_Machine_DirectivesParserRuleCall_10_0 = (RuleCall)cGroup_10.eContents().get(0);
		private final Group cGroup_10_1 = (Group)cGroup_10.eContents().get(1);
		private final Assignment cExpressionAssignment_10_1_0 = (Assignment)cGroup_10_1.eContents().get(0);
		private final RuleCall cExpressionVariableParserRuleCall_10_1_0_0 = (RuleCall)cExpressionAssignment_10_1_0.eContents().get(0);
		private final Group cGroup_10_1_1 = (Group)cGroup_10_1.eContents().get(1);
		private final Keyword cCommaKeyword_10_1_1_0 = (Keyword)cGroup_10_1_1.eContents().get(0);
		private final Assignment cExpression2Assignment_10_1_1_1 = (Assignment)cGroup_10_1_1.eContents().get(1);
		private final RuleCall cExpression2VariableParserRuleCall_10_1_1_1_0 = (RuleCall)cExpression2Assignment_10_1_1_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final RuleCall cARM_MACHINE_DIRECTIVES_alignParserRuleCall_11_0 = (RuleCall)cGroup_11.eContents().get(0);
		private final Alternatives cAlternatives_11_1 = (Alternatives)cGroup_11.eContents().get(1);
		private final Assignment cIntAssignment_11_1_0 = (Assignment)cAlternatives_11_1.eContents().get(0);
		private final RuleCall cIntMyINTParserRuleCall_11_1_0_0 = (RuleCall)cIntAssignment_11_1_0.eContents().get(0);
		private final Assignment cHexAssignment_11_1_1 = (Assignment)cAlternatives_11_1.eContents().get(1);
		private final RuleCall cHexHEXTerminalRuleCall_11_1_1_0 = (RuleCall)cHexAssignment_11_1_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final RuleCall cARM_Machine_Directives_codeParserRuleCall_12_0 = (RuleCall)cGroup_12.eContents().get(0);
		private final Alternatives cAlternatives_12_1 = (Alternatives)cGroup_12.eContents().get(1);
		private final Assignment cArmAssignment_12_1_0 = (Assignment)cAlternatives_12_1.eContents().get(0);
		private final Keyword cArm16Keyword_12_1_0_0 = (Keyword)cArmAssignment_12_1_0.eContents().get(0);
		private final Assignment cThumbAssignment_12_1_1 = (Assignment)cAlternatives_12_1.eContents().get(1);
		private final Keyword cThumb32Keyword_12_1_1_0 = (Keyword)cThumbAssignment_12_1_1.eContents().get(0);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final RuleCall cARM_Machine_Directives_syntaxParserRuleCall_13_0 = (RuleCall)cGroup_13.eContents().get(0);
		private final Alternatives cAlternatives_13_1 = (Alternatives)cGroup_13.eContents().get(1);
		private final Keyword cUnifiedKeyword_13_1_0 = (Keyword)cAlternatives_13_1.eContents().get(0);
		private final Keyword cDividedKeyword_13_1_1 = (Keyword)cAlternatives_13_1.eContents().get(1);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final RuleCall cARM_Machine_Directives_saveParserRuleCall_14_0 = (RuleCall)cGroup_14.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final Assignment cReglistAssignment_14_2 = (Assignment)cGroup_14.eContents().get(2);
		private final RuleCall cReglistIDTerminalRuleCall_14_2_0 = (RuleCall)cReglistAssignment_14_2.eContents().get(0);
		private final Alternatives cAlternatives_14_3 = (Alternatives)cGroup_14.eContents().get(3);
		private final Group cGroup_14_3_0 = (Group)cAlternatives_14_3.eContents().get(0);
		private final Keyword cCommaKeyword_14_3_0_0 = (Keyword)cGroup_14_3_0.eContents().get(0);
		private final Assignment cReglistAssignment_14_3_0_1 = (Assignment)cGroup_14_3_0.eContents().get(1);
		private final RuleCall cReglistIDTerminalRuleCall_14_3_0_1_0 = (RuleCall)cReglistAssignment_14_3_0_1.eContents().get(0);
		private final Group cGroup_14_3_1 = (Group)cAlternatives_14_3.eContents().get(1);
		private final Keyword cCommaKeyword_14_3_1_0 = (Keyword)cGroup_14_3_1.eContents().get(0);
		private final Assignment cReglistNumAssignment_14_3_1_1 = (Assignment)cGroup_14_3_1.eContents().get(1);
		private final RuleCall cReglistNumMyINTParserRuleCall_14_3_1_1_0 = (RuleCall)cReglistNumAssignment_14_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14_4 = (Keyword)cGroup_14.eContents().get(4);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final RuleCall cARM_Machine_Directives_saveParserRuleCall_15_0 = (RuleCall)cGroup_15.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		private final Assignment cRegisterAssignment_15_2 = (Assignment)cGroup_15.eContents().get(2);
		private final RuleCall cRegisterREGISTERParserRuleCall_15_2_0 = (RuleCall)cRegisterAssignment_15_2.eContents().get(0);
		private final Group cGroup_15_3 = (Group)cGroup_15.eContents().get(3);
		private final Keyword cCommaKeyword_15_3_0 = (Keyword)cGroup_15_3.eContents().get(0);
		private final Assignment cRegisterAssignment_15_3_1 = (Assignment)cGroup_15_3.eContents().get(1);
		private final RuleCall cRegisterREGISTERParserRuleCall_15_3_1_0 = (RuleCall)cRegisterAssignment_15_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_15_4 = (Keyword)cGroup_15.eContents().get(4);
		private final Group cGroup_16 = (Group)cAlternatives.eContents().get(16);
		private final RuleCall cCExtendascizParserRuleCall_16_0 = (RuleCall)cGroup_16.eContents().get(0);
		private final Assignment cExpressionAssignment_16_1 = (Assignment)cGroup_16.eContents().get(1);
		private final RuleCall cExpressionVariableParserRuleCall_16_1_0 = (RuleCall)cExpressionAssignment_16_1.eContents().get(0);
		private final Group cGroup_17 = (Group)cAlternatives.eContents().get(17);
		private final Keyword cReverseSolidusKeyword_17_0 = (Keyword)cGroup_17.eContents().get(0);
		private final RuleCall cCLangParserRuleCall_17_1 = (RuleCall)cGroup_17.eContents().get(1);
		private final Assignment cExpressionAssignment_17_2 = (Assignment)cGroup_17.eContents().get(2);
		private final RuleCall cExpressionVariableParserRuleCall_17_2_0 = (RuleCall)cExpressionAssignment_17_2.eContents().get(0);
		private final Assignment cLabel_keywordAssignment_18 = (Assignment)cAlternatives.eContents().get(18);
		private final RuleCall cLabel_keywordLabel_keywordParserRuleCall_18_0 = (RuleCall)cLabel_keywordAssignment_18.eContents().get(0);
		private final Group cGroup_19 = (Group)cAlternatives.eContents().get(19);
		private final Keyword cReverseSolidusKeyword_19_0 = (Keyword)cGroup_19.eContents().get(0);
		private final RuleCall cVariable_colonParserRuleCall_19_1 = (RuleCall)cGroup_19.eContents().get(1);
		private final RuleCall cVariable_variableParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		
		//Ccode:
		//	"\\"? PREPROCESSOR ("("? "defined"? "("? expression=variable ")"? (("||" | "&&") "defined"? "("? expression2=variable
		//	")"?)* ")"?)? | "\\"? PREPROCESSOR_DEFINE (expression=variable expression2=variable*)? | PREPROCESSOR_ENDIF |
		//	PREPROCESSOR_ELSE | CExtendCode (expression+=variable ("," ("." | expression2+=variable))*)? |
		//	Assembler_Directives_equ (expression+=variable ("," ("." | expression2+=variable))*)? | Assembler_Directives
		//	(expression=variable ("," expression2=variable)*) | Assembler_Directives_macro (expression=definition+ (","
		//	definition=definition)*) | Assember_Directives_type (expression+=variable ("," description+=description)?) |
		//	Assembler_Directives_endm | ARM_Machine_Directives (expression=variable ("," expression2=variable)*)? |
		//	ARM_MACHINE_DIRECTIVES_align (int=myINT | hex=HEX)? | ARM_Machine_Directives_code (arm?="16" | thumb?="32") |
		//	ARM_Machine_Directives_syntax ("unified" | "divided") | ARM_Machine_Directives_save "{"? reglist+=ID ("," reglist+=ID
		//	| "," reglistNum+=myINT)* "}"? | ARM_Machine_Directives_save "{"? register+=REGISTER ("," register+=REGISTER)* "}"? |
		//	CExtendasciz expression=variable? | "\\"? CLang expression=variable? | label_keyword+=label_keyword | "\\"?
		//	variable_colon | variable_variable;
		@Override public ParserRule getRule() { return rule; }

		//"\\"? PREPROCESSOR ("("? "defined"? "("? expression=variable ")"? (("||" | "&&") "defined"? "("? expression2=variable
		//")"?)* ")"?)? | "\\"? PREPROCESSOR_DEFINE (expression=variable expression2=variable*)? | PREPROCESSOR_ENDIF |
		//PREPROCESSOR_ELSE | CExtendCode (expression+=variable ("," ("." | expression2+=variable))*)? | Assembler_Directives_equ
		//(expression+=variable ("," ("." | expression2+=variable))*)? | Assembler_Directives (expression=variable (","
		//expression2=variable)*) | Assembler_Directives_macro (expression=definition+ ("," definition=definition)*) |
		//Assember_Directives_type (expression+=variable ("," description+=description)?) | Assembler_Directives_endm |
		//ARM_Machine_Directives (expression=variable ("," expression2=variable)*)? | ARM_MACHINE_DIRECTIVES_align (int=myINT |
		//hex=HEX)? | ARM_Machine_Directives_code (arm?="16" | thumb?="32") | ARM_Machine_Directives_syntax ("unified" |
		//"divided") | ARM_Machine_Directives_save "{"? reglist+=ID ("," reglist+=ID | "," reglistNum+=myINT)* "}"? |
		//ARM_Machine_Directives_save "{"? register+=REGISTER ("," register+=REGISTER)* "}"? | CExtendasciz expression=variable?
		//| "\\"? CLang expression=variable? | label_keyword+=label_keyword | "\\"? variable_colon | variable_variable
		public Alternatives getAlternatives() { return cAlternatives; }

		//"\\"? PREPROCESSOR ("("? "defined"? "("? expression=variable ")"? (("||" | "&&") "defined"? "("? expression2=variable
		//")"?)* ")"?)?
		public Group getGroup_0() { return cGroup_0; }

		//"\\"?
		public Keyword getReverseSolidusKeyword_0_0() { return cReverseSolidusKeyword_0_0; }

		//PREPROCESSOR
		public RuleCall getPREPROCESSORParserRuleCall_0_1() { return cPREPROCESSORParserRuleCall_0_1; }

		//("("? "defined"? "("? expression=variable ")"? (("||" | "&&") "defined"? "("? expression2=variable ")"?)* ")"?)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"("?
		public Keyword getLeftParenthesisKeyword_0_2_0() { return cLeftParenthesisKeyword_0_2_0; }

		//"defined"?
		public Keyword getDefinedKeyword_0_2_1() { return cDefinedKeyword_0_2_1; }

		//"("?
		public Keyword getLeftParenthesisKeyword_0_2_2() { return cLeftParenthesisKeyword_0_2_2; }

		//expression=variable
		public Assignment getExpressionAssignment_0_2_3() { return cExpressionAssignment_0_2_3; }

		//variable
		public RuleCall getExpressionVariableParserRuleCall_0_2_3_0() { return cExpressionVariableParserRuleCall_0_2_3_0; }

		//")"?
		public Keyword getRightParenthesisKeyword_0_2_4() { return cRightParenthesisKeyword_0_2_4; }

		//(("||" | "&&") "defined"? "("? expression2=variable ")"?)*
		public Group getGroup_0_2_5() { return cGroup_0_2_5; }

		//"||" | "&&"
		public Alternatives getAlternatives_0_2_5_0() { return cAlternatives_0_2_5_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_0_2_5_0_0() { return cVerticalLineVerticalLineKeyword_0_2_5_0_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_0_2_5_0_1() { return cAmpersandAmpersandKeyword_0_2_5_0_1; }

		//"defined"?
		public Keyword getDefinedKeyword_0_2_5_1() { return cDefinedKeyword_0_2_5_1; }

		//"("?
		public Keyword getLeftParenthesisKeyword_0_2_5_2() { return cLeftParenthesisKeyword_0_2_5_2; }

		//expression2=variable
		public Assignment getExpression2Assignment_0_2_5_3() { return cExpression2Assignment_0_2_5_3; }

		//variable
		public RuleCall getExpression2VariableParserRuleCall_0_2_5_3_0() { return cExpression2VariableParserRuleCall_0_2_5_3_0; }

		//")"?
		public Keyword getRightParenthesisKeyword_0_2_5_4() { return cRightParenthesisKeyword_0_2_5_4; }

		//")"?
		public Keyword getRightParenthesisKeyword_0_2_6() { return cRightParenthesisKeyword_0_2_6; }

		//"\\"? PREPROCESSOR_DEFINE (expression=variable expression2=variable*)?
		public Group getGroup_1() { return cGroup_1; }

		//"\\"?
		public Keyword getReverseSolidusKeyword_1_0() { return cReverseSolidusKeyword_1_0; }

		//PREPROCESSOR_DEFINE
		public RuleCall getPREPROCESSOR_DEFINEParserRuleCall_1_1() { return cPREPROCESSOR_DEFINEParserRuleCall_1_1; }

		//(expression=variable expression2=variable*)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//expression=variable
		public Assignment getExpressionAssignment_1_2_0() { return cExpressionAssignment_1_2_0; }

		//variable
		public RuleCall getExpressionVariableParserRuleCall_1_2_0_0() { return cExpressionVariableParserRuleCall_1_2_0_0; }

		//expression2=variable*
		public Assignment getExpression2Assignment_1_2_1() { return cExpression2Assignment_1_2_1; }

		//variable
		public RuleCall getExpression2VariableParserRuleCall_1_2_1_0() { return cExpression2VariableParserRuleCall_1_2_1_0; }

		//PREPROCESSOR_ENDIF
		public RuleCall getPREPROCESSOR_ENDIFParserRuleCall_2() { return cPREPROCESSOR_ENDIFParserRuleCall_2; }

		//PREPROCESSOR_ELSE
		public RuleCall getPREPROCESSOR_ELSEParserRuleCall_3() { return cPREPROCESSOR_ELSEParserRuleCall_3; }

		//CExtendCode (expression+=variable ("," ("." | expression2+=variable))*)?
		public Group getGroup_4() { return cGroup_4; }

		//CExtendCode
		public RuleCall getCExtendCodeParserRuleCall_4_0() { return cCExtendCodeParserRuleCall_4_0; }

		//(expression+=variable ("," ("." | expression2+=variable))*)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//expression+=variable
		public Assignment getExpressionAssignment_4_1_0() { return cExpressionAssignment_4_1_0; }

		//variable
		public RuleCall getExpressionVariableParserRuleCall_4_1_0_0() { return cExpressionVariableParserRuleCall_4_1_0_0; }

		//("," ("." | expression2+=variable))*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//","
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }

		//"." | expression2+=variable
		public Alternatives getAlternatives_4_1_1_1() { return cAlternatives_4_1_1_1; }

		//"."
		public Keyword getFullStopKeyword_4_1_1_1_0() { return cFullStopKeyword_4_1_1_1_0; }

		//expression2+=variable
		public Assignment getExpression2Assignment_4_1_1_1_1() { return cExpression2Assignment_4_1_1_1_1; }

		//variable
		public RuleCall getExpression2VariableParserRuleCall_4_1_1_1_1_0() { return cExpression2VariableParserRuleCall_4_1_1_1_1_0; }

		//Assembler_Directives_equ (expression+=variable ("," ("." | expression2+=variable))*)?
		public Group getGroup_5() { return cGroup_5; }

		//Assembler_Directives_equ
		public RuleCall getAssembler_Directives_equParserRuleCall_5_0() { return cAssembler_Directives_equParserRuleCall_5_0; }

		//(expression+=variable ("," ("." | expression2+=variable))*)?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//expression+=variable
		public Assignment getExpressionAssignment_5_1_0() { return cExpressionAssignment_5_1_0; }

		//variable
		public RuleCall getExpressionVariableParserRuleCall_5_1_0_0() { return cExpressionVariableParserRuleCall_5_1_0_0; }

		//("," ("." | expression2+=variable))*
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }

		//","
		public Keyword getCommaKeyword_5_1_1_0() { return cCommaKeyword_5_1_1_0; }

		//"." | expression2+=variable
		public Alternatives getAlternatives_5_1_1_1() { return cAlternatives_5_1_1_1; }

		//"."
		public Keyword getFullStopKeyword_5_1_1_1_0() { return cFullStopKeyword_5_1_1_1_0; }

		//expression2+=variable
		public Assignment getExpression2Assignment_5_1_1_1_1() { return cExpression2Assignment_5_1_1_1_1; }

		//variable
		public RuleCall getExpression2VariableParserRuleCall_5_1_1_1_1_0() { return cExpression2VariableParserRuleCall_5_1_1_1_1_0; }

		//Assembler_Directives (expression=variable ("," expression2=variable)*)
		public Group getGroup_6() { return cGroup_6; }

		//Assembler_Directives
		public RuleCall getAssembler_DirectivesParserRuleCall_6_0() { return cAssembler_DirectivesParserRuleCall_6_0; }

		//expression=variable ("," expression2=variable)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//expression=variable
		public Assignment getExpressionAssignment_6_1_0() { return cExpressionAssignment_6_1_0; }

		//variable
		public RuleCall getExpressionVariableParserRuleCall_6_1_0_0() { return cExpressionVariableParserRuleCall_6_1_0_0; }

		//("," expression2=variable)*
		public Group getGroup_6_1_1() { return cGroup_6_1_1; }

		//","
		public Keyword getCommaKeyword_6_1_1_0() { return cCommaKeyword_6_1_1_0; }

		//expression2=variable
		public Assignment getExpression2Assignment_6_1_1_1() { return cExpression2Assignment_6_1_1_1; }

		//variable
		public RuleCall getExpression2VariableParserRuleCall_6_1_1_1_0() { return cExpression2VariableParserRuleCall_6_1_1_1_0; }

		//Assembler_Directives_macro (expression=definition+ ("," definition=definition)*)
		public Group getGroup_7() { return cGroup_7; }

		//Assembler_Directives_macro
		public RuleCall getAssembler_Directives_macroParserRuleCall_7_0() { return cAssembler_Directives_macroParserRuleCall_7_0; }

		//expression=definition+ ("," definition=definition)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//expression=definition+
		public Assignment getExpressionAssignment_7_1_0() { return cExpressionAssignment_7_1_0; }

		//definition
		public RuleCall getExpressionDefinitionParserRuleCall_7_1_0_0() { return cExpressionDefinitionParserRuleCall_7_1_0_0; }

		//("," definition=definition)*
		public Group getGroup_7_1_1() { return cGroup_7_1_1; }

		//","
		public Keyword getCommaKeyword_7_1_1_0() { return cCommaKeyword_7_1_1_0; }

		//definition=definition
		public Assignment getDefinitionAssignment_7_1_1_1() { return cDefinitionAssignment_7_1_1_1; }

		//definition
		public RuleCall getDefinitionDefinitionParserRuleCall_7_1_1_1_0() { return cDefinitionDefinitionParserRuleCall_7_1_1_1_0; }

		//Assember_Directives_type (expression+=variable ("," description+=description)?)
		public Group getGroup_8() { return cGroup_8; }

		//Assember_Directives_type
		public RuleCall getAssember_Directives_typeParserRuleCall_8_0() { return cAssember_Directives_typeParserRuleCall_8_0; }

		//expression+=variable ("," description+=description)?
		public Group getGroup_8_1() { return cGroup_8_1; }

		//expression+=variable
		public Assignment getExpressionAssignment_8_1_0() { return cExpressionAssignment_8_1_0; }

		//variable
		public RuleCall getExpressionVariableParserRuleCall_8_1_0_0() { return cExpressionVariableParserRuleCall_8_1_0_0; }

		//("," description+=description)?
		public Group getGroup_8_1_1() { return cGroup_8_1_1; }

		//","
		public Keyword getCommaKeyword_8_1_1_0() { return cCommaKeyword_8_1_1_0; }

		//description+=description
		public Assignment getDescriptionAssignment_8_1_1_1() { return cDescriptionAssignment_8_1_1_1; }

		//description
		public RuleCall getDescriptionDescriptionParserRuleCall_8_1_1_1_0() { return cDescriptionDescriptionParserRuleCall_8_1_1_1_0; }

		//Assembler_Directives_endm
		public RuleCall getAssembler_Directives_endmParserRuleCall_9() { return cAssembler_Directives_endmParserRuleCall_9; }

		//ARM_Machine_Directives (expression=variable ("," expression2=variable)*)?
		public Group getGroup_10() { return cGroup_10; }

		//ARM_Machine_Directives
		public RuleCall getARM_Machine_DirectivesParserRuleCall_10_0() { return cARM_Machine_DirectivesParserRuleCall_10_0; }

		//(expression=variable ("," expression2=variable)*)?
		public Group getGroup_10_1() { return cGroup_10_1; }

		//expression=variable
		public Assignment getExpressionAssignment_10_1_0() { return cExpressionAssignment_10_1_0; }

		//variable
		public RuleCall getExpressionVariableParserRuleCall_10_1_0_0() { return cExpressionVariableParserRuleCall_10_1_0_0; }

		//("," expression2=variable)*
		public Group getGroup_10_1_1() { return cGroup_10_1_1; }

		//","
		public Keyword getCommaKeyword_10_1_1_0() { return cCommaKeyword_10_1_1_0; }

		//expression2=variable
		public Assignment getExpression2Assignment_10_1_1_1() { return cExpression2Assignment_10_1_1_1; }

		//variable
		public RuleCall getExpression2VariableParserRuleCall_10_1_1_1_0() { return cExpression2VariableParserRuleCall_10_1_1_1_0; }

		//ARM_MACHINE_DIRECTIVES_align (int=myINT | hex=HEX)?
		public Group getGroup_11() { return cGroup_11; }

		//ARM_MACHINE_DIRECTIVES_align
		public RuleCall getARM_MACHINE_DIRECTIVES_alignParserRuleCall_11_0() { return cARM_MACHINE_DIRECTIVES_alignParserRuleCall_11_0; }

		//(int=myINT | hex=HEX)?
		public Alternatives getAlternatives_11_1() { return cAlternatives_11_1; }

		//int=myINT
		public Assignment getIntAssignment_11_1_0() { return cIntAssignment_11_1_0; }

		//myINT
		public RuleCall getIntMyINTParserRuleCall_11_1_0_0() { return cIntMyINTParserRuleCall_11_1_0_0; }

		//hex=HEX
		public Assignment getHexAssignment_11_1_1() { return cHexAssignment_11_1_1; }

		//HEX
		public RuleCall getHexHEXTerminalRuleCall_11_1_1_0() { return cHexHEXTerminalRuleCall_11_1_1_0; }

		//ARM_Machine_Directives_code (arm?="16" | thumb?="32")
		public Group getGroup_12() { return cGroup_12; }

		//ARM_Machine_Directives_code
		public RuleCall getARM_Machine_Directives_codeParserRuleCall_12_0() { return cARM_Machine_Directives_codeParserRuleCall_12_0; }

		//arm?="16" | thumb?="32"
		public Alternatives getAlternatives_12_1() { return cAlternatives_12_1; }

		//arm?="16"
		public Assignment getArmAssignment_12_1_0() { return cArmAssignment_12_1_0; }

		//"16"
		public Keyword getArm16Keyword_12_1_0_0() { return cArm16Keyword_12_1_0_0; }

		//thumb?="32"
		public Assignment getThumbAssignment_12_1_1() { return cThumbAssignment_12_1_1; }

		//"32"
		public Keyword getThumb32Keyword_12_1_1_0() { return cThumb32Keyword_12_1_1_0; }

		//ARM_Machine_Directives_syntax ("unified" | "divided")
		public Group getGroup_13() { return cGroup_13; }

		//ARM_Machine_Directives_syntax
		public RuleCall getARM_Machine_Directives_syntaxParserRuleCall_13_0() { return cARM_Machine_Directives_syntaxParserRuleCall_13_0; }

		//"unified" | "divided"
		public Alternatives getAlternatives_13_1() { return cAlternatives_13_1; }

		//"unified"
		public Keyword getUnifiedKeyword_13_1_0() { return cUnifiedKeyword_13_1_0; }

		//"divided"
		public Keyword getDividedKeyword_13_1_1() { return cDividedKeyword_13_1_1; }

		//ARM_Machine_Directives_save "{"? reglist+=ID ("," reglist+=ID | "," reglistNum+=myINT)* "}"?
		public Group getGroup_14() { return cGroup_14; }

		//ARM_Machine_Directives_save
		public RuleCall getARM_Machine_Directives_saveParserRuleCall_14_0() { return cARM_Machine_Directives_saveParserRuleCall_14_0; }

		//"{"?
		public Keyword getLeftCurlyBracketKeyword_14_1() { return cLeftCurlyBracketKeyword_14_1; }

		//reglist+=ID
		public Assignment getReglistAssignment_14_2() { return cReglistAssignment_14_2; }

		//ID
		public RuleCall getReglistIDTerminalRuleCall_14_2_0() { return cReglistIDTerminalRuleCall_14_2_0; }

		//("," reglist+=ID | "," reglistNum+=myINT)*
		public Alternatives getAlternatives_14_3() { return cAlternatives_14_3; }

		//"," reglist+=ID
		public Group getGroup_14_3_0() { return cGroup_14_3_0; }

		//","
		public Keyword getCommaKeyword_14_3_0_0() { return cCommaKeyword_14_3_0_0; }

		//reglist+=ID
		public Assignment getReglistAssignment_14_3_0_1() { return cReglistAssignment_14_3_0_1; }

		//ID
		public RuleCall getReglistIDTerminalRuleCall_14_3_0_1_0() { return cReglistIDTerminalRuleCall_14_3_0_1_0; }

		//"," reglistNum+=myINT
		public Group getGroup_14_3_1() { return cGroup_14_3_1; }

		//","
		public Keyword getCommaKeyword_14_3_1_0() { return cCommaKeyword_14_3_1_0; }

		//reglistNum+=myINT
		public Assignment getReglistNumAssignment_14_3_1_1() { return cReglistNumAssignment_14_3_1_1; }

		//myINT
		public RuleCall getReglistNumMyINTParserRuleCall_14_3_1_1_0() { return cReglistNumMyINTParserRuleCall_14_3_1_1_0; }

		//"}"?
		public Keyword getRightCurlyBracketKeyword_14_4() { return cRightCurlyBracketKeyword_14_4; }

		//ARM_Machine_Directives_save "{"? register+=REGISTER ("," register+=REGISTER)* "}"?
		public Group getGroup_15() { return cGroup_15; }

		//ARM_Machine_Directives_save
		public RuleCall getARM_Machine_Directives_saveParserRuleCall_15_0() { return cARM_Machine_Directives_saveParserRuleCall_15_0; }

		//"{"?
		public Keyword getLeftCurlyBracketKeyword_15_1() { return cLeftCurlyBracketKeyword_15_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_15_2() { return cRegisterAssignment_15_2; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_15_2_0() { return cRegisterREGISTERParserRuleCall_15_2_0; }

		//("," register+=REGISTER)*
		public Group getGroup_15_3() { return cGroup_15_3; }

		//","
		public Keyword getCommaKeyword_15_3_0() { return cCommaKeyword_15_3_0; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_15_3_1() { return cRegisterAssignment_15_3_1; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_15_3_1_0() { return cRegisterREGISTERParserRuleCall_15_3_1_0; }

		//"}"?
		public Keyword getRightCurlyBracketKeyword_15_4() { return cRightCurlyBracketKeyword_15_4; }

		//CExtendasciz expression=variable?
		public Group getGroup_16() { return cGroup_16; }

		//CExtendasciz
		public RuleCall getCExtendascizParserRuleCall_16_0() { return cCExtendascizParserRuleCall_16_0; }

		//expression=variable?
		public Assignment getExpressionAssignment_16_1() { return cExpressionAssignment_16_1; }

		//variable
		public RuleCall getExpressionVariableParserRuleCall_16_1_0() { return cExpressionVariableParserRuleCall_16_1_0; }

		//"\\"? CLang expression=variable?
		public Group getGroup_17() { return cGroup_17; }

		//"\\"?
		public Keyword getReverseSolidusKeyword_17_0() { return cReverseSolidusKeyword_17_0; }

		//CLang
		public RuleCall getCLangParserRuleCall_17_1() { return cCLangParserRuleCall_17_1; }

		//expression=variable?
		public Assignment getExpressionAssignment_17_2() { return cExpressionAssignment_17_2; }

		//variable
		public RuleCall getExpressionVariableParserRuleCall_17_2_0() { return cExpressionVariableParserRuleCall_17_2_0; }

		//label_keyword+=label_keyword
		public Assignment getLabel_keywordAssignment_18() { return cLabel_keywordAssignment_18; }

		//label_keyword
		public RuleCall getLabel_keywordLabel_keywordParserRuleCall_18_0() { return cLabel_keywordLabel_keywordParserRuleCall_18_0; }

		//"\\"? variable_colon
		public Group getGroup_19() { return cGroup_19; }

		//"\\"?
		public Keyword getReverseSolidusKeyword_19_0() { return cReverseSolidusKeyword_19_0; }

		//variable_colon
		public RuleCall getVariable_colonParserRuleCall_19_1() { return cVariable_colonParserRuleCall_19_1; }

		//variable_variable
		public RuleCall getVariable_variableParserRuleCall_20() { return cVariable_variableParserRuleCall_20; }
	}

	public class Variable_variableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variable_variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVariable2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariable2VariableParserRuleCall_1_1_0 = (RuleCall)cVariable2Assignment_1_1.eContents().get(0);
		
		//variable_variable:
		//	variable+=variable ("," variable2+=variable)*;
		@Override public ParserRule getRule() { return rule; }

		//variable+=variable ("," variable2+=variable)*
		public Group getGroup() { return cGroup; }

		//variable+=variable
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//variable
		public RuleCall getVariableVariableParserRuleCall_0_0() { return cVariableVariableParserRuleCall_0_0; }

		//("," variable2+=variable)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//variable2+=variable
		public Assignment getVariable2Assignment_1_1() { return cVariable2Assignment_1_1; }

		//variable
		public RuleCall getVariable2VariableParserRuleCall_1_1_0() { return cVariable2VariableParserRuleCall_1_1_0; }
	}

	public class Variable_colonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variable_colon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cVariableIDTerminalRuleCall_0_0_0 = (RuleCall)cVariableAssignment_0_0.eContents().get(0);
		private final Assignment cVariableINTAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cVariableINTMyINTParserRuleCall_0_1_0 = (RuleCall)cVariableINTAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//variable_colon:
		//	(variable+=ID | variableINT+=myINT) ":";
		@Override public ParserRule getRule() { return rule; }

		//(variable+=ID | variableINT+=myINT) ":"
		public Group getGroup() { return cGroup; }

		//variable+=ID | variableINT+=myINT
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//variable+=ID
		public Assignment getVariableAssignment_0_0() { return cVariableAssignment_0_0; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_0_0_0() { return cVariableIDTerminalRuleCall_0_0_0; }

		//variableINT+=myINT
		public Assignment getVariableINTAssignment_0_1() { return cVariableINTAssignment_0_1; }

		//myINT
		public RuleCall getVariableINTMyINTParserRuleCall_0_1_0() { return cVariableINTMyINTParserRuleCall_0_1_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
	}

	public class Label_keywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "label_keyword");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelIDTerminalRuleCall_0_0 = (RuleCall)cLabelAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cVariableAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_1_0_0_0 = (RuleCall)cVariableAssignment_1_0_0.eContents().get(0);
		private final Assignment cRegisterAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_0_1_0 = (RuleCall)cRegisterAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Assignment cVariable2Assignment_1_1_1_0 = (Assignment)cAlternatives_1_1_1.eContents().get(0);
		private final RuleCall cVariable2VariableParserRuleCall_1_1_1_0_0 = (RuleCall)cVariable2Assignment_1_1_1_0.eContents().get(0);
		private final Assignment cRegisterAssignment_1_1_1_1 = (Assignment)cAlternatives_1_1_1.eContents().get(1);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_1_1_1_0 = (RuleCall)cRegisterAssignment_1_1_1_1.eContents().get(0);
		
		//label_keyword:
		//	label+=ID ((variable+=variable | register+=REGISTER) ("," (variable2+=variable | register+=REGISTER))*)?;
		@Override public ParserRule getRule() { return rule; }

		//label+=ID ((variable+=variable | register+=REGISTER) ("," (variable2+=variable | register+=REGISTER))*)?
		public Group getGroup() { return cGroup; }

		//label+=ID
		public Assignment getLabelAssignment_0() { return cLabelAssignment_0; }

		//ID
		public RuleCall getLabelIDTerminalRuleCall_0_0() { return cLabelIDTerminalRuleCall_0_0; }

		//((variable+=variable | register+=REGISTER) ("," (variable2+=variable | register+=REGISTER))*)?
		public Group getGroup_1() { return cGroup_1; }

		//variable+=variable | register+=REGISTER
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//variable+=variable
		public Assignment getVariableAssignment_1_0_0() { return cVariableAssignment_1_0_0; }

		//variable
		public RuleCall getVariableVariableParserRuleCall_1_0_0_0() { return cVariableVariableParserRuleCall_1_0_0_0; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_0_1() { return cRegisterAssignment_1_0_1; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_0_1_0() { return cRegisterREGISTERParserRuleCall_1_0_1_0; }

		//("," (variable2+=variable | register+=REGISTER))*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//variable2+=variable | register+=REGISTER
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }

		//variable2+=variable
		public Assignment getVariable2Assignment_1_1_1_0() { return cVariable2Assignment_1_1_1_0; }

		//variable
		public RuleCall getVariable2VariableParserRuleCall_1_1_1_0_0() { return cVariable2VariableParserRuleCall_1_1_1_0_0; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_1_1_1() { return cRegisterAssignment_1_1_1_1; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_1_1_1_0() { return cRegisterREGISTERParserRuleCall_1_1_1_1_0; }
	}

	public class Add_sub_instrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "add_sub_instr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cADD_OPParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cADC_OPParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cADR_OPParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cSUB_OPParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cSBC_OPParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cRSB_OPParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final RuleCall cRSC_OPParserRuleCall_0_6 = (RuleCall)cAlternatives_0.eContents().get(6);
		private final RuleCall cADRL_OPParserRuleCall_0_7 = (RuleCall)cAlternatives_0.eContents().get(7);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRegisterAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_0_0 = (RuleCall)cRegisterAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRegisterAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_2_0 = (RuleCall)cRegisterAssignment_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cOperand2Assignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cOperand2Operand2ParserRuleCall_1_4_0 = (RuleCall)cOperand2Assignment_1_4.eContents().get(0);
		
		//add_sub_instr:
		//	(ADD_OP | ADC_OP | ADR_OP | SUB_OP | SBC_OP | RSB_OP | RSC_OP | ADRL_OP) (register+=REGISTER "," register+=REGISTER
		//	"," Operand2+=Operand2);
		@Override public ParserRule getRule() { return rule; }

		//(ADD_OP | ADC_OP | ADR_OP | SUB_OP | SBC_OP | RSB_OP | RSC_OP | ADRL_OP) (register+=REGISTER "," register+=REGISTER ","
		//Operand2+=Operand2)
		public Group getGroup() { return cGroup; }

		//ADD_OP | ADC_OP | ADR_OP | SUB_OP | SBC_OP | RSB_OP | RSC_OP | ADRL_OP
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//ADD_OP
		public RuleCall getADD_OPParserRuleCall_0_0() { return cADD_OPParserRuleCall_0_0; }

		//ADC_OP
		public RuleCall getADC_OPParserRuleCall_0_1() { return cADC_OPParserRuleCall_0_1; }

		//ADR_OP
		public RuleCall getADR_OPParserRuleCall_0_2() { return cADR_OPParserRuleCall_0_2; }

		//SUB_OP
		public RuleCall getSUB_OPParserRuleCall_0_3() { return cSUB_OPParserRuleCall_0_3; }

		//SBC_OP
		public RuleCall getSBC_OPParserRuleCall_0_4() { return cSBC_OPParserRuleCall_0_4; }

		//RSB_OP
		public RuleCall getRSB_OPParserRuleCall_0_5() { return cRSB_OPParserRuleCall_0_5; }

		//RSC_OP
		public RuleCall getRSC_OPParserRuleCall_0_6() { return cRSC_OPParserRuleCall_0_6; }

		//ADRL_OP
		public RuleCall getADRL_OPParserRuleCall_0_7() { return cADRL_OPParserRuleCall_0_7; }

		//register+=REGISTER "," register+=REGISTER "," Operand2+=Operand2
		public Group getGroup_1() { return cGroup_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_0() { return cRegisterAssignment_1_0; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_0_0() { return cRegisterREGISTERParserRuleCall_1_0_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_2() { return cRegisterAssignment_1_2; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_2_0() { return cRegisterREGISTERParserRuleCall_1_2_0; }

		//","
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }

		//Operand2+=Operand2
		public Assignment getOperand2Assignment_1_4() { return cOperand2Assignment_1_4; }

		//Operand2
		public RuleCall getOperand2Operand2ParserRuleCall_1_4_0() { return cOperand2Operand2ParserRuleCall_1_4_0; }
	}

	public class Adrl_adr_instrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "adrl_adr_instr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cADRL_OPParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cADR_OPParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRegisterAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_0_0 = (RuleCall)cRegisterAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionRandomEntryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		
		//adrl_adr_instr:
		//	(ADRL_OP | ADR_OP) (register+=REGISTER "," expression+=randomEntry+);
		@Override public ParserRule getRule() { return rule; }

		//(ADRL_OP | ADR_OP) (register+=REGISTER "," expression+=randomEntry+)
		public Group getGroup() { return cGroup; }

		//ADRL_OP | ADR_OP
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//ADRL_OP
		public RuleCall getADRL_OPParserRuleCall_0_0() { return cADRL_OPParserRuleCall_0_0; }

		//ADR_OP
		public RuleCall getADR_OPParserRuleCall_0_1() { return cADR_OPParserRuleCall_0_1; }

		//register+=REGISTER "," expression+=randomEntry+
		public Group getGroup_1() { return cGroup_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_0() { return cRegisterAssignment_1_0; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_0_0() { return cRegisterREGISTERParserRuleCall_1_0_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//expression+=randomEntry+
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//randomEntry
		public RuleCall getExpressionRandomEntryParserRuleCall_1_2_0() { return cExpressionRandomEntryParserRuleCall_1_2_0; }
	}

	public class Mul_3R_instrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mul_3R_instr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cMUL_OPParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cSMUL_OPParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cSMULW_OPParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRegisterAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_0_0 = (RuleCall)cRegisterAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRegisterAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_2_0 = (RuleCall)cRegisterAssignment_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRegisterAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_4_0 = (RuleCall)cRegisterAssignment_1_4.eContents().get(0);
		
		//mul_3R_instr:
		//	(MUL_OP | SMUL_OP | SMULW_OP) (register+=REGISTER "," register+=REGISTER "," register+=REGISTER);
		@Override public ParserRule getRule() { return rule; }

		//(MUL_OP | SMUL_OP | SMULW_OP) (register+=REGISTER "," register+=REGISTER "," register+=REGISTER)
		public Group getGroup() { return cGroup; }

		//MUL_OP | SMUL_OP | SMULW_OP
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//MUL_OP
		public RuleCall getMUL_OPParserRuleCall_0_0() { return cMUL_OPParserRuleCall_0_0; }

		//SMUL_OP
		public RuleCall getSMUL_OPParserRuleCall_0_1() { return cSMUL_OPParserRuleCall_0_1; }

		//SMULW_OP
		public RuleCall getSMULW_OPParserRuleCall_0_2() { return cSMULW_OPParserRuleCall_0_2; }

		//register+=REGISTER "," register+=REGISTER "," register+=REGISTER
		public Group getGroup_1() { return cGroup_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_0() { return cRegisterAssignment_1_0; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_0_0() { return cRegisterREGISTERParserRuleCall_1_0_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_2() { return cRegisterAssignment_1_2; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_2_0() { return cRegisterREGISTERParserRuleCall_1_2_0; }

		//","
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_4() { return cRegisterAssignment_1_4; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_4_0() { return cRegisterREGISTERParserRuleCall_1_4_0; }
	}

	public class Mul_4R_instrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mul_4R_instr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cMLA_OPParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cUMULL_OPParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cUMLAL_OPParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cSMULL_OPParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cSMLAL_OPParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cMLS_OPParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final RuleCall cSMLA_OPParserRuleCall_0_6 = (RuleCall)cAlternatives_0.eContents().get(6);
		private final RuleCall cSMLAW_OPParserRuleCall_0_7 = (RuleCall)cAlternatives_0.eContents().get(7);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRegisterAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_0_0 = (RuleCall)cRegisterAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRegisterAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_2_0 = (RuleCall)cRegisterAssignment_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRegisterAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_4_0 = (RuleCall)cRegisterAssignment_1_4.eContents().get(0);
		private final Keyword cCommaKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cRegisterAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_6_0 = (RuleCall)cRegisterAssignment_1_6.eContents().get(0);
		
		//mul_4R_instr:
		//	(MLA_OP | UMULL_OP | UMLAL_OP | SMULL_OP | SMLAL_OP | MLS_OP | SMLA_OP | SMLAW_OP) (register+=REGISTER ","
		//	register+=REGISTER "," register+=REGISTER "," register+=REGISTER);
		@Override public ParserRule getRule() { return rule; }

		//(MLA_OP | UMULL_OP | UMLAL_OP | SMULL_OP | SMLAL_OP | MLS_OP | SMLA_OP | SMLAW_OP) (register+=REGISTER ","
		//register+=REGISTER "," register+=REGISTER "," register+=REGISTER)
		public Group getGroup() { return cGroup; }

		//MLA_OP | UMULL_OP | UMLAL_OP | SMULL_OP | SMLAL_OP | MLS_OP | SMLA_OP | SMLAW_OP
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//MLA_OP
		public RuleCall getMLA_OPParserRuleCall_0_0() { return cMLA_OPParserRuleCall_0_0; }

		//UMULL_OP
		public RuleCall getUMULL_OPParserRuleCall_0_1() { return cUMULL_OPParserRuleCall_0_1; }

		//UMLAL_OP
		public RuleCall getUMLAL_OPParserRuleCall_0_2() { return cUMLAL_OPParserRuleCall_0_2; }

		//SMULL_OP
		public RuleCall getSMULL_OPParserRuleCall_0_3() { return cSMULL_OPParserRuleCall_0_3; }

		//SMLAL_OP
		public RuleCall getSMLAL_OPParserRuleCall_0_4() { return cSMLAL_OPParserRuleCall_0_4; }

		//MLS_OP
		public RuleCall getMLS_OPParserRuleCall_0_5() { return cMLS_OPParserRuleCall_0_5; }

		//SMLA_OP
		public RuleCall getSMLA_OPParserRuleCall_0_6() { return cSMLA_OPParserRuleCall_0_6; }

		//SMLAW_OP
		public RuleCall getSMLAW_OPParserRuleCall_0_7() { return cSMLAW_OPParserRuleCall_0_7; }

		//register+=REGISTER "," register+=REGISTER "," register+=REGISTER "," register+=REGISTER
		public Group getGroup_1() { return cGroup_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_0() { return cRegisterAssignment_1_0; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_0_0() { return cRegisterREGISTERParserRuleCall_1_0_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_2() { return cRegisterAssignment_1_2; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_2_0() { return cRegisterREGISTERParserRuleCall_1_2_0; }

		//","
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_4() { return cRegisterAssignment_1_4; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_4_0() { return cRegisterREGISTERParserRuleCall_1_4_0; }

		//","
		public Keyword getCommaKeyword_1_5() { return cCommaKeyword_1_5; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_6() { return cRegisterAssignment_1_6; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_6_0() { return cRegisterREGISTERParserRuleCall_1_6_0; }
	}

	public class Mov_instrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mov_instr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cMOV_OPParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cMVN_OPParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRegisterAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_0_0 = (RuleCall)cRegisterAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2Operand2ParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//mov_instr:
		//	(MOV_OP | MVN_OP) (register+=REGISTER "," Operand2+=Operand2);
		@Override public ParserRule getRule() { return rule; }

		//(MOV_OP | MVN_OP) (register+=REGISTER "," Operand2+=Operand2)
		public Group getGroup() { return cGroup; }

		//MOV_OP | MVN_OP
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//MOV_OP
		public RuleCall getMOV_OPParserRuleCall_0_0() { return cMOV_OPParserRuleCall_0_0; }

		//MVN_OP
		public RuleCall getMVN_OPParserRuleCall_0_1() { return cMVN_OPParserRuleCall_0_1; }

		//register+=REGISTER "," Operand2+=Operand2
		public Group getGroup_1() { return cGroup_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_0() { return cRegisterAssignment_1_0; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_0_0() { return cRegisterREGISTERParserRuleCall_1_0_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//Operand2+=Operand2
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }

		//Operand2
		public RuleCall getOperand2Operand2ParserRuleCall_1_2_0() { return cOperand2Operand2ParserRuleCall_1_2_0; }
	}

	public class Shift_instrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "shift_instr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cASR_OPParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cLSL_OPParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cLSR_OPParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cROR_OPParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cRRX_OPParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRegisterAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_0_0 = (RuleCall)cRegisterAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRegisterAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_2_0 = (RuleCall)cRegisterAssignment_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRs_shAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRs_shRs_shParserRuleCall_1_4_0 = (RuleCall)cRs_shAssignment_1_4.eContents().get(0);
		
		//shift_instr:
		//	(ASR_OP | LSL_OP | LSR_OP | ROR_OP | RRX_OP) (register+=REGISTER "," register+=REGISTER "," rs_sh+=rs_sh);
		@Override public ParserRule getRule() { return rule; }

		//(ASR_OP | LSL_OP | LSR_OP | ROR_OP | RRX_OP) (register+=REGISTER "," register+=REGISTER "," rs_sh+=rs_sh)
		public Group getGroup() { return cGroup; }

		//ASR_OP | LSL_OP | LSR_OP | ROR_OP | RRX_OP
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//ASR_OP
		public RuleCall getASR_OPParserRuleCall_0_0() { return cASR_OPParserRuleCall_0_0; }

		//LSL_OP
		public RuleCall getLSL_OPParserRuleCall_0_1() { return cLSL_OPParserRuleCall_0_1; }

		//LSR_OP
		public RuleCall getLSR_OPParserRuleCall_0_2() { return cLSR_OPParserRuleCall_0_2; }

		//ROR_OP
		public RuleCall getROR_OPParserRuleCall_0_3() { return cROR_OPParserRuleCall_0_3; }

		//RRX_OP
		public RuleCall getRRX_OPParserRuleCall_0_4() { return cRRX_OPParserRuleCall_0_4; }

		//register+=REGISTER "," register+=REGISTER "," rs_sh+=rs_sh
		public Group getGroup_1() { return cGroup_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_0() { return cRegisterAssignment_1_0; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_0_0() { return cRegisterREGISTERParserRuleCall_1_0_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_2() { return cRegisterAssignment_1_2; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_2_0() { return cRegisterREGISTERParserRuleCall_1_2_0; }

		//","
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }

		//rs_sh+=rs_sh
		public Assignment getRs_shAssignment_1_4() { return cRs_shAssignment_1_4; }

		//rs_sh
		public RuleCall getRs_shRs_shParserRuleCall_1_4_0() { return cRs_shRs_shParserRuleCall_1_4_0; }
	}

	public class Clz_instrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "clz_instr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCLZ_OPParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRegisterAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_0_0 = (RuleCall)cRegisterAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRegisterAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_2_0 = (RuleCall)cRegisterAssignment_1_2.eContents().get(0);
		
		//clz_instr:
		//	CLZ_OP (register+=REGISTER "," register+=REGISTER);
		@Override public ParserRule getRule() { return rule; }

		//CLZ_OP (register+=REGISTER "," register+=REGISTER)
		public Group getGroup() { return cGroup; }

		//CLZ_OP
		public RuleCall getCLZ_OPParserRuleCall_0() { return cCLZ_OPParserRuleCall_0; }

		//register+=REGISTER "," register+=REGISTER
		public Group getGroup_1() { return cGroup_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_0() { return cRegisterAssignment_1_0; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_0_0() { return cRegisterREGISTERParserRuleCall_1_0_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_2() { return cRegisterAssignment_1_2; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_2_0() { return cRegisterREGISTERParserRuleCall_1_2_0; }
	}

	public class Compare_test_instrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compare_test_instr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cCMP_OPParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cCMN_OPParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cTST_OPParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cTEQ_OPParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRegisterAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_0_0 = (RuleCall)cRegisterAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2Operand2ParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//compare_test_instr:
		//	(CMP_OP | CMN_OP | TST_OP | TEQ_OP) (register+=REGISTER "," Operand2+=Operand2);
		@Override public ParserRule getRule() { return rule; }

		//(CMP_OP | CMN_OP | TST_OP | TEQ_OP) (register+=REGISTER "," Operand2+=Operand2)
		public Group getGroup() { return cGroup; }

		//CMP_OP | CMN_OP | TST_OP | TEQ_OP
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//CMP_OP
		public RuleCall getCMP_OPParserRuleCall_0_0() { return cCMP_OPParserRuleCall_0_0; }

		//CMN_OP
		public RuleCall getCMN_OPParserRuleCall_0_1() { return cCMN_OPParserRuleCall_0_1; }

		//TST_OP
		public RuleCall getTST_OPParserRuleCall_0_2() { return cTST_OPParserRuleCall_0_2; }

		//TEQ_OP
		public RuleCall getTEQ_OPParserRuleCall_0_3() { return cTEQ_OPParserRuleCall_0_3; }

		//register+=REGISTER "," Operand2+=Operand2
		public Group getGroup_1() { return cGroup_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_0() { return cRegisterAssignment_1_0; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_0_0() { return cRegisterREGISTERParserRuleCall_1_0_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//Operand2+=Operand2
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }

		//Operand2
		public RuleCall getOperand2Operand2ParserRuleCall_1_2_0() { return cOperand2Operand2ParserRuleCall_1_2_0; }
	}

	public class Logical_instrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "logical_instr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cAND_OPParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cEOR_OPParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cORR_OPParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cORN_OPParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cBIC_OPParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRegisterAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_0_0 = (RuleCall)cRegisterAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cRegisterAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_1_1_0 = (RuleCall)cRegisterAssignment_1_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cOperand2Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cOperand2Operand2ParserRuleCall_1_3_0 = (RuleCall)cOperand2Assignment_1_3.eContents().get(0);
		
		//logical_instr:
		//	(AND_OP | EOR_OP | ORR_OP | ORN_OP | BIC_OP) (register+=REGISTER ("," register+=REGISTER)? "," Operand2+=Operand2);
		@Override public ParserRule getRule() { return rule; }

		//(AND_OP | EOR_OP | ORR_OP | ORN_OP | BIC_OP) (register+=REGISTER ("," register+=REGISTER)? "," Operand2+=Operand2)
		public Group getGroup() { return cGroup; }

		//AND_OP | EOR_OP | ORR_OP | ORN_OP | BIC_OP
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//AND_OP
		public RuleCall getAND_OPParserRuleCall_0_0() { return cAND_OPParserRuleCall_0_0; }

		//EOR_OP
		public RuleCall getEOR_OPParserRuleCall_0_1() { return cEOR_OPParserRuleCall_0_1; }

		//ORR_OP
		public RuleCall getORR_OPParserRuleCall_0_2() { return cORR_OPParserRuleCall_0_2; }

		//ORN_OP
		public RuleCall getORN_OPParserRuleCall_0_3() { return cORN_OPParserRuleCall_0_3; }

		//BIC_OP
		public RuleCall getBIC_OPParserRuleCall_0_4() { return cBIC_OPParserRuleCall_0_4; }

		//register+=REGISTER ("," register+=REGISTER)? "," Operand2+=Operand2
		public Group getGroup_1() { return cGroup_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_0() { return cRegisterAssignment_1_0; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_0_0() { return cRegisterREGISTERParserRuleCall_1_0_0; }

		//("," register+=REGISTER)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_1_1() { return cRegisterAssignment_1_1_1; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_1_1_0() { return cRegisterREGISTERParserRuleCall_1_1_1_0; }

		//","
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }

		//Operand2+=Operand2
		public Assignment getOperand2Assignment_1_3() { return cOperand2Assignment_1_3; }

		//Operand2
		public RuleCall getOperand2Operand2ParserRuleCall_1_3_0() { return cOperand2Operand2ParserRuleCall_1_3_0; }
	}

	public class Branch_instrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "branch_instr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cB_OPParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cBL_OPParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cBX_OPParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cBLX_OPParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cBXJ_OPParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cImmediate_labelAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cImmediate_labelImmediate_labelParserRuleCall_1_0_0 = (RuleCall)cImmediate_labelAssignment_1_0.eContents().get(0);
		private final Assignment cRegisterAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_1_0 = (RuleCall)cRegisterAssignment_1_1.eContents().get(0);
		
		//branch_instr:
		//	(B_OP | BL_OP | BX_OP | BLX_OP | BXJ_OP) (immediate_label+=immediate_label | register+=REGISTER);
		@Override public ParserRule getRule() { return rule; }

		//(B_OP | BL_OP | BX_OP | BLX_OP | BXJ_OP) (immediate_label+=immediate_label | register+=REGISTER)
		public Group getGroup() { return cGroup; }

		//B_OP | BL_OP | BX_OP | BLX_OP | BXJ_OP
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//B_OP
		public RuleCall getB_OPParserRuleCall_0_0() { return cB_OPParserRuleCall_0_0; }

		//BL_OP
		public RuleCall getBL_OPParserRuleCall_0_1() { return cBL_OPParserRuleCall_0_1; }

		//BX_OP
		public RuleCall getBX_OPParserRuleCall_0_2() { return cBX_OPParserRuleCall_0_2; }

		//BLX_OP
		public RuleCall getBLX_OPParserRuleCall_0_3() { return cBLX_OPParserRuleCall_0_3; }

		//BXJ_OP
		public RuleCall getBXJ_OPParserRuleCall_0_4() { return cBXJ_OPParserRuleCall_0_4; }

		//immediate_label+=immediate_label | register+=REGISTER
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//immediate_label+=immediate_label
		public Assignment getImmediate_labelAssignment_1_0() { return cImmediate_labelAssignment_1_0; }

		//immediate_label
		public RuleCall getImmediate_labelImmediate_labelParserRuleCall_1_0_0() { return cImmediate_labelImmediate_labelParserRuleCall_1_0_0; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_1() { return cRegisterAssignment_1_1; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_1_0() { return cRegisterREGISTERParserRuleCall_1_1_0; }
	}

	public class Mrs_instrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mrs_instr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMRS_OPParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRegisterAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_0_0 = (RuleCall)cRegisterAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cPSR_FIELDAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cPSR_FIELDPSR_FIELD_EParserRuleCall_1_2_0 = (RuleCall)cPSR_FIELDAssignment_1_2.eContents().get(0);
		
		//mrs_instr:
		//	MRS_OP (register+=REGISTER "," PSR_FIELD+=PSR_FIELD_E);
		@Override public ParserRule getRule() { return rule; }

		//MRS_OP (register+=REGISTER "," PSR_FIELD+=PSR_FIELD_E)
		public Group getGroup() { return cGroup; }

		//MRS_OP
		public RuleCall getMRS_OPParserRuleCall_0() { return cMRS_OPParserRuleCall_0; }

		//register+=REGISTER "," PSR_FIELD+=PSR_FIELD_E
		public Group getGroup_1() { return cGroup_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_0() { return cRegisterAssignment_1_0; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_0_0() { return cRegisterREGISTERParserRuleCall_1_0_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//PSR_FIELD+=PSR_FIELD_E
		public Assignment getPSR_FIELDAssignment_1_2() { return cPSR_FIELDAssignment_1_2; }

		//PSR_FIELD_E
		public RuleCall getPSR_FIELDPSR_FIELD_EParserRuleCall_1_2_0() { return cPSR_FIELDPSR_FIELD_EParserRuleCall_1_2_0; }
	}

	public class Msr_instrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msr_instr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMSR_OPParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cAPSR_FLAGAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cAPSR_FLAGAPSR_FLAG_EParserRuleCall_1_0_0_0 = (RuleCall)cAPSR_FLAGAssignment_1_0_0.eContents().get(0);
		private final Assignment cPSR_FIELDAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cPSR_FIELDPSR_FIELD_EParserRuleCall_1_0_1_0 = (RuleCall)cPSR_FIELDAssignment_1_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Assignment cRegisterAssignment_1_2_0 = (Assignment)cAlternatives_1_2.eContents().get(0);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_2_0_0 = (RuleCall)cRegisterAssignment_1_2_0.eContents().get(0);
		private final Assignment cImmediate_labelAssignment_1_2_1 = (Assignment)cAlternatives_1_2.eContents().get(1);
		private final RuleCall cImmediate_labelImmediate_labelParserRuleCall_1_2_1_0 = (RuleCall)cImmediate_labelAssignment_1_2_1.eContents().get(0);
		
		//msr_instr:
		//	MSR_OP ((APSR_FLAG+=APSR_FLAG_E | PSR_FIELD+=PSR_FIELD_E) "," (register+=REGISTER |
		//	immediate_label+=immediate_label));
		@Override public ParserRule getRule() { return rule; }

		//MSR_OP ((APSR_FLAG+=APSR_FLAG_E | PSR_FIELD+=PSR_FIELD_E) "," (register+=REGISTER | immediate_label+=immediate_label))
		public Group getGroup() { return cGroup; }

		//MSR_OP
		public RuleCall getMSR_OPParserRuleCall_0() { return cMSR_OPParserRuleCall_0; }

		//(APSR_FLAG+=APSR_FLAG_E | PSR_FIELD+=PSR_FIELD_E) "," (register+=REGISTER | immediate_label+=immediate_label)
		public Group getGroup_1() { return cGroup_1; }

		//APSR_FLAG+=APSR_FLAG_E | PSR_FIELD+=PSR_FIELD_E
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//APSR_FLAG+=APSR_FLAG_E
		public Assignment getAPSR_FLAGAssignment_1_0_0() { return cAPSR_FLAGAssignment_1_0_0; }

		//APSR_FLAG_E
		public RuleCall getAPSR_FLAGAPSR_FLAG_EParserRuleCall_1_0_0_0() { return cAPSR_FLAGAPSR_FLAG_EParserRuleCall_1_0_0_0; }

		//PSR_FIELD+=PSR_FIELD_E
		public Assignment getPSR_FIELDAssignment_1_0_1() { return cPSR_FIELDAssignment_1_0_1; }

		//PSR_FIELD_E
		public RuleCall getPSR_FIELDPSR_FIELD_EParserRuleCall_1_0_1_0() { return cPSR_FIELDPSR_FIELD_EParserRuleCall_1_0_1_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//register+=REGISTER | immediate_label+=immediate_label
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_2_0() { return cRegisterAssignment_1_2_0; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_2_0_0() { return cRegisterREGISTERParserRuleCall_1_2_0_0; }

		//immediate_label+=immediate_label
		public Assignment getImmediate_labelAssignment_1_2_1() { return cImmediate_labelAssignment_1_2_1; }

		//immediate_label
		public RuleCall getImmediate_labelImmediate_labelParserRuleCall_1_2_1_0() { return cImmediate_labelImmediate_labelParserRuleCall_1_2_1_0; }
	}

	public class Ldr_str_irpre_instrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ldr_str_irpre_instr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cLDR_OPParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cSTR_OPParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRegisterAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_0_0 = (RuleCall)cRegisterAssignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_0_1 = (Keyword)cGroup_1_1_0.eContents().get(1);
		private final Assignment cRegisterAssignment_1_1_0_2 = (Assignment)cGroup_1_1_0.eContents().get(2);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_1_0_2_0 = (RuleCall)cRegisterAssignment_1_1_0_2.eContents().get(0);
		private final Group cGroup_1_1_0_3 = (Group)cGroup_1_1_0.eContents().get(3);
		private final Group cGroup_1_1_0_3_0 = (Group)cGroup_1_1_0_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_0_3_0_0 = (Keyword)cGroup_1_1_0_3_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_0_3_0_1 = (Alternatives)cGroup_1_1_0_3_0.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_1_0_3_0_1_0 = (Keyword)cAlternatives_1_1_0_3_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1_0_3_0_1_1 = (Keyword)cAlternatives_1_1_0_3_0_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0_3_0_2 = (Alternatives)cGroup_1_1_0_3_0.eContents().get(2);
		private final Assignment cRegisterAssignment_1_1_0_3_0_2_0 = (Assignment)cAlternatives_1_1_0_3_0_2.eContents().get(0);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_1_0_3_0_2_0_0 = (RuleCall)cRegisterAssignment_1_1_0_3_0_2_0.eContents().get(0);
		private final Assignment cImmediate_labelAssignment_1_1_0_3_0_2_1 = (Assignment)cAlternatives_1_1_0_3_0_2.eContents().get(1);
		private final RuleCall cImmediate_labelImmediate_labelParserRuleCall_1_1_0_3_0_2_1_0 = (RuleCall)cImmediate_labelAssignment_1_1_0_3_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_0_3_1 = (Keyword)cGroup_1_1_0_3.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_1_0_3_2 = (Keyword)cGroup_1_1_0_3.eContents().get(2);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cImmediate_labelAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cImmediate_labelImmediate_labelParserRuleCall_1_1_1_1_0 = (RuleCall)cImmediate_labelAssignment_1_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cImmediate_labelAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cImmediate_labelImmediate_labelParserRuleCall_1_2_1_0 = (RuleCall)cImmediate_labelAssignment_1_2_1.eContents().get(0);
		
		//ldr_str_irpre_instr:
		//	(LDR_OP | STR_OP) (register+=REGISTER ("," "[" register+=REGISTER (("," ("+" | "-")? (register+=REGISTER |
		//	immediate_label+=immediate_label))? "]" "!"?) | "," immediate_label+=immediate_label) (","
		//	immediate_label+=immediate_label)?);
		@Override public ParserRule getRule() { return rule; }

		//(LDR_OP | STR_OP) (register+=REGISTER ("," "[" register+=REGISTER (("," ("+" | "-")? (register+=REGISTER |
		//immediate_label+=immediate_label))? "]" "!"?) | "," immediate_label+=immediate_label) (","
		//immediate_label+=immediate_label)?)
		public Group getGroup() { return cGroup; }

		//LDR_OP | STR_OP
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//LDR_OP
		public RuleCall getLDR_OPParserRuleCall_0_0() { return cLDR_OPParserRuleCall_0_0; }

		//STR_OP
		public RuleCall getSTR_OPParserRuleCall_0_1() { return cSTR_OPParserRuleCall_0_1; }

		//register+=REGISTER ("," "[" register+=REGISTER (("," ("+" | "-")? (register+=REGISTER |
		//immediate_label+=immediate_label))? "]" "!"?) | "," immediate_label+=immediate_label) (","
		//immediate_label+=immediate_label)?
		public Group getGroup_1() { return cGroup_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_0() { return cRegisterAssignment_1_0; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_0_0() { return cRegisterREGISTERParserRuleCall_1_0_0; }

		//"," "[" register+=REGISTER (("," ("+" | "-")? (register+=REGISTER | immediate_label+=immediate_label))? "]" "!"?) | ","
		//immediate_label+=immediate_label
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"," "[" register+=REGISTER (("," ("+" | "-")? (register+=REGISTER | immediate_label+=immediate_label))? "]" "!"?)
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//","
		public Keyword getCommaKeyword_1_1_0_0() { return cCommaKeyword_1_1_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_0_1() { return cLeftSquareBracketKeyword_1_1_0_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_1_0_2() { return cRegisterAssignment_1_1_0_2; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_1_0_2_0() { return cRegisterREGISTERParserRuleCall_1_1_0_2_0; }

		//("," ("+" | "-")? (register+=REGISTER | immediate_label+=immediate_label))? "]" "!"?
		public Group getGroup_1_1_0_3() { return cGroup_1_1_0_3; }

		//("," ("+" | "-")? (register+=REGISTER | immediate_label+=immediate_label))?
		public Group getGroup_1_1_0_3_0() { return cGroup_1_1_0_3_0; }

		//","
		public Keyword getCommaKeyword_1_1_0_3_0_0() { return cCommaKeyword_1_1_0_3_0_0; }

		//("+" | "-")?
		public Alternatives getAlternatives_1_1_0_3_0_1() { return cAlternatives_1_1_0_3_0_1; }

		//"+"
		public Keyword getPlusSignKeyword_1_1_0_3_0_1_0() { return cPlusSignKeyword_1_1_0_3_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_1_0_3_0_1_1() { return cHyphenMinusKeyword_1_1_0_3_0_1_1; }

		//register+=REGISTER | immediate_label+=immediate_label
		public Alternatives getAlternatives_1_1_0_3_0_2() { return cAlternatives_1_1_0_3_0_2; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_1_0_3_0_2_0() { return cRegisterAssignment_1_1_0_3_0_2_0; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_1_0_3_0_2_0_0() { return cRegisterREGISTERParserRuleCall_1_1_0_3_0_2_0_0; }

		//immediate_label+=immediate_label
		public Assignment getImmediate_labelAssignment_1_1_0_3_0_2_1() { return cImmediate_labelAssignment_1_1_0_3_0_2_1; }

		//immediate_label
		public RuleCall getImmediate_labelImmediate_labelParserRuleCall_1_1_0_3_0_2_1_0() { return cImmediate_labelImmediate_labelParserRuleCall_1_1_0_3_0_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_0_3_1() { return cRightSquareBracketKeyword_1_1_0_3_1; }

		//"!"?
		public Keyword getExclamationMarkKeyword_1_1_0_3_2() { return cExclamationMarkKeyword_1_1_0_3_2; }

		//"," immediate_label+=immediate_label
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//immediate_label+=immediate_label
		public Assignment getImmediate_labelAssignment_1_1_1_1() { return cImmediate_labelAssignment_1_1_1_1; }

		//immediate_label
		public RuleCall getImmediate_labelImmediate_labelParserRuleCall_1_1_1_1_0() { return cImmediate_labelImmediate_labelParserRuleCall_1_1_1_1_0; }

		//("," immediate_label+=immediate_label)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//immediate_label+=immediate_label
		public Assignment getImmediate_labelAssignment_1_2_1() { return cImmediate_labelAssignment_1_2_1; }

		//immediate_label
		public RuleCall getImmediate_labelImmediate_labelParserRuleCall_1_2_1_0() { return cImmediate_labelImmediate_labelParserRuleCall_1_2_1_0; }
	}

	public class Ldr_str_spre_instrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ldr_str_spre_instr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cLDR_OPParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cSTR_OPParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRegisterAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_0_0 = (RuleCall)cRegisterAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRegisterAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_3_0 = (RuleCall)cRegisterAssignment_1_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Alternatives cAlternatives_1_5 = (Alternatives)cGroup_1.eContents().get(5);
		private final Keyword cPlusSignKeyword_1_5_0 = (Keyword)cAlternatives_1_5.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_5_1 = (Keyword)cAlternatives_1_5.eContents().get(1);
		private final Assignment cRegisterAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_6_0 = (RuleCall)cRegisterAssignment_1_6.eContents().get(0);
		private final Keyword cCommaKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Assignment cBAREL_SHIFT_REGISTERAssignment_1_8 = (Assignment)cGroup_1.eContents().get(8);
		private final RuleCall cBAREL_SHIFT_REGISTERBAREL_SHIFT_REGISTERParserRuleCall_1_8_0 = (RuleCall)cBAREL_SHIFT_REGISTERAssignment_1_8.eContents().get(0);
		private final Assignment cImmediate_labelAssignment_1_9 = (Assignment)cGroup_1.eContents().get(9);
		private final RuleCall cImmediate_labelImmediate_labelParserRuleCall_1_9_0 = (RuleCall)cImmediate_labelAssignment_1_9.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_10 = (Keyword)cGroup_1.eContents().get(10);
		private final Keyword cExclamationMarkKeyword_1_11 = (Keyword)cGroup_1.eContents().get(11);
		
		//ldr_str_spre_instr:
		//	(LDR_OP | STR_OP) (register+=REGISTER "," "[" register+=REGISTER "," ("+" | "-")? register+=REGISTER ","
		//	BAREL_SHIFT_REGISTER+=BAREL_SHIFT_REGISTER immediate_label+=immediate_label "]" "!"?);
		@Override public ParserRule getRule() { return rule; }

		//(LDR_OP | STR_OP) (register+=REGISTER "," "[" register+=REGISTER "," ("+" | "-")? register+=REGISTER ","
		//BAREL_SHIFT_REGISTER+=BAREL_SHIFT_REGISTER immediate_label+=immediate_label "]" "!"?)
		public Group getGroup() { return cGroup; }

		//LDR_OP | STR_OP
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//LDR_OP
		public RuleCall getLDR_OPParserRuleCall_0_0() { return cLDR_OPParserRuleCall_0_0; }

		//STR_OP
		public RuleCall getSTR_OPParserRuleCall_0_1() { return cSTR_OPParserRuleCall_0_1; }

		//register+=REGISTER "," "[" register+=REGISTER "," ("+" | "-")? register+=REGISTER ","
		//BAREL_SHIFT_REGISTER+=BAREL_SHIFT_REGISTER immediate_label+=immediate_label "]" "!"?
		public Group getGroup_1() { return cGroup_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_0() { return cRegisterAssignment_1_0; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_0_0() { return cRegisterREGISTERParserRuleCall_1_0_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2() { return cLeftSquareBracketKeyword_1_2; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_3() { return cRegisterAssignment_1_3; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_3_0() { return cRegisterREGISTERParserRuleCall_1_3_0; }

		//","
		public Keyword getCommaKeyword_1_4() { return cCommaKeyword_1_4; }

		//("+" | "-")?
		public Alternatives getAlternatives_1_5() { return cAlternatives_1_5; }

		//"+"
		public Keyword getPlusSignKeyword_1_5_0() { return cPlusSignKeyword_1_5_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_5_1() { return cHyphenMinusKeyword_1_5_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_6() { return cRegisterAssignment_1_6; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_6_0() { return cRegisterREGISTERParserRuleCall_1_6_0; }

		//","
		public Keyword getCommaKeyword_1_7() { return cCommaKeyword_1_7; }

		//BAREL_SHIFT_REGISTER+=BAREL_SHIFT_REGISTER
		public Assignment getBAREL_SHIFT_REGISTERAssignment_1_8() { return cBAREL_SHIFT_REGISTERAssignment_1_8; }

		//BAREL_SHIFT_REGISTER
		public RuleCall getBAREL_SHIFT_REGISTERBAREL_SHIFT_REGISTERParserRuleCall_1_8_0() { return cBAREL_SHIFT_REGISTERBAREL_SHIFT_REGISTERParserRuleCall_1_8_0; }

		//immediate_label+=immediate_label
		public Assignment getImmediate_labelAssignment_1_9() { return cImmediate_labelAssignment_1_9; }

		//immediate_label
		public RuleCall getImmediate_labelImmediate_labelParserRuleCall_1_9_0() { return cImmediate_labelImmediate_labelParserRuleCall_1_9_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_10() { return cRightSquareBracketKeyword_1_10; }

		//"!"?
		public Keyword getExclamationMarkKeyword_1_11() { return cExclamationMarkKeyword_1_11; }
	}

	public class Ldr_str_irpsot_instrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ldr_str_irpsot_instr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cLDR_OPParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cSTR_OPParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRegisterAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_0_0 = (RuleCall)cRegisterAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRegisterAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_3_0 = (RuleCall)cRegisterAssignment_1_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cCommaKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Keyword cNumberSignKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Alternatives cAlternatives_1_7 = (Alternatives)cGroup_1.eContents().get(7);
		private final Keyword cPlusSignKeyword_1_7_0 = (Keyword)cAlternatives_1_7.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_7_1 = (Keyword)cAlternatives_1_7.eContents().get(1);
		private final Alternatives cAlternatives_1_8 = (Alternatives)cGroup_1.eContents().get(8);
		private final Assignment cRegisterAssignment_1_8_0 = (Assignment)cAlternatives_1_8.eContents().get(0);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_8_0_0 = (RuleCall)cRegisterAssignment_1_8_0.eContents().get(0);
		private final Assignment cImmediate_labelAssignment_1_8_1 = (Assignment)cAlternatives_1_8.eContents().get(1);
		private final RuleCall cImmediate_labelImmediate_labelParserRuleCall_1_8_1_0 = (RuleCall)cImmediate_labelAssignment_1_8_1.eContents().get(0);
		
		//ldr_str_irpsot_instr:
		//	(LDR_OP | STR_OP) (register+=REGISTER "," "[" register+=REGISTER "]" "," "#"? ("+" | "-")? (register+=REGISTER |
		//	immediate_label+=immediate_label));
		@Override public ParserRule getRule() { return rule; }

		//(LDR_OP | STR_OP) (register+=REGISTER "," "[" register+=REGISTER "]" "," "#"? ("+" | "-")? (register+=REGISTER |
		//immediate_label+=immediate_label))
		public Group getGroup() { return cGroup; }

		//LDR_OP | STR_OP
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//LDR_OP
		public RuleCall getLDR_OPParserRuleCall_0_0() { return cLDR_OPParserRuleCall_0_0; }

		//STR_OP
		public RuleCall getSTR_OPParserRuleCall_0_1() { return cSTR_OPParserRuleCall_0_1; }

		//register+=REGISTER "," "[" register+=REGISTER "]" "," "#"? ("+" | "-")? (register+=REGISTER |
		//immediate_label+=immediate_label)
		public Group getGroup_1() { return cGroup_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_0() { return cRegisterAssignment_1_0; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_0_0() { return cRegisterREGISTERParserRuleCall_1_0_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2() { return cLeftSquareBracketKeyword_1_2; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_3() { return cRegisterAssignment_1_3; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_3_0() { return cRegisterREGISTERParserRuleCall_1_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }

		//","
		public Keyword getCommaKeyword_1_5() { return cCommaKeyword_1_5; }

		//"#"?
		public Keyword getNumberSignKeyword_1_6() { return cNumberSignKeyword_1_6; }

		//("+" | "-")?
		public Alternatives getAlternatives_1_7() { return cAlternatives_1_7; }

		//"+"
		public Keyword getPlusSignKeyword_1_7_0() { return cPlusSignKeyword_1_7_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_7_1() { return cHyphenMinusKeyword_1_7_1; }

		//register+=REGISTER | immediate_label+=immediate_label
		public Alternatives getAlternatives_1_8() { return cAlternatives_1_8; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_8_0() { return cRegisterAssignment_1_8_0; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_8_0_0() { return cRegisterREGISTERParserRuleCall_1_8_0_0; }

		//immediate_label+=immediate_label
		public Assignment getImmediate_labelAssignment_1_8_1() { return cImmediate_labelAssignment_1_8_1; }

		//immediate_label
		public RuleCall getImmediate_labelImmediate_labelParserRuleCall_1_8_1_0() { return cImmediate_labelImmediate_labelParserRuleCall_1_8_1_0; }
	}

	public class Ldr_str_rpost_instrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ldr_str_rpost_instr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cLDR_OPParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cSTR_OPParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRegisterAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_0_0 = (RuleCall)cRegisterAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRegisterAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_3_0 = (RuleCall)cRegisterAssignment_1_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cCommaKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Alternatives cAlternatives_1_6 = (Alternatives)cGroup_1.eContents().get(6);
		private final Keyword cPlusSignKeyword_1_6_0 = (Keyword)cAlternatives_1_6.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_6_1 = (Keyword)cAlternatives_1_6.eContents().get(1);
		private final Assignment cRegisterAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_7_0 = (RuleCall)cRegisterAssignment_1_7.eContents().get(0);
		private final Keyword cCommaKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		private final Assignment cBAREL_SHIFT_REGISTERAssignment_1_9 = (Assignment)cGroup_1.eContents().get(9);
		private final RuleCall cBAREL_SHIFT_REGISTERBAREL_SHIFT_REGISTERParserRuleCall_1_9_0 = (RuleCall)cBAREL_SHIFT_REGISTERAssignment_1_9.eContents().get(0);
		private final Assignment cImmediate_labelAssignment_1_10 = (Assignment)cGroup_1.eContents().get(10);
		private final RuleCall cImmediate_labelImmediate_labelParserRuleCall_1_10_0 = (RuleCall)cImmediate_labelAssignment_1_10.eContents().get(0);
		
		//ldr_str_rpost_instr:
		//	(LDR_OP | STR_OP) (register+=REGISTER "," "[" register+=REGISTER "]" "," ("+" | "-")? register+=REGISTER ","
		//	BAREL_SHIFT_REGISTER+=BAREL_SHIFT_REGISTER immediate_label+=immediate_label);
		@Override public ParserRule getRule() { return rule; }

		//(LDR_OP | STR_OP) (register+=REGISTER "," "[" register+=REGISTER "]" "," ("+" | "-")? register+=REGISTER ","
		//BAREL_SHIFT_REGISTER+=BAREL_SHIFT_REGISTER immediate_label+=immediate_label)
		public Group getGroup() { return cGroup; }

		//LDR_OP | STR_OP
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//LDR_OP
		public RuleCall getLDR_OPParserRuleCall_0_0() { return cLDR_OPParserRuleCall_0_0; }

		//STR_OP
		public RuleCall getSTR_OPParserRuleCall_0_1() { return cSTR_OPParserRuleCall_0_1; }

		//register+=REGISTER "," "[" register+=REGISTER "]" "," ("+" | "-")? register+=REGISTER ","
		//BAREL_SHIFT_REGISTER+=BAREL_SHIFT_REGISTER immediate_label+=immediate_label
		public Group getGroup_1() { return cGroup_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_0() { return cRegisterAssignment_1_0; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_0_0() { return cRegisterREGISTERParserRuleCall_1_0_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2() { return cLeftSquareBracketKeyword_1_2; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_3() { return cRegisterAssignment_1_3; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_3_0() { return cRegisterREGISTERParserRuleCall_1_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }

		//","
		public Keyword getCommaKeyword_1_5() { return cCommaKeyword_1_5; }

		//("+" | "-")?
		public Alternatives getAlternatives_1_6() { return cAlternatives_1_6; }

		//"+"
		public Keyword getPlusSignKeyword_1_6_0() { return cPlusSignKeyword_1_6_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_6_1() { return cHyphenMinusKeyword_1_6_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_7() { return cRegisterAssignment_1_7; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_7_0() { return cRegisterREGISTERParserRuleCall_1_7_0; }

		//","
		public Keyword getCommaKeyword_1_8() { return cCommaKeyword_1_8; }

		//BAREL_SHIFT_REGISTER+=BAREL_SHIFT_REGISTER
		public Assignment getBAREL_SHIFT_REGISTERAssignment_1_9() { return cBAREL_SHIFT_REGISTERAssignment_1_9; }

		//BAREL_SHIFT_REGISTER
		public RuleCall getBAREL_SHIFT_REGISTERBAREL_SHIFT_REGISTERParserRuleCall_1_9_0() { return cBAREL_SHIFT_REGISTERBAREL_SHIFT_REGISTERParserRuleCall_1_9_0; }

		//immediate_label+=immediate_label
		public Assignment getImmediate_labelAssignment_1_10() { return cImmediate_labelAssignment_1_10; }

		//immediate_label
		public RuleCall getImmediate_labelImmediate_labelParserRuleCall_1_10_0() { return cImmediate_labelImmediate_labelParserRuleCall_1_10_0; }
	}

	public class Ldm_instrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ldm_instr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cLDM_OPParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cSTM_OPParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRegisterAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_0_0 = (RuleCall)cRegisterAssignment_1_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRegisterAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_4_0 = (RuleCall)cRegisterAssignment_1_4.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cGroup_1.eContents().get(5);
		private final Keyword cHyphenMinusKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Assignment cRegisterAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_5_1_0 = (RuleCall)cRegisterAssignment_1_5_1.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cGroup_1.eContents().get(6);
		private final Keyword cCommaKeyword_1_6_0 = (Keyword)cGroup_1_6.eContents().get(0);
		private final Assignment cRegisterAssignment_1_6_1 = (Assignment)cGroup_1_6.eContents().get(1);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_6_1_0 = (RuleCall)cRegisterAssignment_1_6_1.eContents().get(0);
		private final Group cGroup_1_6_2 = (Group)cGroup_1_6.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_1_6_2_0 = (Keyword)cGroup_1_6_2.eContents().get(0);
		private final Assignment cRegisterAssignment_1_6_2_1 = (Assignment)cGroup_1_6_2.eContents().get(1);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_6_2_1_0 = (RuleCall)cRegisterAssignment_1_6_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Keyword cCircumflexAccentKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		
		//ldm_instr:
		//	(LDM_OP | STM_OP) (register+=REGISTER "!"? "," "{" register+=REGISTER ("-" register+=REGISTER)? (","
		//	register+=REGISTER ("-" register+=REGISTER)?)* "}" "^"?);
		@Override public ParserRule getRule() { return rule; }

		//(LDM_OP | STM_OP) (register+=REGISTER "!"? "," "{" register+=REGISTER ("-" register+=REGISTER)? ("," register+=REGISTER
		//("-" register+=REGISTER)?)* "}" "^"?)
		public Group getGroup() { return cGroup; }

		//LDM_OP | STM_OP
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//LDM_OP
		public RuleCall getLDM_OPParserRuleCall_0_0() { return cLDM_OPParserRuleCall_0_0; }

		//STM_OP
		public RuleCall getSTM_OPParserRuleCall_0_1() { return cSTM_OPParserRuleCall_0_1; }

		//register+=REGISTER "!"? "," "{" register+=REGISTER ("-" register+=REGISTER)? ("," register+=REGISTER ("-"
		//register+=REGISTER)?)* "}" "^"?
		public Group getGroup_1() { return cGroup_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_0() { return cRegisterAssignment_1_0; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_0_0() { return cRegisterREGISTERParserRuleCall_1_0_0; }

		//"!"?
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }

		//","
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_3() { return cLeftCurlyBracketKeyword_1_3; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_4() { return cRegisterAssignment_1_4; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_4_0() { return cRegisterREGISTERParserRuleCall_1_4_0; }

		//("-" register+=REGISTER)?
		public Group getGroup_1_5() { return cGroup_1_5; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_5_0() { return cHyphenMinusKeyword_1_5_0; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_5_1() { return cRegisterAssignment_1_5_1; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_5_1_0() { return cRegisterREGISTERParserRuleCall_1_5_1_0; }

		//("," register+=REGISTER ("-" register+=REGISTER)?)*
		public Group getGroup_1_6() { return cGroup_1_6; }

		//","
		public Keyword getCommaKeyword_1_6_0() { return cCommaKeyword_1_6_0; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_6_1() { return cRegisterAssignment_1_6_1; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_6_1_0() { return cRegisterREGISTERParserRuleCall_1_6_1_0; }

		//("-" register+=REGISTER)?
		public Group getGroup_1_6_2() { return cGroup_1_6_2; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_6_2_0() { return cHyphenMinusKeyword_1_6_2_0; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_6_2_1() { return cRegisterAssignment_1_6_2_1; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_6_2_1_0() { return cRegisterREGISTERParserRuleCall_1_6_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_7() { return cRightCurlyBracketKeyword_1_7; }

		//"^"?
		public Keyword getCircumflexAccentKeyword_1_8() { return cCircumflexAccentKeyword_1_8; }
	}

	public class Push_pop_instrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "push_pop_instr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cPUSH_OPParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cPOP_OPParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRegisterAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cRegisterREGISTERParserRuleCall_2_0_0 = (RuleCall)cRegisterAssignment_2_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Keyword cPlusSignKeyword_2_1_0 = (Keyword)cAlternatives_2_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cAlternatives_2_1.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cRegisterAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cRegisterREGISTERParserRuleCall_2_1_1_1_0 = (RuleCall)cRegisterAssignment_2_1_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRegisterAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRegisterREGISTERParserRuleCall_3_1_0 = (RuleCall)cRegisterAssignment_3_1.eContents().get(0);
		private final Alternatives cAlternatives_3_2 = (Alternatives)cGroup_3.eContents().get(2);
		private final Keyword cPlusSignKeyword_3_2_0 = (Keyword)cAlternatives_3_2.eContents().get(0);
		private final Group cGroup_3_2_1 = (Group)cAlternatives_3_2.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_3_2_1_0 = (Keyword)cGroup_3_2_1.eContents().get(0);
		private final Assignment cRegisterAssignment_3_2_1_1 = (Assignment)cGroup_3_2_1.eContents().get(1);
		private final RuleCall cRegisterREGISTERParserRuleCall_3_2_1_1_0 = (RuleCall)cRegisterAssignment_3_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//push_pop_instr:
		//	(PUSH_OP | POP_OP) "{" (register+=REGISTER ("+" | "-" register+=REGISTER)?) ("," register+=REGISTER ("+" | "-"
		//	register+=REGISTER)?)* "}";
		@Override public ParserRule getRule() { return rule; }

		//(PUSH_OP | POP_OP) "{" (register+=REGISTER ("+" | "-" register+=REGISTER)?) ("," register+=REGISTER ("+" | "-"
		//register+=REGISTER)?)* "}"
		public Group getGroup() { return cGroup; }

		//PUSH_OP | POP_OP
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//PUSH_OP
		public RuleCall getPUSH_OPParserRuleCall_0_0() { return cPUSH_OPParserRuleCall_0_0; }

		//POP_OP
		public RuleCall getPOP_OPParserRuleCall_0_1() { return cPOP_OPParserRuleCall_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//register+=REGISTER ("+" | "-" register+=REGISTER)?
		public Group getGroup_2() { return cGroup_2; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_2_0() { return cRegisterAssignment_2_0; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_2_0_0() { return cRegisterREGISTERParserRuleCall_2_0_0; }

		//("+" | "-" register+=REGISTER)?
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//"+"
		public Keyword getPlusSignKeyword_2_1_0() { return cPlusSignKeyword_2_1_0; }

		//"-" register+=REGISTER
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_2_1_1_0() { return cHyphenMinusKeyword_2_1_1_0; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_2_1_1_1() { return cRegisterAssignment_2_1_1_1; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_2_1_1_1_0() { return cRegisterREGISTERParserRuleCall_2_1_1_1_0; }

		//("," register+=REGISTER ("+" | "-" register+=REGISTER)?)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_3_1() { return cRegisterAssignment_3_1; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_3_1_0() { return cRegisterREGISTERParserRuleCall_3_1_0; }

		//("+" | "-" register+=REGISTER)?
		public Alternatives getAlternatives_3_2() { return cAlternatives_3_2; }

		//"+"
		public Keyword getPlusSignKeyword_3_2_0() { return cPlusSignKeyword_3_2_0; }

		//"-" register+=REGISTER
		public Group getGroup_3_2_1() { return cGroup_3_2_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_3_2_1_0() { return cHyphenMinusKeyword_3_2_1_0; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_3_2_1_1() { return cRegisterAssignment_3_2_1_1; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_3_2_1_1_0() { return cRegisterREGISTERParserRuleCall_3_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class Bkpt_instrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bkpt_instr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cBkptKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cBKPTKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cImmediate_labelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImmediate_labelImmediate_labelParserRuleCall_1_0 = (RuleCall)cImmediate_labelAssignment_1.eContents().get(0);
		
		//bkpt_instr:
		//	("bkpt" | "BKPT") immediate_label+=immediate_label;
		@Override public ParserRule getRule() { return rule; }

		//("bkpt" | "BKPT") immediate_label+=immediate_label
		public Group getGroup() { return cGroup; }

		//"bkpt" | "BKPT"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"bkpt"
		public Keyword getBkptKeyword_0_0() { return cBkptKeyword_0_0; }

		//"BKPT"
		public Keyword getBKPTKeyword_0_1() { return cBKPTKeyword_0_1; }

		//immediate_label+=immediate_label
		public Assignment getImmediate_labelAssignment_1() { return cImmediate_labelAssignment_1; }

		//immediate_label
		public RuleCall getImmediate_labelImmediate_labelParserRuleCall_1_0() { return cImmediate_labelImmediate_labelParserRuleCall_1_0; }
	}

	public class Swp_instrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "swp_instr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cSWP_OPParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cSWPB_OPParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRegisterAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_0_0 = (RuleCall)cRegisterAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRegisterAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_2_0 = (RuleCall)cRegisterAssignment_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cRegisterAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_5_0 = (RuleCall)cRegisterAssignment_1_5.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cGroup_1.eContents().get(6);
		private final Keyword cCommaKeyword_1_6_0 = (Keyword)cGroup_1_6.eContents().get(0);
		private final Assignment cImmediate_labelAssignment_1_6_1 = (Assignment)cGroup_1_6.eContents().get(1);
		private final RuleCall cImmediate_labelImmediate_labelParserRuleCall_1_6_1_0 = (RuleCall)cImmediate_labelAssignment_1_6_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		
		//swp_instr:
		//	(SWP_OP | SWPB_OP) (register+=REGISTER "," register+=REGISTER "," "[" register+=REGISTER (","
		//	immediate_label+=immediate_label)? "]");
		@Override public ParserRule getRule() { return rule; }

		//(SWP_OP | SWPB_OP) (register+=REGISTER "," register+=REGISTER "," "[" register+=REGISTER (","
		//immediate_label+=immediate_label)? "]")
		public Group getGroup() { return cGroup; }

		//SWP_OP | SWPB_OP
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//SWP_OP
		public RuleCall getSWP_OPParserRuleCall_0_0() { return cSWP_OPParserRuleCall_0_0; }

		//SWPB_OP
		public RuleCall getSWPB_OPParserRuleCall_0_1() { return cSWPB_OPParserRuleCall_0_1; }

		//register+=REGISTER "," register+=REGISTER "," "[" register+=REGISTER ("," immediate_label+=immediate_label)? "]"
		public Group getGroup_1() { return cGroup_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_0() { return cRegisterAssignment_1_0; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_0_0() { return cRegisterREGISTERParserRuleCall_1_0_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_2() { return cRegisterAssignment_1_2; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_2_0() { return cRegisterREGISTERParserRuleCall_1_2_0; }

		//","
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_4() { return cLeftSquareBracketKeyword_1_4; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_5() { return cRegisterAssignment_1_5; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_5_0() { return cRegisterREGISTERParserRuleCall_1_5_0; }

		//("," immediate_label+=immediate_label)?
		public Group getGroup_1_6() { return cGroup_1_6; }

		//","
		public Keyword getCommaKeyword_1_6_0() { return cCommaKeyword_1_6_0; }

		//immediate_label+=immediate_label
		public Assignment getImmediate_labelAssignment_1_6_1() { return cImmediate_labelAssignment_1_6_1; }

		//immediate_label
		public RuleCall getImmediate_labelImmediate_labelParserRuleCall_1_6_1_0() { return cImmediate_labelImmediate_labelParserRuleCall_1_6_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_7() { return cRightSquareBracketKeyword_1_7; }
	}

	public class Svc_instrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "svc_instr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSVC_OPParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cImmediate_labelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImmediate_labelImmediate_labelParserRuleCall_1_0 = (RuleCall)cImmediate_labelAssignment_1.eContents().get(0);
		
		//svc_instr:
		//	SVC_OP immediate_label+=immediate_label;
		@Override public ParserRule getRule() { return rule; }

		//SVC_OP immediate_label+=immediate_label
		public Group getGroup() { return cGroup; }

		//SVC_OP
		public RuleCall getSVC_OPParserRuleCall_0() { return cSVC_OPParserRuleCall_0; }

		//immediate_label+=immediate_label
		public Assignment getImmediate_labelAssignment_1() { return cImmediate_labelAssignment_1; }

		//immediate_label
		public RuleCall getImmediate_labelImmediate_labelParserRuleCall_1_0() { return cImmediate_labelImmediate_labelParserRuleCall_1_0; }
	}

	public class ADD_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ADD_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpAddKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpADDKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpADD_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//ADD_OP:
		//	op?=("add" | "ADD" | ADD_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("add" | "ADD" | ADD_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"add" | "ADD" | ADD_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"add"
		public Keyword getOpAddKeyword_0_0() { return cOpAddKeyword_0_0; }

		//"ADD"
		public Keyword getOpADDKeyword_0_1() { return cOpADDKeyword_0_1; }

		//ADD_COM
		public RuleCall getOpADD_COMTerminalRuleCall_0_2() { return cOpADD_COMTerminalRuleCall_0_2; }
	}

	public class ADC_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ADC_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpAdcKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpADCKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpADC_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//ADC_OP:
		//	op?=("adc" | "ADC" | ADC_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("adc" | "ADC" | ADC_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"adc" | "ADC" | ADC_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"adc"
		public Keyword getOpAdcKeyword_0_0() { return cOpAdcKeyword_0_0; }

		//"ADC"
		public Keyword getOpADCKeyword_0_1() { return cOpADCKeyword_0_1; }

		//ADC_COM
		public RuleCall getOpADC_COMTerminalRuleCall_0_2() { return cOpADC_COMTerminalRuleCall_0_2; }
	}

	public class ADR_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ADR_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpAdrKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpADRKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpADR_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//ADR_OP:
		//	op?=("adr" | "ADR" | ADR_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("adr" | "ADR" | ADR_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"adr" | "ADR" | ADR_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"adr"
		public Keyword getOpAdrKeyword_0_0() { return cOpAdrKeyword_0_0; }

		//"ADR"
		public Keyword getOpADRKeyword_0_1() { return cOpADRKeyword_0_1; }

		//ADR_COM
		public RuleCall getOpADR_COMTerminalRuleCall_0_2() { return cOpADR_COMTerminalRuleCall_0_2; }
	}

	public class SUB_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SUB_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpSubKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpSUBKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpSUB_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//SUB_OP:
		//	op?=("sub" | "SUB" | SUB_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("sub" | "SUB" | SUB_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"sub" | "SUB" | SUB_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"sub"
		public Keyword getOpSubKeyword_0_0() { return cOpSubKeyword_0_0; }

		//"SUB"
		public Keyword getOpSUBKeyword_0_1() { return cOpSUBKeyword_0_1; }

		//SUB_COM
		public RuleCall getOpSUB_COMTerminalRuleCall_0_2() { return cOpSUB_COMTerminalRuleCall_0_2; }
	}

	public class SBC_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SBC_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpSbcKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpSBCKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpSBC_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//SBC_OP:
		//	op?=("sbc" | "SBC" | SBC_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("sbc" | "SBC" | SBC_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"sbc" | "SBC" | SBC_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"sbc"
		public Keyword getOpSbcKeyword_0_0() { return cOpSbcKeyword_0_0; }

		//"SBC"
		public Keyword getOpSBCKeyword_0_1() { return cOpSBCKeyword_0_1; }

		//SBC_COM
		public RuleCall getOpSBC_COMTerminalRuleCall_0_2() { return cOpSBC_COMTerminalRuleCall_0_2; }
	}

	public class RSB_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RSB_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpRsbKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpRSBKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpRSB_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//RSB_OP:
		//	op?=("rsb" | "RSB" | RSB_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("rsb" | "RSB" | RSB_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"rsb" | "RSB" | RSB_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"rsb"
		public Keyword getOpRsbKeyword_0_0() { return cOpRsbKeyword_0_0; }

		//"RSB"
		public Keyword getOpRSBKeyword_0_1() { return cOpRSBKeyword_0_1; }

		//RSB_COM
		public RuleCall getOpRSB_COMTerminalRuleCall_0_2() { return cOpRSB_COMTerminalRuleCall_0_2; }
	}

	public class RSC_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RSC_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpRscKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpRSCKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpRSC_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//RSC_OP:
		//	op?=("rsc" | "RSC" | RSC_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("rsc" | "RSC" | RSC_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"rsc" | "RSC" | RSC_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"rsc"
		public Keyword getOpRscKeyword_0_0() { return cOpRscKeyword_0_0; }

		//"RSC"
		public Keyword getOpRSCKeyword_0_1() { return cOpRSCKeyword_0_1; }

		//RSC_COM
		public RuleCall getOpRSC_COMTerminalRuleCall_0_2() { return cOpRSC_COMTerminalRuleCall_0_2; }
	}

	public class ADRL_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ADRL_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpAdrlKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpADRLKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpADRL_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//ADRL_OP:
		//	op?=("adrl" | "ADRL" | ADRL_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("adrl" | "ADRL" | ADRL_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"adrl" | "ADRL" | ADRL_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"adrl"
		public Keyword getOpAdrlKeyword_0_0() { return cOpAdrlKeyword_0_0; }

		//"ADRL"
		public Keyword getOpADRLKeyword_0_1() { return cOpADRLKeyword_0_1; }

		//ADRL_COM
		public RuleCall getOpADRL_COMTerminalRuleCall_0_2() { return cOpADRL_COMTerminalRuleCall_0_2; }
	}

	public class MUL_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MUL_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpMulKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpMULKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpMUL_3R_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//MUL_OP:
		//	op?=("mul" | "MUL" | MUL_3R_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("mul" | "MUL" | MUL_3R_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"mul" | "MUL" | MUL_3R_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"mul"
		public Keyword getOpMulKeyword_0_0() { return cOpMulKeyword_0_0; }

		//"MUL"
		public Keyword getOpMULKeyword_0_1() { return cOpMULKeyword_0_1; }

		//MUL_3R_COM
		public RuleCall getOpMUL_3R_COMTerminalRuleCall_0_2() { return cOpMUL_3R_COMTerminalRuleCall_0_2; }
	}

	public class MLS_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MLS_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpMlsKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpMLSKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpMUL_4R_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//MLS_OP:
		//	op?=("mls" | "MLS" | MUL_4R_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("mls" | "MLS" | MUL_4R_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"mls" | "MLS" | MUL_4R_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"mls"
		public Keyword getOpMlsKeyword_0_0() { return cOpMlsKeyword_0_0; }

		//"MLS"
		public Keyword getOpMLSKeyword_0_1() { return cOpMLSKeyword_0_1; }

		//MUL_4R_COM
		public RuleCall getOpMUL_4R_COMTerminalRuleCall_0_2() { return cOpMUL_4R_COMTerminalRuleCall_0_2; }
	}

	public class MLA_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MLA_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpMlaKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpMLAKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpMLA_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//MLA_OP:
		//	op?=("mla" | "MLA" | MLA_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("mla" | "MLA" | MLA_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"mla" | "MLA" | MLA_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"mla"
		public Keyword getOpMlaKeyword_0_0() { return cOpMlaKeyword_0_0; }

		//"MLA"
		public Keyword getOpMLAKeyword_0_1() { return cOpMLAKeyword_0_1; }

		//MLA_COM
		public RuleCall getOpMLA_COMTerminalRuleCall_0_2() { return cOpMLA_COMTerminalRuleCall_0_2; }
	}

	public class UMULL_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UMULL_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpUmullKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpUMULLKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpUMULL_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//UMULL_OP:
		//	op?=("umull" | "UMULL" | UMULL_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("umull" | "UMULL" | UMULL_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"umull" | "UMULL" | UMULL_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"umull"
		public Keyword getOpUmullKeyword_0_0() { return cOpUmullKeyword_0_0; }

		//"UMULL"
		public Keyword getOpUMULLKeyword_0_1() { return cOpUMULLKeyword_0_1; }

		//UMULL_COM
		public RuleCall getOpUMULL_COMTerminalRuleCall_0_2() { return cOpUMULL_COMTerminalRuleCall_0_2; }
	}

	public class UMLAL_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UMLAL_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpUmlalKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpUMLALKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpUMLAL_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//UMLAL_OP:
		//	op?=("umlal" | "UMLAL" | UMLAL_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("umlal" | "UMLAL" | UMLAL_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"umlal" | "UMLAL" | UMLAL_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"umlal"
		public Keyword getOpUmlalKeyword_0_0() { return cOpUmlalKeyword_0_0; }

		//"UMLAL"
		public Keyword getOpUMLALKeyword_0_1() { return cOpUMLALKeyword_0_1; }

		//UMLAL_COM
		public RuleCall getOpUMLAL_COMTerminalRuleCall_0_2() { return cOpUMLAL_COMTerminalRuleCall_0_2; }
	}

	public class SMULL_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SMULL_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpSmullKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpSMULLKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpSMULL_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//SMULL_OP:
		//	op?=("smull" | "SMULL" | SMULL_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("smull" | "SMULL" | SMULL_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"smull" | "SMULL" | SMULL_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"smull"
		public Keyword getOpSmullKeyword_0_0() { return cOpSmullKeyword_0_0; }

		//"SMULL"
		public Keyword getOpSMULLKeyword_0_1() { return cOpSMULLKeyword_0_1; }

		//SMULL_COM
		public RuleCall getOpSMULL_COMTerminalRuleCall_0_2() { return cOpSMULL_COMTerminalRuleCall_0_2; }
	}

	public class SMLAL_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SMLAL_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpSmlalKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpSMLALKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpSMLAL_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//SMLAL_OP:
		//	op?=("smlal" | "SMLAL" | SMLAL_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("smlal" | "SMLAL" | SMLAL_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"smlal" | "SMLAL" | SMLAL_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"smlal"
		public Keyword getOpSmlalKeyword_0_0() { return cOpSmlalKeyword_0_0; }

		//"SMLAL"
		public Keyword getOpSMLALKeyword_0_1() { return cOpSMLALKeyword_0_1; }

		//SMLAL_COM
		public RuleCall getOpSMLAL_COMTerminalRuleCall_0_2() { return cOpSMLAL_COMTerminalRuleCall_0_2; }
	}

	public class SMUL_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SMUL_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpSmulKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpSMULKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpSMUL_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//SMUL_OP:
		//	op?=("smul" | "SMUL" | SMUL_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("smul" | "SMUL" | SMUL_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"smul" | "SMUL" | SMUL_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"smul"
		public Keyword getOpSmulKeyword_0_0() { return cOpSmulKeyword_0_0; }

		//"SMUL"
		public Keyword getOpSMULKeyword_0_1() { return cOpSMULKeyword_0_1; }

		//SMUL_COM
		public RuleCall getOpSMUL_COMTerminalRuleCall_0_2() { return cOpSMUL_COMTerminalRuleCall_0_2; }
	}

	public class SMULW_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SMULW_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpSmulwKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpSMULWKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpSMULW_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//SMULW_OP:
		//	op?=("smulw" | "SMULW" | SMULW_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("smulw" | "SMULW" | SMULW_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"smulw" | "SMULW" | SMULW_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"smulw"
		public Keyword getOpSmulwKeyword_0_0() { return cOpSmulwKeyword_0_0; }

		//"SMULW"
		public Keyword getOpSMULWKeyword_0_1() { return cOpSMULWKeyword_0_1; }

		//SMULW_COM
		public RuleCall getOpSMULW_COMTerminalRuleCall_0_2() { return cOpSMULW_COMTerminalRuleCall_0_2; }
	}

	public class SMLA_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SMLA_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpSmlaKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpSMLAKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpSMLA_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//SMLA_OP:
		//	op?=("smla" | "SMLA" | SMLA_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("smla" | "SMLA" | SMLA_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"smla" | "SMLA" | SMLA_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"smla"
		public Keyword getOpSmlaKeyword_0_0() { return cOpSmlaKeyword_0_0; }

		//"SMLA"
		public Keyword getOpSMLAKeyword_0_1() { return cOpSMLAKeyword_0_1; }

		//SMLA_COM
		public RuleCall getOpSMLA_COMTerminalRuleCall_0_2() { return cOpSMLA_COMTerminalRuleCall_0_2; }
	}

	public class SMLAW_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SMLAW_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpSmlawKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpSMLAWKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpSMLAW_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//SMLAW_OP:
		//	op?=("smlaw" | "SMLAW" | SMLAW_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("smlaw" | "SMLAW" | SMLAW_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"smlaw" | "SMLAW" | SMLAW_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"smlaw"
		public Keyword getOpSmlawKeyword_0_0() { return cOpSmlawKeyword_0_0; }

		//"SMLAW"
		public Keyword getOpSMLAWKeyword_0_1() { return cOpSMLAWKeyword_0_1; }

		//SMLAW_COM
		public RuleCall getOpSMLAW_COMTerminalRuleCall_0_2() { return cOpSMLAW_COMTerminalRuleCall_0_2; }
	}

	public class MOV_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MOV_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpMovKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpMOVKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpMOV_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//MOV_OP:
		//	op?=("mov" | "MOV" | MOV_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("mov" | "MOV" | MOV_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"mov" | "MOV" | MOV_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"mov"
		public Keyword getOpMovKeyword_0_0() { return cOpMovKeyword_0_0; }

		//"MOV"
		public Keyword getOpMOVKeyword_0_1() { return cOpMOVKeyword_0_1; }

		//MOV_COM
		public RuleCall getOpMOV_COMTerminalRuleCall_0_2() { return cOpMOV_COMTerminalRuleCall_0_2; }
	}

	public class MVN_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MVN_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpMvnKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpMVNKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpMVN_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//MVN_OP:
		//	op?=("mvn" | "MVN" | MVN_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("mvn" | "MVN" | MVN_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"mvn" | "MVN" | MVN_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"mvn"
		public Keyword getOpMvnKeyword_0_0() { return cOpMvnKeyword_0_0; }

		//"MVN"
		public Keyword getOpMVNKeyword_0_1() { return cOpMVNKeyword_0_1; }

		//MVN_COM
		public RuleCall getOpMVN_COMTerminalRuleCall_0_2() { return cOpMVN_COMTerminalRuleCall_0_2; }
	}

	public class ASR_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASR_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpAsrKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpASRKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpASR_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//ASR_OP:
		//	op?=("asr" | "ASR" | ASR_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("asr" | "ASR" | ASR_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"asr" | "ASR" | ASR_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"asr"
		public Keyword getOpAsrKeyword_0_0() { return cOpAsrKeyword_0_0; }

		//"ASR"
		public Keyword getOpASRKeyword_0_1() { return cOpASRKeyword_0_1; }

		//ASR_COM
		public RuleCall getOpASR_COMTerminalRuleCall_0_2() { return cOpASR_COMTerminalRuleCall_0_2; }
	}

	public class LSL_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LSL_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpLslKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpLSLKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpLSL_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//LSL_OP:
		//	op?=("lsl" | "LSL" | LSL_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("lsl" | "LSL" | LSL_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"lsl" | "LSL" | LSL_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"lsl"
		public Keyword getOpLslKeyword_0_0() { return cOpLslKeyword_0_0; }

		//"LSL"
		public Keyword getOpLSLKeyword_0_1() { return cOpLSLKeyword_0_1; }

		//LSL_COM
		public RuleCall getOpLSL_COMTerminalRuleCall_0_2() { return cOpLSL_COMTerminalRuleCall_0_2; }
	}

	public class LSR_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LSR_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpLsrKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpLSRKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpLSR_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//LSR_OP:
		//	op?=("lsr" | "LSR" | LSR_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("lsr" | "LSR" | LSR_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"lsr" | "LSR" | LSR_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"lsr"
		public Keyword getOpLsrKeyword_0_0() { return cOpLsrKeyword_0_0; }

		//"LSR"
		public Keyword getOpLSRKeyword_0_1() { return cOpLSRKeyword_0_1; }

		//LSR_COM
		public RuleCall getOpLSR_COMTerminalRuleCall_0_2() { return cOpLSR_COMTerminalRuleCall_0_2; }
	}

	public class ROR_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ROR_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpRorKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpRORKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpROR_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//ROR_OP:
		//	op?=("ror" | "ROR" | ROR_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("ror" | "ROR" | ROR_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"ror" | "ROR" | ROR_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"ror"
		public Keyword getOpRorKeyword_0_0() { return cOpRorKeyword_0_0; }

		//"ROR"
		public Keyword getOpRORKeyword_0_1() { return cOpRORKeyword_0_1; }

		//ROR_COM
		public RuleCall getOpROR_COMTerminalRuleCall_0_2() { return cOpROR_COMTerminalRuleCall_0_2; }
	}

	public class RRX_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RRX_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpRrxKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpRRXKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpRRX_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//RRX_OP:
		//	op?=("rrx" | "RRX" | RRX_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("rrx" | "RRX" | RRX_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"rrx" | "RRX" | RRX_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"rrx"
		public Keyword getOpRrxKeyword_0_0() { return cOpRrxKeyword_0_0; }

		//"RRX"
		public Keyword getOpRRXKeyword_0_1() { return cOpRRXKeyword_0_1; }

		//RRX_COM
		public RuleCall getOpRRX_COMTerminalRuleCall_0_2() { return cOpRRX_COMTerminalRuleCall_0_2; }
	}

	public class CLZ_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CLZ_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpClzKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpCLZKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpCLZ_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//CLZ_OP:
		//	op?=("clz" | "CLZ" | CLZ_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("clz" | "CLZ" | CLZ_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"clz" | "CLZ" | CLZ_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"clz"
		public Keyword getOpClzKeyword_0_0() { return cOpClzKeyword_0_0; }

		//"CLZ"
		public Keyword getOpCLZKeyword_0_1() { return cOpCLZKeyword_0_1; }

		//CLZ_COM
		public RuleCall getOpCLZ_COMTerminalRuleCall_0_2() { return cOpCLZ_COMTerminalRuleCall_0_2; }
	}

	public class CMP_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CMP_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpCmpKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpCMPKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpCMP_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//CMP_OP:
		//	op?=("cmp" | "CMP" | CMP_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("cmp" | "CMP" | CMP_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"cmp" | "CMP" | CMP_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"cmp"
		public Keyword getOpCmpKeyword_0_0() { return cOpCmpKeyword_0_0; }

		//"CMP"
		public Keyword getOpCMPKeyword_0_1() { return cOpCMPKeyword_0_1; }

		//CMP_COM
		public RuleCall getOpCMP_COMTerminalRuleCall_0_2() { return cOpCMP_COMTerminalRuleCall_0_2; }
	}

	public class CMN_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CMN_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpCmnKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpCMNKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpCMN_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//CMN_OP:
		//	op?=("cmn" | "CMN" | CMN_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("cmn" | "CMN" | CMN_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"cmn" | "CMN" | CMN_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"cmn"
		public Keyword getOpCmnKeyword_0_0() { return cOpCmnKeyword_0_0; }

		//"CMN"
		public Keyword getOpCMNKeyword_0_1() { return cOpCMNKeyword_0_1; }

		//CMN_COM
		public RuleCall getOpCMN_COMTerminalRuleCall_0_2() { return cOpCMN_COMTerminalRuleCall_0_2; }
	}

	public class TST_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TST_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpTstKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpTSTKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpTST_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//TST_OP:
		//	op?=("tst" | "TST" | TST_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("tst" | "TST" | TST_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"tst" | "TST" | TST_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"tst"
		public Keyword getOpTstKeyword_0_0() { return cOpTstKeyword_0_0; }

		//"TST"
		public Keyword getOpTSTKeyword_0_1() { return cOpTSTKeyword_0_1; }

		//TST_COM
		public RuleCall getOpTST_COMTerminalRuleCall_0_2() { return cOpTST_COMTerminalRuleCall_0_2; }
	}

	public class TEQ_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TEQ_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpTeqKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpTEQKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpTEQ_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//TEQ_OP:
		//	op?=("teq" | "TEQ" | TEQ_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("teq" | "TEQ" | TEQ_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"teq" | "TEQ" | TEQ_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"teq"
		public Keyword getOpTeqKeyword_0_0() { return cOpTeqKeyword_0_0; }

		//"TEQ"
		public Keyword getOpTEQKeyword_0_1() { return cOpTEQKeyword_0_1; }

		//TEQ_COM
		public RuleCall getOpTEQ_COMTerminalRuleCall_0_2() { return cOpTEQ_COMTerminalRuleCall_0_2; }
	}

	public class AND_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AND_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpAndKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpANDKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpAND_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//AND_OP:
		//	op?=("and" | "AND" | AND_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("and" | "AND" | AND_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"and" | "AND" | AND_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"and"
		public Keyword getOpAndKeyword_0_0() { return cOpAndKeyword_0_0; }

		//"AND"
		public Keyword getOpANDKeyword_0_1() { return cOpANDKeyword_0_1; }

		//AND_COM
		public RuleCall getOpAND_COMTerminalRuleCall_0_2() { return cOpAND_COMTerminalRuleCall_0_2; }
	}

	public class EOR_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EOR_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpEorKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpEORKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpEOR_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//EOR_OP:
		//	op?=("eor" | "EOR" | EOR_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("eor" | "EOR" | EOR_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"eor" | "EOR" | EOR_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"eor"
		public Keyword getOpEorKeyword_0_0() { return cOpEorKeyword_0_0; }

		//"EOR"
		public Keyword getOpEORKeyword_0_1() { return cOpEORKeyword_0_1; }

		//EOR_COM
		public RuleCall getOpEOR_COMTerminalRuleCall_0_2() { return cOpEOR_COMTerminalRuleCall_0_2; }
	}

	public class ORR_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ORR_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpOrrKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpORRKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpORR_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//ORR_OP:
		//	op?=("orr" | "ORR" | ORR_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("orr" | "ORR" | ORR_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"orr" | "ORR" | ORR_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"orr"
		public Keyword getOpOrrKeyword_0_0() { return cOpOrrKeyword_0_0; }

		//"ORR"
		public Keyword getOpORRKeyword_0_1() { return cOpORRKeyword_0_1; }

		//ORR_COM
		public RuleCall getOpORR_COMTerminalRuleCall_0_2() { return cOpORR_COMTerminalRuleCall_0_2; }
	}

	public class ORN_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ORN_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpOrnKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpORNKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpORN_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//ORN_OP:
		//	op?=("orn" | "ORN" | ORN_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("orn" | "ORN" | ORN_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"orn" | "ORN" | ORN_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"orn"
		public Keyword getOpOrnKeyword_0_0() { return cOpOrnKeyword_0_0; }

		//"ORN"
		public Keyword getOpORNKeyword_0_1() { return cOpORNKeyword_0_1; }

		//ORN_COM
		public RuleCall getOpORN_COMTerminalRuleCall_0_2() { return cOpORN_COMTerminalRuleCall_0_2; }
	}

	public class BIC_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BIC_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpBicKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpBICKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpBIC_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//BIC_OP:
		//	op?=("bic" | "BIC" | BIC_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("bic" | "BIC" | BIC_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"bic" | "BIC" | BIC_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"bic"
		public Keyword getOpBicKeyword_0_0() { return cOpBicKeyword_0_0; }

		//"BIC"
		public Keyword getOpBICKeyword_0_1() { return cOpBICKeyword_0_1; }

		//BIC_COM
		public RuleCall getOpBIC_COMTerminalRuleCall_0_2() { return cOpBIC_COMTerminalRuleCall_0_2; }
	}

	public class B_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "B_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpBKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpBKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpB_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//B_OP:
		//	op?=("b" | "B" | B_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("b" | "B" | B_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"b" | "B" | B_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"b"
		public Keyword getOpBKeyword_0_0() { return cOpBKeyword_0_0; }

		//"B"
		public Keyword getOpBKeyword_0_1() { return cOpBKeyword_0_1; }

		//B_COM
		public RuleCall getOpB_COMTerminalRuleCall_0_2() { return cOpB_COMTerminalRuleCall_0_2; }
	}

	public class BL_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BL_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpBlKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpBLKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpBL_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//BL_OP:
		//	op?=("bl" | "BL" | BL_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("bl" | "BL" | BL_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"bl" | "BL" | BL_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"bl"
		public Keyword getOpBlKeyword_0_0() { return cOpBlKeyword_0_0; }

		//"BL"
		public Keyword getOpBLKeyword_0_1() { return cOpBLKeyword_0_1; }

		//BL_COM
		public RuleCall getOpBL_COMTerminalRuleCall_0_2() { return cOpBL_COMTerminalRuleCall_0_2; }
	}

	public class BX_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BX_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpBxKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpBXKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpBX_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//BX_OP:
		//	op?=("bx" | "BX" | BX_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("bx" | "BX" | BX_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"bx" | "BX" | BX_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"bx"
		public Keyword getOpBxKeyword_0_0() { return cOpBxKeyword_0_0; }

		//"BX"
		public Keyword getOpBXKeyword_0_1() { return cOpBXKeyword_0_1; }

		//BX_COM
		public RuleCall getOpBX_COMTerminalRuleCall_0_2() { return cOpBX_COMTerminalRuleCall_0_2; }
	}

	public class BLX_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BLX_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpBlxKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpBLXKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpBLX_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//BLX_OP:
		//	op?=("blx" | "BLX" | BLX_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("blx" | "BLX" | BLX_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"blx" | "BLX" | BLX_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"blx"
		public Keyword getOpBlxKeyword_0_0() { return cOpBlxKeyword_0_0; }

		//"BLX"
		public Keyword getOpBLXKeyword_0_1() { return cOpBLXKeyword_0_1; }

		//BLX_COM
		public RuleCall getOpBLX_COMTerminalRuleCall_0_2() { return cOpBLX_COMTerminalRuleCall_0_2; }
	}

	public class BXJ_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BXJ_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpBxjKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpBXJKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpBXJ_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//BXJ_OP:
		//	op?=("bxj" | "BXJ" | BXJ_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("bxj" | "BXJ" | BXJ_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"bxj" | "BXJ" | BXJ_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"bxj"
		public Keyword getOpBxjKeyword_0_0() { return cOpBxjKeyword_0_0; }

		//"BXJ"
		public Keyword getOpBXJKeyword_0_1() { return cOpBXJKeyword_0_1; }

		//BXJ_COM
		public RuleCall getOpBXJ_COMTerminalRuleCall_0_2() { return cOpBXJ_COMTerminalRuleCall_0_2; }
	}

	public class MRS_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MRS_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpMrsKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpMRSKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpMRS_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//MRS_OP:
		//	op?=("mrs" | "MRS" | MRS_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("mrs" | "MRS" | MRS_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"mrs" | "MRS" | MRS_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"mrs"
		public Keyword getOpMrsKeyword_0_0() { return cOpMrsKeyword_0_0; }

		//"MRS"
		public Keyword getOpMRSKeyword_0_1() { return cOpMRSKeyword_0_1; }

		//MRS_COM
		public RuleCall getOpMRS_COMTerminalRuleCall_0_2() { return cOpMRS_COMTerminalRuleCall_0_2; }
	}

	public class MSR_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MSR_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpMsrKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpMSRKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpMSR_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//MSR_OP:
		//	op?=("msr" | "MSR" | MSR_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("msr" | "MSR" | MSR_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"msr" | "MSR" | MSR_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"msr"
		public Keyword getOpMsrKeyword_0_0() { return cOpMsrKeyword_0_0; }

		//"MSR"
		public Keyword getOpMSRKeyword_0_1() { return cOpMSRKeyword_0_1; }

		//MSR_COM
		public RuleCall getOpMSR_COMTerminalRuleCall_0_2() { return cOpMSR_COMTerminalRuleCall_0_2; }
	}

	public class LDR_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LDR_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpLdrKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpLDRKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpLDR_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//LDR_OP:
		//	op?=("ldr" | "LDR" | LDR_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("ldr" | "LDR" | LDR_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"ldr" | "LDR" | LDR_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"ldr"
		public Keyword getOpLdrKeyword_0_0() { return cOpLdrKeyword_0_0; }

		//"LDR"
		public Keyword getOpLDRKeyword_0_1() { return cOpLDRKeyword_0_1; }

		//LDR_COM
		public RuleCall getOpLDR_COMTerminalRuleCall_0_2() { return cOpLDR_COMTerminalRuleCall_0_2; }
	}

	public class STR_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "STR_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpStrKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpSTRKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpSTR_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//STR_OP:
		//	op?=("str" | "STR" | STR_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("str" | "STR" | STR_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"str" | "STR" | STR_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"str"
		public Keyword getOpStrKeyword_0_0() { return cOpStrKeyword_0_0; }

		//"STR"
		public Keyword getOpSTRKeyword_0_1() { return cOpSTRKeyword_0_1; }

		//STR_COM
		public RuleCall getOpSTR_COMTerminalRuleCall_0_2() { return cOpSTR_COMTerminalRuleCall_0_2; }
	}

	public class LDM_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LDM_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpLdmKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpLDMKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpLDM_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//LDM_OP:
		//	op?=("ldm" | "LDM" | LDM_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("ldm" | "LDM" | LDM_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"ldm" | "LDM" | LDM_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"ldm"
		public Keyword getOpLdmKeyword_0_0() { return cOpLdmKeyword_0_0; }

		//"LDM"
		public Keyword getOpLDMKeyword_0_1() { return cOpLDMKeyword_0_1; }

		//LDM_COM
		public RuleCall getOpLDM_COMTerminalRuleCall_0_2() { return cOpLDM_COMTerminalRuleCall_0_2; }
	}

	public class STM_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "STM_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpStmKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpSTMKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpSTM_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//STM_OP:
		//	op?=("stm" | "STM" | STM_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("stm" | "STM" | STM_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"stm" | "STM" | STM_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"stm"
		public Keyword getOpStmKeyword_0_0() { return cOpStmKeyword_0_0; }

		//"STM"
		public Keyword getOpSTMKeyword_0_1() { return cOpSTMKeyword_0_1; }

		//STM_COM
		public RuleCall getOpSTM_COMTerminalRuleCall_0_2() { return cOpSTM_COMTerminalRuleCall_0_2; }
	}

	public class PUSH_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PUSH_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpPushKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpPUSHKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpPUSH_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//PUSH_OP:
		//	op?=("push" | "PUSH" | PUSH_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("push" | "PUSH" | PUSH_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"push" | "PUSH" | PUSH_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"push"
		public Keyword getOpPushKeyword_0_0() { return cOpPushKeyword_0_0; }

		//"PUSH"
		public Keyword getOpPUSHKeyword_0_1() { return cOpPUSHKeyword_0_1; }

		//PUSH_COM
		public RuleCall getOpPUSH_COMTerminalRuleCall_0_2() { return cOpPUSH_COMTerminalRuleCall_0_2; }
	}

	public class POP_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "POP_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpPopKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpPOPKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpPOP_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//POP_OP:
		//	op?=("pop" | "POP" | POP_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("pop" | "POP" | POP_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"pop" | "POP" | POP_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"pop"
		public Keyword getOpPopKeyword_0_0() { return cOpPopKeyword_0_0; }

		//"POP"
		public Keyword getOpPOPKeyword_0_1() { return cOpPOPKeyword_0_1; }

		//POP_COM
		public RuleCall getOpPOP_COMTerminalRuleCall_0_2() { return cOpPOP_COMTerminalRuleCall_0_2; }
	}

	public class SWP_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SWP_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpSwpKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpSWPKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpSWP_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//SWP_OP:
		//	op?=("swp" | "SWP" | SWP_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("swp" | "SWP" | SWP_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"swp" | "SWP" | SWP_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"swp"
		public Keyword getOpSwpKeyword_0_0() { return cOpSwpKeyword_0_0; }

		//"SWP"
		public Keyword getOpSWPKeyword_0_1() { return cOpSWPKeyword_0_1; }

		//SWP_COM
		public RuleCall getOpSWP_COMTerminalRuleCall_0_2() { return cOpSWP_COMTerminalRuleCall_0_2; }
	}

	public class SWPB_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SWPB_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpSwpbKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpSWPBKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpSWPB_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//SWPB_OP:
		//	op?=("swpb" | "SWPB" | SWPB_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("swpb" | "SWPB" | SWPB_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"swpb" | "SWPB" | SWPB_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"swpb"
		public Keyword getOpSwpbKeyword_0_0() { return cOpSwpbKeyword_0_0; }

		//"SWPB"
		public Keyword getOpSWPBKeyword_0_1() { return cOpSWPBKeyword_0_1; }

		//SWPB_COM
		public RuleCall getOpSWPB_COMTerminalRuleCall_0_2() { return cOpSWPB_COMTerminalRuleCall_0_2; }
	}

	public class SVC_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SVC_OP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpSvcKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpSVCKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpSVC_COMTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		
		//SVC_OP:
		//	op?=("svc" | "SVC" | SVC_COM);
		@Override public ParserRule getRule() { return rule; }

		//op?=("svc" | "SVC" | SVC_COM)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"svc" | "SVC" | SVC_COM
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"svc"
		public Keyword getOpSvcKeyword_0_0() { return cOpSvcKeyword_0_0; }

		//"SVC"
		public Keyword getOpSVCKeyword_0_1() { return cOpSVCKeyword_0_1; }

		//SVC_COM
		public RuleCall getOpSVC_COMTerminalRuleCall_0_2() { return cOpSVC_COMTerminalRuleCall_0_2; }
	}

	public class PSR_FIELD_EElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PSR_FIELD_E");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOpPSR_FIELDTerminalRuleCall_0 = (RuleCall)cOpAssignment.eContents().get(0);
		
		//PSR_FIELD_E:
		//	op+=PSR_FIELD;
		@Override public ParserRule getRule() { return rule; }

		//op+=PSR_FIELD
		public Assignment getOpAssignment() { return cOpAssignment; }

		//PSR_FIELD
		public RuleCall getOpPSR_FIELDTerminalRuleCall_0() { return cOpPSR_FIELDTerminalRuleCall_0; }
	}

	public class APSR_FLAG_EElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "APSR_FLAG_E");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOpAPSR_FLAGTerminalRuleCall_0 = (RuleCall)cOpAssignment.eContents().get(0);
		
		//APSR_FLAG_E:
		//	op+=APSR_FLAG;
		@Override public ParserRule getRule() { return rule; }

		//op+=APSR_FLAG
		public Assignment getOpAssignment() { return cOpAssignment; }

		//APSR_FLAG
		public RuleCall getOpAPSR_FLAGTerminalRuleCall_0() { return cOpAPSR_FLAGTerminalRuleCall_0; }
	}

	public class NOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NOP");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpNopKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpNOPKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		
		//NOP:
		//	op?=("nop" | "NOP");
		@Override public ParserRule getRule() { return rule; }

		//op?=("nop" | "NOP")
		public Assignment getOpAssignment() { return cOpAssignment; }

		//"nop" | "NOP"
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//"nop"
		public Keyword getOpNopKeyword_0_0() { return cOpNopKeyword_0_0; }

		//"NOP"
		public Keyword getOpNOPKeyword_0_1() { return cOpNOPKeyword_0_1; }
	}

	public class PREPROCESSORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PREPROCESSOR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHashAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cHashNumberSignKeyword_0_0 = (Keyword)cHashAssignment_0.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCodeAlternatives_1_0 = (Alternatives)cCodeAssignment_1.eContents().get(0);
		private final Keyword cCodeIfKeyword_1_0_0 = (Keyword)cCodeAlternatives_1_0.eContents().get(0);
		private final Keyword cCodeElifKeyword_1_0_1 = (Keyword)cCodeAlternatives_1_0.eContents().get(1);
		private final Keyword cCodeErrorKeyword_1_0_2 = (Keyword)cCodeAlternatives_1_0.eContents().get(2);
		private final Keyword cCodePragmaKeyword_1_0_3 = (Keyword)cCodeAlternatives_1_0.eContents().get(3);
		private final Keyword cCodeUndefKeyword_1_0_4 = (Keyword)cCodeAlternatives_1_0.eContents().get(4);
		private final Keyword cCodeIncludeKeyword_1_0_5 = (Keyword)cCodeAlternatives_1_0.eContents().get(5);
		private final Keyword cCodeIfdefKeyword_1_0_6 = (Keyword)cCodeAlternatives_1_0.eContents().get(6);
		private final Keyword cCodeIfndefKeyword_1_0_7 = (Keyword)cCodeAlternatives_1_0.eContents().get(7);
		private final Keyword cCodeLineKeyword_1_0_8 = (Keyword)cCodeAlternatives_1_0.eContents().get(8);
		
		//PREPROCESSOR:
		//	hash?="#" code?=("if" | "elif" | "error" | "pragma" | "undef" | "include" | "ifdef" | "ifndef" | "line");
		@Override public ParserRule getRule() { return rule; }

		//hash?="#" code?=("if" | "elif" | "error" | "pragma" | "undef" | "include" | "ifdef" | "ifndef" | "line")
		public Group getGroup() { return cGroup; }

		//hash?="#"
		public Assignment getHashAssignment_0() { return cHashAssignment_0; }

		//"#"
		public Keyword getHashNumberSignKeyword_0_0() { return cHashNumberSignKeyword_0_0; }

		//code?=("if" | "elif" | "error" | "pragma" | "undef" | "include" | "ifdef" | "ifndef" | "line")
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }

		//"if" | "elif" | "error" | "pragma" | "undef" | "include" | "ifdef" | "ifndef" | "line"
		public Alternatives getCodeAlternatives_1_0() { return cCodeAlternatives_1_0; }

		//"if"
		public Keyword getCodeIfKeyword_1_0_0() { return cCodeIfKeyword_1_0_0; }

		//"elif"
		public Keyword getCodeElifKeyword_1_0_1() { return cCodeElifKeyword_1_0_1; }

		//"error"
		public Keyword getCodeErrorKeyword_1_0_2() { return cCodeErrorKeyword_1_0_2; }

		//"pragma"
		public Keyword getCodePragmaKeyword_1_0_3() { return cCodePragmaKeyword_1_0_3; }

		//"undef"
		public Keyword getCodeUndefKeyword_1_0_4() { return cCodeUndefKeyword_1_0_4; }

		//"include"
		public Keyword getCodeIncludeKeyword_1_0_5() { return cCodeIncludeKeyword_1_0_5; }

		//"ifdef"
		public Keyword getCodeIfdefKeyword_1_0_6() { return cCodeIfdefKeyword_1_0_6; }

		//"ifndef"
		public Keyword getCodeIfndefKeyword_1_0_7() { return cCodeIfndefKeyword_1_0_7; }

		//"line"
		public Keyword getCodeLineKeyword_1_0_8() { return cCodeLineKeyword_1_0_8; }
	}

	public class PREPROCESSOR_DEFINEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PREPROCESSOR_DEFINE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHashAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cHashNumberSignKeyword_0_0 = (Keyword)cHashAssignment_0.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCodeDefineKeyword_1_0 = (Keyword)cCodeAssignment_1.eContents().get(0);
		
		//PREPROCESSOR_DEFINE:
		//	hash?="#" code?="define";
		@Override public ParserRule getRule() { return rule; }

		//hash?="#" code?="define"
		public Group getGroup() { return cGroup; }

		//hash?="#"
		public Assignment getHashAssignment_0() { return cHashAssignment_0; }

		//"#"
		public Keyword getHashNumberSignKeyword_0_0() { return cHashNumberSignKeyword_0_0; }

		//code?="define"
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }

		//"define"
		public Keyword getCodeDefineKeyword_1_0() { return cCodeDefineKeyword_1_0; }
	}

	public class PREPROCESSOR_ENDIFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PREPROCESSOR_ENDIF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHashAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cHashNumberSignKeyword_0_0 = (Keyword)cHashAssignment_0.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCodeEndifKeyword_1_0 = (Keyword)cCodeAssignment_1.eContents().get(0);
		
		//PREPROCESSOR_ENDIF:
		//	hash?="#" code?="endif";
		@Override public ParserRule getRule() { return rule; }

		//hash?="#" code?="endif"
		public Group getGroup() { return cGroup; }

		//hash?="#"
		public Assignment getHashAssignment_0() { return cHashAssignment_0; }

		//"#"
		public Keyword getHashNumberSignKeyword_0_0() { return cHashNumberSignKeyword_0_0; }

		//code?="endif"
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }

		//"endif"
		public Keyword getCodeEndifKeyword_1_0() { return cCodeEndifKeyword_1_0; }
	}

	public class PREPROCESSOR_ELSEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PREPROCESSOR_ELSE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHashAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cHashNumberSignKeyword_0_0 = (Keyword)cHashAssignment_0.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCodeElseKeyword_1_0 = (Keyword)cCodeAssignment_1.eContents().get(0);
		
		//PREPROCESSOR_ELSE:
		//	hash?="#" code?="else";
		@Override public ParserRule getRule() { return rule; }

		//hash?="#" code?="else"
		public Group getGroup() { return cGroup; }

		//hash?="#"
		public Assignment getHashAssignment_0() { return cHashAssignment_0; }

		//"#"
		public Keyword getHashNumberSignKeyword_0_0() { return cHashNumberSignKeyword_0_0; }

		//code?="else"
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }

		//"else"
		public Keyword getCodeElseKeyword_1_0() { return cCodeElseKeyword_1_0; }
	}

	public class CExtendCodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CExtendCode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDotFullStopKeyword_0_0 = (Keyword)cDotAssignment_0.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCodeAlternatives_1_0 = (Alternatives)cCodeAssignment_1.eContents().get(0);
		private final Keyword cCodeExternKeyword_1_0_0 = (Keyword)cCodeAlternatives_1_0.eContents().get(0);
		private final Keyword cCodeDataKeyword_1_0_1 = (Keyword)cCodeAlternatives_1_0.eContents().get(1);
		private final Keyword cCodeTextKeyword_1_0_2 = (Keyword)cCodeAlternatives_1_0.eContents().get(2);
		private final Keyword cCodeGlobalKeyword_1_0_3 = (Keyword)cCodeAlternatives_1_0.eContents().get(3);
		private final Keyword cCodeEndKeyword_1_0_4 = (Keyword)cCodeAlternatives_1_0.eContents().get(4);
		
		//CExtendCode:
		//	dot?="." code?=("extern" | "data" | "text" | "global" | "end");
		@Override public ParserRule getRule() { return rule; }

		//dot?="." code?=("extern" | "data" | "text" | "global" | "end")
		public Group getGroup() { return cGroup; }

		//dot?="."
		public Assignment getDotAssignment_0() { return cDotAssignment_0; }

		//"."
		public Keyword getDotFullStopKeyword_0_0() { return cDotFullStopKeyword_0_0; }

		//code?=("extern" | "data" | "text" | "global" | "end")
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }

		//"extern" | "data" | "text" | "global" | "end"
		public Alternatives getCodeAlternatives_1_0() { return cCodeAlternatives_1_0; }

		//"extern"
		public Keyword getCodeExternKeyword_1_0_0() { return cCodeExternKeyword_1_0_0; }

		//"data"
		public Keyword getCodeDataKeyword_1_0_1() { return cCodeDataKeyword_1_0_1; }

		//"text"
		public Keyword getCodeTextKeyword_1_0_2() { return cCodeTextKeyword_1_0_2; }

		//"global"
		public Keyword getCodeGlobalKeyword_1_0_3() { return cCodeGlobalKeyword_1_0_3; }

		//"end"
		public Keyword getCodeEndKeyword_1_0_4() { return cCodeEndKeyword_1_0_4; }
	}

	public class Assembler_Directives_equElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assembler_Directives_equ");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDotFullStopKeyword_0_0 = (Keyword)cDotAssignment_0.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCodeEquKeyword_1_0 = (Keyword)cCodeAssignment_1.eContents().get(0);
		
		//Assembler_Directives_equ:
		//	dot?="." code?="equ";
		@Override public ParserRule getRule() { return rule; }

		//dot?="." code?="equ"
		public Group getGroup() { return cGroup; }

		//dot?="."
		public Assignment getDotAssignment_0() { return cDotAssignment_0; }

		//"."
		public Keyword getDotFullStopKeyword_0_0() { return cDotFullStopKeyword_0_0; }

		//code?="equ"
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }

		//"equ"
		public Keyword getCodeEquKeyword_1_0() { return cCodeEquKeyword_1_0; }
	}

	public class Assembler_DirectivesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assembler_Directives");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDotFullStopKeyword_0_0 = (Keyword)cDotAssignment_0.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCodeAlternatives_1_0 = (Alternatives)cCodeAssignment_1.eContents().get(0);
		private final Keyword cCodeLongKeyword_1_0_0 = (Keyword)cCodeAlternatives_1_0.eContents().get(0);
		private final Keyword cCodeWordKeyword_1_0_1 = (Keyword)cCodeAlternatives_1_0.eContents().get(1);
		private final Keyword cCodeAsciiKeyword_1_0_2 = (Keyword)cCodeAlternatives_1_0.eContents().get(2);
		
		//Assembler_Directives:
		//	dot?="." code?=("long" | "word" | "ascii");
		@Override public ParserRule getRule() { return rule; }

		//dot?="." code?=("long" | "word" | "ascii")
		public Group getGroup() { return cGroup; }

		//dot?="."
		public Assignment getDotAssignment_0() { return cDotAssignment_0; }

		//"."
		public Keyword getDotFullStopKeyword_0_0() { return cDotFullStopKeyword_0_0; }

		//code?=("long" | "word" | "ascii")
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }

		//"long" | "word" | "ascii"
		public Alternatives getCodeAlternatives_1_0() { return cCodeAlternatives_1_0; }

		//"long"
		public Keyword getCodeLongKeyword_1_0_0() { return cCodeLongKeyword_1_0_0; }

		//"word"
		public Keyword getCodeWordKeyword_1_0_1() { return cCodeWordKeyword_1_0_1; }

		//"ascii"
		public Keyword getCodeAsciiKeyword_1_0_2() { return cCodeAsciiKeyword_1_0_2; }
	}

	public class Assembler_Directives_macroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assembler_Directives_macro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDotFullStopKeyword_0_0 = (Keyword)cDotAssignment_0.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCodeMacroKeyword_1_0 = (Keyword)cCodeAssignment_1.eContents().get(0);
		
		//Assembler_Directives_macro:
		//	dot?="." code?="macro";
		@Override public ParserRule getRule() { return rule; }

		//dot?="." code?="macro"
		public Group getGroup() { return cGroup; }

		//dot?="."
		public Assignment getDotAssignment_0() { return cDotAssignment_0; }

		//"."
		public Keyword getDotFullStopKeyword_0_0() { return cDotFullStopKeyword_0_0; }

		//code?="macro"
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }

		//"macro"
		public Keyword getCodeMacroKeyword_1_0() { return cCodeMacroKeyword_1_0; }
	}

	public class Assember_Directives_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assember_Directives_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDotFullStopKeyword_0_0 = (Keyword)cDotAssignment_0.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCodeTypeKeyword_1_0 = (Keyword)cCodeAssignment_1.eContents().get(0);
		
		//Assember_Directives_type:
		//	dot?="." code?="type";
		@Override public ParserRule getRule() { return rule; }

		//dot?="." code?="type"
		public Group getGroup() { return cGroup; }

		//dot?="."
		public Assignment getDotAssignment_0() { return cDotAssignment_0; }

		//"."
		public Keyword getDotFullStopKeyword_0_0() { return cDotFullStopKeyword_0_0; }

		//code?="type"
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }

		//"type"
		public Keyword getCodeTypeKeyword_1_0() { return cCodeTypeKeyword_1_0; }
	}

	public class Assembler_Directives_endmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assembler_Directives_endm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDotFullStopKeyword_0_0 = (Keyword)cDotAssignment_0.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCodeEndmKeyword_1_0 = (Keyword)cCodeAssignment_1.eContents().get(0);
		
		//Assembler_Directives_endm:
		//	dot?="." code?="endm";
		@Override public ParserRule getRule() { return rule; }

		//dot?="." code?="endm"
		public Group getGroup() { return cGroup; }

		//dot?="."
		public Assignment getDotAssignment_0() { return cDotAssignment_0; }

		//"."
		public Keyword getDotFullStopKeyword_0_0() { return cDotFullStopKeyword_0_0; }

		//code?="endm"
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }

		//"endm"
		public Keyword getCodeEndmKeyword_1_0() { return cCodeEndmKeyword_1_0; }
	}

	public class ARM_Machine_DirectivesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ARM_Machine_Directives");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDotFullStopKeyword_0_0 = (Keyword)cDotAssignment_0.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCodeAlternatives_1_0 = (Alternatives)cCodeAssignment_1.eContents().get(0);
		private final Keyword cCode2byteKeyword_1_0_0 = (Keyword)cCodeAlternatives_1_0.eContents().get(0);
		private final Keyword cCode4byteKeyword_1_0_1 = (Keyword)cCodeAlternatives_1_0.eContents().get(1);
		private final Keyword cCode8byteKeyword_1_0_2 = (Keyword)cCodeAlternatives_1_0.eContents().get(2);
		private final Keyword cCodeArchKeyword_1_0_3 = (Keyword)cCodeAlternatives_1_0.eContents().get(3);
		private final Keyword cCodeArch_extensionKeyword_1_0_4 = (Keyword)cCodeAlternatives_1_0.eContents().get(4);
		private final Keyword cCodeArmKeyword_1_0_5 = (Keyword)cCodeAlternatives_1_0.eContents().get(5);
		private final Keyword cCodeBssKeyword_1_0_6 = (Keyword)cCodeAlternatives_1_0.eContents().get(6);
		private final Keyword cCodeCantunwindKeyword_1_0_7 = (Keyword)cCodeAlternatives_1_0.eContents().get(7);
		private final Keyword cCodeCpuKeyword_1_0_8 = (Keyword)cCodeAlternatives_1_0.eContents().get(8);
		private final Keyword cCodeEvenKeyword_1_0_9 = (Keyword)cCodeAlternatives_1_0.eContents().get(9);
		private final Keyword cCodeExtendKeyword_1_0_10 = (Keyword)cCodeAlternatives_1_0.eContents().get(10);
		private final Keyword cCodeLdoubleKeyword_1_0_11 = (Keyword)cCodeAlternatives_1_0.eContents().get(11);
		private final Keyword cCodeFnendKeyword_1_0_12 = (Keyword)cCodeAlternatives_1_0.eContents().get(12);
		private final Keyword cCodeFnstartKeyword_1_0_13 = (Keyword)cCodeAlternatives_1_0.eContents().get(13);
		private final Keyword cCodeForce_thumbKeyword_1_0_14 = (Keyword)cCodeAlternatives_1_0.eContents().get(14);
		private final Keyword cCodeFpuKeyword_1_0_15 = (Keyword)cCodeAlternatives_1_0.eContents().get(15);
		private final Keyword cCodeHandlerdataKeyword_1_0_16 = (Keyword)cCodeAlternatives_1_0.eContents().get(16);
		private final Keyword cCodeLtorgKeyword_1_0_17 = (Keyword)cCodeAlternatives_1_0.eContents().get(17);
		private final Keyword cCodeMovspKeyword_1_0_18 = (Keyword)cCodeAlternatives_1_0.eContents().get(18);
		private final Keyword cCodeObject_archKeyword_1_0_19 = (Keyword)cCodeAlternatives_1_0.eContents().get(19);
		private final Keyword cCodePackedKeyword_1_0_20 = (Keyword)cCodeAlternatives_1_0.eContents().get(20);
		private final Keyword cCodePersonalityKeyword_1_0_21 = (Keyword)cCodeAlternatives_1_0.eContents().get(21);
		private final Keyword cCodePersonalityindexKeyword_1_0_22 = (Keyword)cCodeAlternatives_1_0.eContents().get(22);
		private final Keyword cCodePoolKeyword_1_0_23 = (Keyword)cCodeAlternatives_1_0.eContents().get(23);
		private final Keyword cCodeSecrel32Keyword_1_0_24 = (Keyword)cCodeAlternatives_1_0.eContents().get(24);
		private final Keyword cCodeThumbKeyword_1_0_25 = (Keyword)cCodeAlternatives_1_0.eContents().get(25);
		private final Keyword cCodeThumb_funcKeyword_1_0_26 = (Keyword)cCodeAlternatives_1_0.eContents().get(26);
		private final Keyword cCodeThumb_setKeyword_1_0_27 = (Keyword)cCodeAlternatives_1_0.eContents().get(27);
		private final Keyword cCodeSpaceKeyword_1_0_28 = (Keyword)cCodeAlternatives_1_0.eContents().get(28);
		private final Keyword cCodeByteKeyword_1_0_29 = (Keyword)cCodeAlternatives_1_0.eContents().get(29);
		
		//ARM_Machine_Directives:
		//	dot?="." code?=("2byte" | "4byte" | "8byte" | "arch" | "arch_extension" | "arm" | "bss" | "cantunwind" | "cpu" |
		//	"even" | "extend" | "ldouble" | "fnend" | "fnstart" | "force_thumb" | "fpu" | "handlerdata" | "ltorg" | "movsp" |
		//	"object_arch" | "packed" | "personality" | "personalityindex" | "pool" | "secrel32" | "thumb" | "thumb_func" |
		//	"thumb_set" | "space" | "byte");
		@Override public ParserRule getRule() { return rule; }

		//dot?="." code?=("2byte" | "4byte" | "8byte" | "arch" | "arch_extension" | "arm" | "bss" | "cantunwind" | "cpu" | "even"
		//| "extend" | "ldouble" | "fnend" | "fnstart" | "force_thumb" | "fpu" | "handlerdata" | "ltorg" | "movsp" |
		//"object_arch" | "packed" | "personality" | "personalityindex" | "pool" | "secrel32" | "thumb" | "thumb_func" |
		//"thumb_set" | "space" | "byte")
		public Group getGroup() { return cGroup; }

		//dot?="."
		public Assignment getDotAssignment_0() { return cDotAssignment_0; }

		//"."
		public Keyword getDotFullStopKeyword_0_0() { return cDotFullStopKeyword_0_0; }

		//code?=("2byte" | "4byte" | "8byte" | "arch" | "arch_extension" | "arm" | "bss" | "cantunwind" | "cpu" | "even" |
		//"extend" | "ldouble" | "fnend" | "fnstart" | "force_thumb" | "fpu" | "handlerdata" | "ltorg" | "movsp" | "object_arch"
		//| "packed" | "personality" | "personalityindex" | "pool" | "secrel32" | "thumb" | "thumb_func" | "thumb_set" | "space"
		//| "byte")
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }

		//"2byte" | "4byte" | "8byte" | "arch" | "arch_extension" | "arm" | "bss" | "cantunwind" | "cpu" | "even" | "extend" |
		//"ldouble" | "fnend" | "fnstart" | "force_thumb" | "fpu" | "handlerdata" | "ltorg" | "movsp" | "object_arch" | "packed"
		//| "personality" | "personalityindex" | "pool" | "secrel32" | "thumb" | "thumb_func" | "thumb_set" | "space" | "byte"
		public Alternatives getCodeAlternatives_1_0() { return cCodeAlternatives_1_0; }

		//"2byte"
		public Keyword getCode2byteKeyword_1_0_0() { return cCode2byteKeyword_1_0_0; }

		//"4byte"
		public Keyword getCode4byteKeyword_1_0_1() { return cCode4byteKeyword_1_0_1; }

		//"8byte"
		public Keyword getCode8byteKeyword_1_0_2() { return cCode8byteKeyword_1_0_2; }

		//"arch"
		public Keyword getCodeArchKeyword_1_0_3() { return cCodeArchKeyword_1_0_3; }

		//"arch_extension"
		public Keyword getCodeArch_extensionKeyword_1_0_4() { return cCodeArch_extensionKeyword_1_0_4; }

		//"arm"
		public Keyword getCodeArmKeyword_1_0_5() { return cCodeArmKeyword_1_0_5; }

		//"bss"
		public Keyword getCodeBssKeyword_1_0_6() { return cCodeBssKeyword_1_0_6; }

		//"cantunwind"
		public Keyword getCodeCantunwindKeyword_1_0_7() { return cCodeCantunwindKeyword_1_0_7; }

		//"cpu"
		public Keyword getCodeCpuKeyword_1_0_8() { return cCodeCpuKeyword_1_0_8; }

		//"even"
		public Keyword getCodeEvenKeyword_1_0_9() { return cCodeEvenKeyword_1_0_9; }

		//"extend"
		public Keyword getCodeExtendKeyword_1_0_10() { return cCodeExtendKeyword_1_0_10; }

		//"ldouble"
		public Keyword getCodeLdoubleKeyword_1_0_11() { return cCodeLdoubleKeyword_1_0_11; }

		//"fnend"
		public Keyword getCodeFnendKeyword_1_0_12() { return cCodeFnendKeyword_1_0_12; }

		//"fnstart"
		public Keyword getCodeFnstartKeyword_1_0_13() { return cCodeFnstartKeyword_1_0_13; }

		//"force_thumb"
		public Keyword getCodeForce_thumbKeyword_1_0_14() { return cCodeForce_thumbKeyword_1_0_14; }

		//"fpu"
		public Keyword getCodeFpuKeyword_1_0_15() { return cCodeFpuKeyword_1_0_15; }

		//"handlerdata"
		public Keyword getCodeHandlerdataKeyword_1_0_16() { return cCodeHandlerdataKeyword_1_0_16; }

		//"ltorg"
		public Keyword getCodeLtorgKeyword_1_0_17() { return cCodeLtorgKeyword_1_0_17; }

		//"movsp"
		public Keyword getCodeMovspKeyword_1_0_18() { return cCodeMovspKeyword_1_0_18; }

		//"object_arch"
		public Keyword getCodeObject_archKeyword_1_0_19() { return cCodeObject_archKeyword_1_0_19; }

		//"packed"
		public Keyword getCodePackedKeyword_1_0_20() { return cCodePackedKeyword_1_0_20; }

		//"personality"
		public Keyword getCodePersonalityKeyword_1_0_21() { return cCodePersonalityKeyword_1_0_21; }

		//"personalityindex"
		public Keyword getCodePersonalityindexKeyword_1_0_22() { return cCodePersonalityindexKeyword_1_0_22; }

		//"pool"
		public Keyword getCodePoolKeyword_1_0_23() { return cCodePoolKeyword_1_0_23; }

		//"secrel32"
		public Keyword getCodeSecrel32Keyword_1_0_24() { return cCodeSecrel32Keyword_1_0_24; }

		//"thumb"
		public Keyword getCodeThumbKeyword_1_0_25() { return cCodeThumbKeyword_1_0_25; }

		//"thumb_func"
		public Keyword getCodeThumb_funcKeyword_1_0_26() { return cCodeThumb_funcKeyword_1_0_26; }

		//"thumb_set"
		public Keyword getCodeThumb_setKeyword_1_0_27() { return cCodeThumb_setKeyword_1_0_27; }

		//"space"
		public Keyword getCodeSpaceKeyword_1_0_28() { return cCodeSpaceKeyword_1_0_28; }

		//"byte"
		public Keyword getCodeByteKeyword_1_0_29() { return cCodeByteKeyword_1_0_29; }
	}

	public class ARM_MACHINE_DIRECTIVES_alignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ARM_MACHINE_DIRECTIVES_align");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDotFullStopKeyword_0_0 = (Keyword)cDotAssignment_0.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCodeAlignKeyword_1_0 = (Keyword)cCodeAssignment_1.eContents().get(0);
		
		//ARM_MACHINE_DIRECTIVES_align:
		//	dot?="." code?="align";
		@Override public ParserRule getRule() { return rule; }

		//dot?="." code?="align"
		public Group getGroup() { return cGroup; }

		//dot?="."
		public Assignment getDotAssignment_0() { return cDotAssignment_0; }

		//"."
		public Keyword getDotFullStopKeyword_0_0() { return cDotFullStopKeyword_0_0; }

		//code?="align"
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }

		//"align"
		public Keyword getCodeAlignKeyword_1_0() { return cCodeAlignKeyword_1_0; }
	}

	public class ARM_Machine_Directives_codeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ARM_Machine_Directives_code");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDotFullStopKeyword_0_0 = (Keyword)cDotAssignment_0.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCodeCodeKeyword_1_0 = (Keyword)cCodeAssignment_1.eContents().get(0);
		
		//ARM_Machine_Directives_code:
		//	dot?="." code?="code";
		@Override public ParserRule getRule() { return rule; }

		//dot?="." code?="code"
		public Group getGroup() { return cGroup; }

		//dot?="."
		public Assignment getDotAssignment_0() { return cDotAssignment_0; }

		//"."
		public Keyword getDotFullStopKeyword_0_0() { return cDotFullStopKeyword_0_0; }

		//code?="code"
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }

		//"code"
		public Keyword getCodeCodeKeyword_1_0() { return cCodeCodeKeyword_1_0; }
	}

	public class ARM_Machine_Directives_syntaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ARM_Machine_Directives_syntax");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDotFullStopKeyword_0_0 = (Keyword)cDotAssignment_0.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCodeSyntaxKeyword_1_0 = (Keyword)cCodeAssignment_1.eContents().get(0);
		
		//ARM_Machine_Directives_syntax:
		//	dot?="." code?="syntax";
		@Override public ParserRule getRule() { return rule; }

		//dot?="." code?="syntax"
		public Group getGroup() { return cGroup; }

		//dot?="."
		public Assignment getDotAssignment_0() { return cDotAssignment_0; }

		//"."
		public Keyword getDotFullStopKeyword_0_0() { return cDotFullStopKeyword_0_0; }

		//code?="syntax"
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }

		//"syntax"
		public Keyword getCodeSyntaxKeyword_1_0() { return cCodeSyntaxKeyword_1_0; }
	}

	public class ARM_Machine_Directives_saveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ARM_Machine_Directives_save");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDotFullStopKeyword_0_0 = (Keyword)cDotAssignment_0.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCodeSaveKeyword_1_0 = (Keyword)cCodeAssignment_1.eContents().get(0);
		
		//ARM_Machine_Directives_save:
		//	dot?="." code?="save";
		@Override public ParserRule getRule() { return rule; }

		//dot?="." code?="save"
		public Group getGroup() { return cGroup; }

		//dot?="."
		public Assignment getDotAssignment_0() { return cDotAssignment_0; }

		//"."
		public Keyword getDotFullStopKeyword_0_0() { return cDotFullStopKeyword_0_0; }

		//code?="save"
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }

		//"save"
		public Keyword getCodeSaveKeyword_1_0() { return cCodeSaveKeyword_1_0; }
	}

	public class CExtendascizElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CExtendasciz");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDotFullStopKeyword_0_0 = (Keyword)cDotAssignment_0.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCodeAscizKeyword_1_0 = (Keyword)cCodeAssignment_1.eContents().get(0);
		
		//CExtendasciz:
		//	dot?="." code?="asciz";
		@Override public ParserRule getRule() { return rule; }

		//dot?="." code?="asciz"
		public Group getGroup() { return cGroup; }

		//dot?="."
		public Assignment getDotAssignment_0() { return cDotAssignment_0; }

		//"."
		public Keyword getDotFullStopKeyword_0_0() { return cDotFullStopKeyword_0_0; }

		//code?="asciz"
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }

		//"asciz"
		public Keyword getCodeAscizKeyword_1_0() { return cCodeAscizKeyword_1_0; }
	}

	public class CLangElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CLang");
		private final Assignment cCodeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cCodeAlternatives_0 = (Alternatives)cCodeAssignment.eContents().get(0);
		private final Keyword cCodeTitleKeyword_0_0 = (Keyword)cCodeAlternatives_0.eContents().get(0);
		private final Keyword cCodePromptKeyword_0_1 = (Keyword)cCodeAlternatives_0.eContents().get(1);
		private final Keyword cCodeContentKeyword_0_2 = (Keyword)cCodeAlternatives_0.eContents().get(2);
		private final Keyword cCodeMain1Keyword_0_3 = (Keyword)cCodeAlternatives_0.eContents().get(3);
		private final Keyword cCodeBreakKeyword_0_4 = (Keyword)cCodeAlternatives_0.eContents().get(4);
		private final Keyword cCodeLoopKeyword_0_5 = (Keyword)cCodeAlternatives_0.eContents().get(5);
		private final Keyword cCodeExit_mainKeyword_0_6 = (Keyword)cCodeAlternatives_0.eContents().get(6);
		private final Keyword cCodeStartKeyword_0_7 = (Keyword)cCodeAlternatives_0.eContents().get(7);
		private final Keyword cCodeStopKeyword_0_8 = (Keyword)cCodeAlternatives_0.eContents().get(8);
		private final Keyword cCodeSTARTKeyword_0_9 = (Keyword)cCodeAlternatives_0.eContents().get(9);
		private final Keyword cCodeSTOPKeyword_0_10 = (Keyword)cCodeAlternatives_0.eContents().get(10);
		
		//CLang:
		//	code?=("title:" | "prompt:" | "Content:" | "main1:" | "break:" | "loop:" | "exit_main:" | "start:" | "stop:" |
		//	"START:" | "STOP:");
		@Override public ParserRule getRule() { return rule; }

		//code?=("title:" | "prompt:" | "Content:" | "main1:" | "break:" | "loop:" | "exit_main:" | "start:" | "stop:" | "START:"
		//| "STOP:")
		public Assignment getCodeAssignment() { return cCodeAssignment; }

		//"title:" | "prompt:" | "Content:" | "main1:" | "break:" | "loop:" | "exit_main:" | "start:" | "stop:" | "START:" |
		//"STOP:"
		public Alternatives getCodeAlternatives_0() { return cCodeAlternatives_0; }

		//"title:"
		public Keyword getCodeTitleKeyword_0_0() { return cCodeTitleKeyword_0_0; }

		//"prompt:"
		public Keyword getCodePromptKeyword_0_1() { return cCodePromptKeyword_0_1; }

		//"Content:"
		public Keyword getCodeContentKeyword_0_2() { return cCodeContentKeyword_0_2; }

		//"main1:"
		public Keyword getCodeMain1Keyword_0_3() { return cCodeMain1Keyword_0_3; }

		//"break:"
		public Keyword getCodeBreakKeyword_0_4() { return cCodeBreakKeyword_0_4; }

		//"loop:"
		public Keyword getCodeLoopKeyword_0_5() { return cCodeLoopKeyword_0_5; }

		//"exit_main:"
		public Keyword getCodeExit_mainKeyword_0_6() { return cCodeExit_mainKeyword_0_6; }

		//"start:"
		public Keyword getCodeStartKeyword_0_7() { return cCodeStartKeyword_0_7; }

		//"stop:"
		public Keyword getCodeStopKeyword_0_8() { return cCodeStopKeyword_0_8; }

		//"START:"
		public Keyword getCodeSTARTKeyword_0_9() { return cCodeSTARTKeyword_0_9; }

		//"STOP:"
		public Keyword getCodeSTOPKeyword_0_10() { return cCodeSTOPKeyword_0_10; }
	}

	public class REGISTERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "REGISTER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cR0Assignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cR0R0Keyword_0_0 = (Keyword)cR0Assignment_0.eContents().get(0);
		private final Assignment cR1Assignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cR1R1Keyword_1_0 = (Keyword)cR1Assignment_1.eContents().get(0);
		private final Assignment cR2Assignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cR2R2Keyword_2_0 = (Keyword)cR2Assignment_2.eContents().get(0);
		private final Assignment cR3Assignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cR3R3Keyword_3_0 = (Keyword)cR3Assignment_3.eContents().get(0);
		private final Assignment cR4Assignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cR4R4Keyword_4_0 = (Keyword)cR4Assignment_4.eContents().get(0);
		private final Assignment cR5Assignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cR5R5Keyword_5_0 = (Keyword)cR5Assignment_5.eContents().get(0);
		private final Assignment cR6Assignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cR6R6Keyword_6_0 = (Keyword)cR6Assignment_6.eContents().get(0);
		private final Assignment cR7Assignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final Keyword cR7R7Keyword_7_0 = (Keyword)cR7Assignment_7.eContents().get(0);
		private final Assignment cR8Assignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cR8R8Keyword_8_0 = (Keyword)cR8Assignment_8.eContents().get(0);
		private final Assignment cR9Assignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final Keyword cR9R9Keyword_9_0 = (Keyword)cR9Assignment_9.eContents().get(0);
		private final Assignment cR10Assignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final Keyword cR10R10Keyword_10_0 = (Keyword)cR10Assignment_10.eContents().get(0);
		private final Assignment cR11Assignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final Keyword cR11R11Keyword_11_0 = (Keyword)cR11Assignment_11.eContents().get(0);
		private final Assignment cR12Assignment_12 = (Assignment)cAlternatives.eContents().get(12);
		private final Keyword cR12R12Keyword_12_0 = (Keyword)cR12Assignment_12.eContents().get(0);
		private final Assignment cR13Assignment_13 = (Assignment)cAlternatives.eContents().get(13);
		private final Keyword cR13R13Keyword_13_0 = (Keyword)cR13Assignment_13.eContents().get(0);
		private final Assignment cR14Assignment_14 = (Assignment)cAlternatives.eContents().get(14);
		private final Keyword cR14R14Keyword_14_0 = (Keyword)cR14Assignment_14.eContents().get(0);
		private final Assignment cR15Assignment_15 = (Assignment)cAlternatives.eContents().get(15);
		private final Keyword cR15R15Keyword_15_0 = (Keyword)cR15Assignment_15.eContents().get(0);
		private final Assignment cRfpAssignment_16 = (Assignment)cAlternatives.eContents().get(16);
		private final Keyword cRfpFpKeyword_16_0 = (Keyword)cRfpAssignment_16.eContents().get(0);
		private final Assignment cRipAssignment_17 = (Assignment)cAlternatives.eContents().get(17);
		private final Keyword cRipIpKeyword_17_0 = (Keyword)cRipAssignment_17.eContents().get(0);
		private final Assignment cRspAssignment_18 = (Assignment)cAlternatives.eContents().get(18);
		private final Keyword cRspSpKeyword_18_0 = (Keyword)cRspAssignment_18.eContents().get(0);
		private final Assignment cRlrAssignment_19 = (Assignment)cAlternatives.eContents().get(19);
		private final Keyword cRlrLrKeyword_19_0 = (Keyword)cRlrAssignment_19.eContents().get(0);
		private final Assignment cRpcAssignment_20 = (Assignment)cAlternatives.eContents().get(20);
		private final Keyword cRpcPcKeyword_20_0 = (Keyword)cRpcAssignment_20.eContents().get(0);
		private final Assignment cR001Assignment_21 = (Assignment)cAlternatives.eContents().get(21);
		private final Keyword cR001R0Keyword_21_0 = (Keyword)cR001Assignment_21.eContents().get(0);
		private final Assignment cR01Assignment_22 = (Assignment)cAlternatives.eContents().get(22);
		private final Keyword cR01R1Keyword_22_0 = (Keyword)cR01Assignment_22.eContents().get(0);
		private final Assignment cR02Assignment_23 = (Assignment)cAlternatives.eContents().get(23);
		private final Keyword cR02R2Keyword_23_0 = (Keyword)cR02Assignment_23.eContents().get(0);
		private final Assignment cR03Assignment_24 = (Assignment)cAlternatives.eContents().get(24);
		private final Keyword cR03R3Keyword_24_0 = (Keyword)cR03Assignment_24.eContents().get(0);
		private final Assignment cR04Assignment_25 = (Assignment)cAlternatives.eContents().get(25);
		private final Keyword cR04R4Keyword_25_0 = (Keyword)cR04Assignment_25.eContents().get(0);
		private final Assignment cR05Assignment_26 = (Assignment)cAlternatives.eContents().get(26);
		private final Keyword cR05R5Keyword_26_0 = (Keyword)cR05Assignment_26.eContents().get(0);
		private final Assignment cR06Assignment_27 = (Assignment)cAlternatives.eContents().get(27);
		private final Keyword cR06R6Keyword_27_0 = (Keyword)cR06Assignment_27.eContents().get(0);
		private final Assignment cR07Assignment_28 = (Assignment)cAlternatives.eContents().get(28);
		private final Keyword cR07R7Keyword_28_0 = (Keyword)cR07Assignment_28.eContents().get(0);
		private final Assignment cR08Assignment_29 = (Assignment)cAlternatives.eContents().get(29);
		private final Keyword cR08R8Keyword_29_0 = (Keyword)cR08Assignment_29.eContents().get(0);
		private final Assignment cR09Assignment_30 = (Assignment)cAlternatives.eContents().get(30);
		private final Keyword cR09R9Keyword_30_0 = (Keyword)cR09Assignment_30.eContents().get(0);
		private final Assignment cR010Assignment_31 = (Assignment)cAlternatives.eContents().get(31);
		private final Keyword cR010R10Keyword_31_0 = (Keyword)cR010Assignment_31.eContents().get(0);
		private final Assignment cR011Assignment_32 = (Assignment)cAlternatives.eContents().get(32);
		private final Keyword cR011R11Keyword_32_0 = (Keyword)cR011Assignment_32.eContents().get(0);
		private final Assignment cR012Assignment_33 = (Assignment)cAlternatives.eContents().get(33);
		private final Keyword cR012R12Keyword_33_0 = (Keyword)cR012Assignment_33.eContents().get(0);
		private final Assignment cR013Assignment_34 = (Assignment)cAlternatives.eContents().get(34);
		private final Keyword cR013R13Keyword_34_0 = (Keyword)cR013Assignment_34.eContents().get(0);
		private final Assignment cR014Assignment_35 = (Assignment)cAlternatives.eContents().get(35);
		private final Keyword cR014R14Keyword_35_0 = (Keyword)cR014Assignment_35.eContents().get(0);
		private final Assignment cR015Assignment_36 = (Assignment)cAlternatives.eContents().get(36);
		private final Keyword cR015R15Keyword_36_0 = (Keyword)cR015Assignment_36.eContents().get(0);
		private final Assignment cR0FPAssignment_37 = (Assignment)cAlternatives.eContents().get(37);
		private final Keyword cR0FPFPKeyword_37_0 = (Keyword)cR0FPAssignment_37.eContents().get(0);
		private final Assignment cR0IPAssignment_38 = (Assignment)cAlternatives.eContents().get(38);
		private final Keyword cR0IPIPKeyword_38_0 = (Keyword)cR0IPAssignment_38.eContents().get(0);
		private final Assignment cR0SPAssignment_39 = (Assignment)cAlternatives.eContents().get(39);
		private final Keyword cR0SPSPKeyword_39_0 = (Keyword)cR0SPAssignment_39.eContents().get(0);
		private final Assignment cR0LRAssignment_40 = (Assignment)cAlternatives.eContents().get(40);
		private final Keyword cR0LRLRKeyword_40_0 = (Keyword)cR0LRAssignment_40.eContents().get(0);
		private final Assignment cR0PCAssignment_41 = (Assignment)cAlternatives.eContents().get(41);
		private final Keyword cR0PCPCKeyword_41_0 = (Keyword)cR0PCAssignment_41.eContents().get(0);
		private final Group cGroup_42 = (Group)cAlternatives.eContents().get(42);
		private final Keyword cReverseSolidusKeyword_42_0 = (Keyword)cGroup_42.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_42_1 = (RuleCall)cGroup_42.eContents().get(1);
		
		//REGISTER:
		//	r0?="r0" | r1?="r1" | r2?="r2" | r3?="r3" | r4?="r4" | r5?="r5" | r6?="r6" | r7?="r7" | r8?="r8" | r9?="r9" |
		//	r10?="r10" | r11?="r11" | r12?="r12" | r13?="r13" | r14?="r14" | r15?="r15" | rfp?="fp" | rip?="ip" | rsp?="sp" |
		//	rlr?="lr" | rpc?="pc" | R001?="R0" | R01?="R1" | R02?="R2" | R03?="R3" | R04?="R4" | R05?="R5" | R06?="R6" | R07?="R7"
		//	| R08?="R8" | R09?="R9" | R010?="R10" | R011?="R11" | R012?="R12" | R013?="R13" | R014?="R14" | R015?="R15" |
		//	R0FP?="FP" | R0IP?="IP" | R0SP?="SP" | R0LR?="LR" | R0PC?="PC" | "\\"? ID;
		@Override public ParserRule getRule() { return rule; }

		//r0?="r0" | r1?="r1" | r2?="r2" | r3?="r3" | r4?="r4" | r5?="r5" | r6?="r6" | r7?="r7" | r8?="r8" | r9?="r9" | r10?="r10"
		//| r11?="r11" | r12?="r12" | r13?="r13" | r14?="r14" | r15?="r15" | rfp?="fp" | rip?="ip" | rsp?="sp" | rlr?="lr" |
		//rpc?="pc" | R001?="R0" | R01?="R1" | R02?="R2" | R03?="R3" | R04?="R4" | R05?="R5" | R06?="R6" | R07?="R7" | R08?="R8"
		//| R09?="R9" | R010?="R10" | R011?="R11" | R012?="R12" | R013?="R13" | R014?="R14" | R015?="R15" | R0FP?="FP" |
		//R0IP?="IP" | R0SP?="SP" | R0LR?="LR" | R0PC?="PC" | "\\"? ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//r0?="r0"
		public Assignment getR0Assignment_0() { return cR0Assignment_0; }

		//"r0"
		public Keyword getR0R0Keyword_0_0() { return cR0R0Keyword_0_0; }

		//r1?="r1"
		public Assignment getR1Assignment_1() { return cR1Assignment_1; }

		//"r1"
		public Keyword getR1R1Keyword_1_0() { return cR1R1Keyword_1_0; }

		//r2?="r2"
		public Assignment getR2Assignment_2() { return cR2Assignment_2; }

		//"r2"
		public Keyword getR2R2Keyword_2_0() { return cR2R2Keyword_2_0; }

		//r3?="r3"
		public Assignment getR3Assignment_3() { return cR3Assignment_3; }

		//"r3"
		public Keyword getR3R3Keyword_3_0() { return cR3R3Keyword_3_0; }

		//r4?="r4"
		public Assignment getR4Assignment_4() { return cR4Assignment_4; }

		//"r4"
		public Keyword getR4R4Keyword_4_0() { return cR4R4Keyword_4_0; }

		//r5?="r5"
		public Assignment getR5Assignment_5() { return cR5Assignment_5; }

		//"r5"
		public Keyword getR5R5Keyword_5_0() { return cR5R5Keyword_5_0; }

		//r6?="r6"
		public Assignment getR6Assignment_6() { return cR6Assignment_6; }

		//"r6"
		public Keyword getR6R6Keyword_6_0() { return cR6R6Keyword_6_0; }

		//r7?="r7"
		public Assignment getR7Assignment_7() { return cR7Assignment_7; }

		//"r7"
		public Keyword getR7R7Keyword_7_0() { return cR7R7Keyword_7_0; }

		//r8?="r8"
		public Assignment getR8Assignment_8() { return cR8Assignment_8; }

		//"r8"
		public Keyword getR8R8Keyword_8_0() { return cR8R8Keyword_8_0; }

		//r9?="r9"
		public Assignment getR9Assignment_9() { return cR9Assignment_9; }

		//"r9"
		public Keyword getR9R9Keyword_9_0() { return cR9R9Keyword_9_0; }

		//r10?="r10"
		public Assignment getR10Assignment_10() { return cR10Assignment_10; }

		//"r10"
		public Keyword getR10R10Keyword_10_0() { return cR10R10Keyword_10_0; }

		//r11?="r11"
		public Assignment getR11Assignment_11() { return cR11Assignment_11; }

		//"r11"
		public Keyword getR11R11Keyword_11_0() { return cR11R11Keyword_11_0; }

		//r12?="r12"
		public Assignment getR12Assignment_12() { return cR12Assignment_12; }

		//"r12"
		public Keyword getR12R12Keyword_12_0() { return cR12R12Keyword_12_0; }

		//r13?="r13"
		public Assignment getR13Assignment_13() { return cR13Assignment_13; }

		//"r13"
		public Keyword getR13R13Keyword_13_0() { return cR13R13Keyword_13_0; }

		//r14?="r14"
		public Assignment getR14Assignment_14() { return cR14Assignment_14; }

		//"r14"
		public Keyword getR14R14Keyword_14_0() { return cR14R14Keyword_14_0; }

		//r15?="r15"
		public Assignment getR15Assignment_15() { return cR15Assignment_15; }

		//"r15"
		public Keyword getR15R15Keyword_15_0() { return cR15R15Keyword_15_0; }

		//rfp?="fp"
		public Assignment getRfpAssignment_16() { return cRfpAssignment_16; }

		//"fp"
		public Keyword getRfpFpKeyword_16_0() { return cRfpFpKeyword_16_0; }

		//rip?="ip"
		public Assignment getRipAssignment_17() { return cRipAssignment_17; }

		//"ip"
		public Keyword getRipIpKeyword_17_0() { return cRipIpKeyword_17_0; }

		//rsp?="sp"
		public Assignment getRspAssignment_18() { return cRspAssignment_18; }

		//"sp"
		public Keyword getRspSpKeyword_18_0() { return cRspSpKeyword_18_0; }

		//rlr?="lr"
		public Assignment getRlrAssignment_19() { return cRlrAssignment_19; }

		//"lr"
		public Keyword getRlrLrKeyword_19_0() { return cRlrLrKeyword_19_0; }

		//rpc?="pc"
		public Assignment getRpcAssignment_20() { return cRpcAssignment_20; }

		//"pc"
		public Keyword getRpcPcKeyword_20_0() { return cRpcPcKeyword_20_0; }

		//R001?="R0"
		public Assignment getR001Assignment_21() { return cR001Assignment_21; }

		//"R0"
		public Keyword getR001R0Keyword_21_0() { return cR001R0Keyword_21_0; }

		//R01?="R1"
		public Assignment getR01Assignment_22() { return cR01Assignment_22; }

		//"R1"
		public Keyword getR01R1Keyword_22_0() { return cR01R1Keyword_22_0; }

		//R02?="R2"
		public Assignment getR02Assignment_23() { return cR02Assignment_23; }

		//"R2"
		public Keyword getR02R2Keyword_23_0() { return cR02R2Keyword_23_0; }

		//R03?="R3"
		public Assignment getR03Assignment_24() { return cR03Assignment_24; }

		//"R3"
		public Keyword getR03R3Keyword_24_0() { return cR03R3Keyword_24_0; }

		//R04?="R4"
		public Assignment getR04Assignment_25() { return cR04Assignment_25; }

		//"R4"
		public Keyword getR04R4Keyword_25_0() { return cR04R4Keyword_25_0; }

		//R05?="R5"
		public Assignment getR05Assignment_26() { return cR05Assignment_26; }

		//"R5"
		public Keyword getR05R5Keyword_26_0() { return cR05R5Keyword_26_0; }

		//R06?="R6"
		public Assignment getR06Assignment_27() { return cR06Assignment_27; }

		//"R6"
		public Keyword getR06R6Keyword_27_0() { return cR06R6Keyword_27_0; }

		//R07?="R7"
		public Assignment getR07Assignment_28() { return cR07Assignment_28; }

		//"R7"
		public Keyword getR07R7Keyword_28_0() { return cR07R7Keyword_28_0; }

		//R08?="R8"
		public Assignment getR08Assignment_29() { return cR08Assignment_29; }

		//"R8"
		public Keyword getR08R8Keyword_29_0() { return cR08R8Keyword_29_0; }

		//R09?="R9"
		public Assignment getR09Assignment_30() { return cR09Assignment_30; }

		//"R9"
		public Keyword getR09R9Keyword_30_0() { return cR09R9Keyword_30_0; }

		//R010?="R10"
		public Assignment getR010Assignment_31() { return cR010Assignment_31; }

		//"R10"
		public Keyword getR010R10Keyword_31_0() { return cR010R10Keyword_31_0; }

		//R011?="R11"
		public Assignment getR011Assignment_32() { return cR011Assignment_32; }

		//"R11"
		public Keyword getR011R11Keyword_32_0() { return cR011R11Keyword_32_0; }

		//R012?="R12"
		public Assignment getR012Assignment_33() { return cR012Assignment_33; }

		//"R12"
		public Keyword getR012R12Keyword_33_0() { return cR012R12Keyword_33_0; }

		//R013?="R13"
		public Assignment getR013Assignment_34() { return cR013Assignment_34; }

		//"R13"
		public Keyword getR013R13Keyword_34_0() { return cR013R13Keyword_34_0; }

		//R014?="R14"
		public Assignment getR014Assignment_35() { return cR014Assignment_35; }

		//"R14"
		public Keyword getR014R14Keyword_35_0() { return cR014R14Keyword_35_0; }

		//R015?="R15"
		public Assignment getR015Assignment_36() { return cR015Assignment_36; }

		//"R15"
		public Keyword getR015R15Keyword_36_0() { return cR015R15Keyword_36_0; }

		//R0FP?="FP"
		public Assignment getR0FPAssignment_37() { return cR0FPAssignment_37; }

		//"FP"
		public Keyword getR0FPFPKeyword_37_0() { return cR0FPFPKeyword_37_0; }

		//R0IP?="IP"
		public Assignment getR0IPAssignment_38() { return cR0IPAssignment_38; }

		//"IP"
		public Keyword getR0IPIPKeyword_38_0() { return cR0IPIPKeyword_38_0; }

		//R0SP?="SP"
		public Assignment getR0SPAssignment_39() { return cR0SPAssignment_39; }

		//"SP"
		public Keyword getR0SPSPKeyword_39_0() { return cR0SPSPKeyword_39_0; }

		//R0LR?="LR"
		public Assignment getR0LRAssignment_40() { return cR0LRAssignment_40; }

		//"LR"
		public Keyword getR0LRLRKeyword_40_0() { return cR0LRLRKeyword_40_0; }

		//R0PC?="PC"
		public Assignment getR0PCAssignment_41() { return cR0PCAssignment_41; }

		//"PC"
		public Keyword getR0PCPCKeyword_41_0() { return cR0PCPCKeyword_41_0; }

		//"\\"? ID
		public Group getGroup_42() { return cGroup_42; }

		//"\\"?
		public Keyword getReverseSolidusKeyword_42_0() { return cReverseSolidusKeyword_42_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_42_1() { return cIDTerminalRuleCall_42_1; }
	}

	public class BAREL_SHIFT_REGISTERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BAREL_SHIFT_REGISTER");
		private final Assignment cBAREL_SHIFT_REGISTERAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cBAREL_SHIFT_REGISTERAlternatives_0 = (Alternatives)cBAREL_SHIFT_REGISTERAssignment.eContents().get(0);
		private final Keyword cBAREL_SHIFT_REGISTERAsrKeyword_0_0 = (Keyword)cBAREL_SHIFT_REGISTERAlternatives_0.eContents().get(0);
		private final Keyword cBAREL_SHIFT_REGISTERLslKeyword_0_1 = (Keyword)cBAREL_SHIFT_REGISTERAlternatives_0.eContents().get(1);
		private final Keyword cBAREL_SHIFT_REGISTERLsrKeyword_0_2 = (Keyword)cBAREL_SHIFT_REGISTERAlternatives_0.eContents().get(2);
		private final Keyword cBAREL_SHIFT_REGISTERRorKeyword_0_3 = (Keyword)cBAREL_SHIFT_REGISTERAlternatives_0.eContents().get(3);
		private final Keyword cBAREL_SHIFT_REGISTERASRKeyword_0_4 = (Keyword)cBAREL_SHIFT_REGISTERAlternatives_0.eContents().get(4);
		private final Keyword cBAREL_SHIFT_REGISTERLSLKeyword_0_5 = (Keyword)cBAREL_SHIFT_REGISTERAlternatives_0.eContents().get(5);
		private final Keyword cBAREL_SHIFT_REGISTERLSRKeyword_0_6 = (Keyword)cBAREL_SHIFT_REGISTERAlternatives_0.eContents().get(6);
		private final Keyword cBAREL_SHIFT_REGISTERRORKeyword_0_7 = (Keyword)cBAREL_SHIFT_REGISTERAlternatives_0.eContents().get(7);
		private final RuleCall cBAREL_SHIFT_REGISTERIDTerminalRuleCall_0_8 = (RuleCall)cBAREL_SHIFT_REGISTERAlternatives_0.eContents().get(8);
		
		//BAREL_SHIFT_REGISTER:
		//	BAREL_SHIFT_REGISTER?=("asr" | "lsl" | "lsr" | "ror" | "ASR" | "LSL" | "LSR" | "ROR" | ID);
		@Override public ParserRule getRule() { return rule; }

		//BAREL_SHIFT_REGISTER?=("asr" | "lsl" | "lsr" | "ror" | "ASR" | "LSL" | "LSR" | "ROR" | ID)
		public Assignment getBAREL_SHIFT_REGISTERAssignment() { return cBAREL_SHIFT_REGISTERAssignment; }

		//"asr" | "lsl" | "lsr" | "ror" | "ASR" | "LSL" | "LSR" | "ROR" | ID
		public Alternatives getBAREL_SHIFT_REGISTERAlternatives_0() { return cBAREL_SHIFT_REGISTERAlternatives_0; }

		//"asr"
		public Keyword getBAREL_SHIFT_REGISTERAsrKeyword_0_0() { return cBAREL_SHIFT_REGISTERAsrKeyword_0_0; }

		//"lsl"
		public Keyword getBAREL_SHIFT_REGISTERLslKeyword_0_1() { return cBAREL_SHIFT_REGISTERLslKeyword_0_1; }

		//"lsr"
		public Keyword getBAREL_SHIFT_REGISTERLsrKeyword_0_2() { return cBAREL_SHIFT_REGISTERLsrKeyword_0_2; }

		//"ror"
		public Keyword getBAREL_SHIFT_REGISTERRorKeyword_0_3() { return cBAREL_SHIFT_REGISTERRorKeyword_0_3; }

		//"ASR"
		public Keyword getBAREL_SHIFT_REGISTERASRKeyword_0_4() { return cBAREL_SHIFT_REGISTERASRKeyword_0_4; }

		//"LSL"
		public Keyword getBAREL_SHIFT_REGISTERLSLKeyword_0_5() { return cBAREL_SHIFT_REGISTERLSLKeyword_0_5; }

		//"LSR"
		public Keyword getBAREL_SHIFT_REGISTERLSRKeyword_0_6() { return cBAREL_SHIFT_REGISTERLSRKeyword_0_6; }

		//"ROR"
		public Keyword getBAREL_SHIFT_REGISTERRORKeyword_0_7() { return cBAREL_SHIFT_REGISTERRORKeyword_0_7; }

		//ID
		public RuleCall getBAREL_SHIFT_REGISTERIDTerminalRuleCall_0_8() { return cBAREL_SHIFT_REGISTERIDTerminalRuleCall_0_8; }
	}

	public class Operand2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operand2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImmediate_labelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cREGISTERParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOpshAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOpshOpshParserRuleCall_1_1_1_0 = (RuleCall)cOpshAssignment_1_1_1.eContents().get(0);
		
		//Operand2:
		//	immediate_label | REGISTER ("," opsh+=opsh)?;
		@Override public ParserRule getRule() { return rule; }

		//immediate_label | REGISTER ("," opsh+=opsh)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//immediate_label
		public RuleCall getImmediate_labelParserRuleCall_0() { return cImmediate_labelParserRuleCall_0; }

		//REGISTER ("," opsh+=opsh)?
		public Group getGroup_1() { return cGroup_1; }

		//REGISTER
		public RuleCall getREGISTERParserRuleCall_1_0() { return cREGISTERParserRuleCall_1_0; }

		//("," opsh+=opsh)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//opsh+=opsh
		public Assignment getOpshAssignment_1_1_1() { return cOpshAssignment_1_1_1; }

		//opsh
		public RuleCall getOpshOpshParserRuleCall_1_1_1_0() { return cOpshOpshParserRuleCall_1_1_1_0; }
	}

	public class OpshElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "opsh");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBAREL_SHIFT_REGISTERParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cImmediate_labelAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cImmediate_labelImmediate_labelParserRuleCall_2_0_0 = (RuleCall)cImmediate_labelAssignment_2_0.eContents().get(0);
		private final Assignment cRegisterAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cRegisterREGISTERParserRuleCall_2_1_0 = (RuleCall)cRegisterAssignment_2_1.eContents().get(0);
		
		//opsh:
		//	"\\"? BAREL_SHIFT_REGISTER (immediate_label+=immediate_label | register+=REGISTER);
		@Override public ParserRule getRule() { return rule; }

		//"\\"? BAREL_SHIFT_REGISTER (immediate_label+=immediate_label | register+=REGISTER)
		public Group getGroup() { return cGroup; }

		//"\\"?
		public Keyword getReverseSolidusKeyword_0() { return cReverseSolidusKeyword_0; }

		//BAREL_SHIFT_REGISTER
		public RuleCall getBAREL_SHIFT_REGISTERParserRuleCall_1() { return cBAREL_SHIFT_REGISTERParserRuleCall_1; }

		//immediate_label+=immediate_label | register+=REGISTER
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//immediate_label+=immediate_label
		public Assignment getImmediate_labelAssignment_2_0() { return cImmediate_labelAssignment_2_0; }

		//immediate_label
		public RuleCall getImmediate_labelImmediate_labelParserRuleCall_2_0_0() { return cImmediate_labelImmediate_labelParserRuleCall_2_0_0; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_2_1() { return cRegisterAssignment_2_1; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_2_1_0() { return cRegisterREGISTERParserRuleCall_2_1_0; }
	}

	public class Immediate_labelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "immediate_label");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLiteral_numericAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLiteral_numericLiteral_numericParserRuleCall_0_0 = (RuleCall)cLiteral_numericAssignment_0.eContents().get(0);
		private final Assignment cNumeric_backward_forwardAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumeric_backward_forwardNumeric_backward_forwardParserRuleCall_1_0 = (RuleCall)cNumeric_backward_forwardAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cReverseSolidusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_2_1_0 = (Alternatives)cGroup_2_1.eContents().get(0);
		private final Keyword cNumberSignKeyword_2_1_0_0 = (Keyword)cAlternatives_2_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_0_1 = (Keyword)cAlternatives_2_1_0.eContents().get(1);
		private final Keyword cDollarSignKeyword_2_1_0_2 = (Keyword)cAlternatives_2_1_0.eContents().get(2);
		private final Keyword cFullStopKeyword_2_1_0_3 = (Keyword)cAlternatives_2_1_0.eContents().get(3);
		private final Keyword c_Keyword_2_1_0_4 = (Keyword)cAlternatives_2_1_0.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Alternatives cAlternatives_2_1_2 = (Alternatives)cGroup_2_1.eContents().get(2);
		private final Assignment cLabelAssignment_2_1_2_0 = (Assignment)cAlternatives_2_1_2.eContents().get(0);
		private final RuleCall cLabelIDTerminalRuleCall_2_1_2_0_0 = (RuleCall)cLabelAssignment_2_1_2_0.eContents().get(0);
		private final Assignment cNum2Assignment_2_1_2_1 = (Assignment)cAlternatives_2_1_2.eContents().get(1);
		private final RuleCall cNum2MyINTParserRuleCall_2_1_2_1_0 = (RuleCall)cNum2Assignment_2_1_2_1.eContents().get(0);
		private final Group cGroup_2_1_3 = (Group)cGroup_2_1.eContents().get(3);
		private final Alternatives cAlternatives_2_1_3_0 = (Alternatives)cGroup_2_1_3.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2_1_3_0_0 = (Keyword)cAlternatives_2_1_3_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_2_1_3_0_1 = (Keyword)cAlternatives_2_1_3_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2_1_3_0_2 = (Keyword)cAlternatives_2_1_3_0.eContents().get(2);
		private final Keyword cAsteriskKeyword_2_1_3_0_3 = (Keyword)cAlternatives_2_1_3_0.eContents().get(3);
		private final Keyword cSolidusKeyword_2_1_3_0_4 = (Keyword)cAlternatives_2_1_3_0.eContents().get(4);
		private final Alternatives cAlternatives_2_1_3_1 = (Alternatives)cGroup_2_1_3.eContents().get(1);
		private final Assignment cLabel2Assignment_2_1_3_1_0 = (Assignment)cAlternatives_2_1_3_1.eContents().get(0);
		private final RuleCall cLabel2IDTerminalRuleCall_2_1_3_1_0_0 = (RuleCall)cLabel2Assignment_2_1_3_1_0.eContents().get(0);
		private final Assignment cNumAssignment_2_1_3_1_1 = (Assignment)cAlternatives_2_1_3_1.eContents().get(1);
		private final RuleCall cNumMyINTParserRuleCall_2_1_3_1_1_0 = (RuleCall)cNumAssignment_2_1_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_4 = (Keyword)cGroup_2_1.eContents().get(4);
		
		//immediate_label:
		//	literal_numeric+=literal_numeric | numeric_backward_forward+=numeric_backward_forward | "\\"? (("#" | "=" | "$" | "."
		//	| "_")? "("? (label=ID | num2=myINT) (("|" | "+" | "-" | "*" | "/")+ (label2=ID | num=myINT))* ")"?);
		@Override public ParserRule getRule() { return rule; }

		//literal_numeric+=literal_numeric | numeric_backward_forward+=numeric_backward_forward | "\\"? (("#" | "=" | "$" | "." |
		//"_")? "("? (label=ID | num2=myINT) (("|" | "+" | "-" | "*" | "/")+ (label2=ID | num=myINT))* ")"?)
		public Alternatives getAlternatives() { return cAlternatives; }

		//literal_numeric+=literal_numeric
		public Assignment getLiteral_numericAssignment_0() { return cLiteral_numericAssignment_0; }

		//literal_numeric
		public RuleCall getLiteral_numericLiteral_numericParserRuleCall_0_0() { return cLiteral_numericLiteral_numericParserRuleCall_0_0; }

		//numeric_backward_forward+=numeric_backward_forward
		public Assignment getNumeric_backward_forwardAssignment_1() { return cNumeric_backward_forwardAssignment_1; }

		//numeric_backward_forward
		public RuleCall getNumeric_backward_forwardNumeric_backward_forwardParserRuleCall_1_0() { return cNumeric_backward_forwardNumeric_backward_forwardParserRuleCall_1_0; }

		//"\\"? (("#" | "=" | "$" | "." | "_")? "("? (label=ID | num2=myINT) (("|" | "+" | "-" | "*" | "/")+ (label2=ID |
		//num=myINT))* ")"?)
		public Group getGroup_2() { return cGroup_2; }

		//"\\"?
		public Keyword getReverseSolidusKeyword_2_0() { return cReverseSolidusKeyword_2_0; }

		//("#" | "=" | "$" | "." | "_")? "("? (label=ID | num2=myINT) (("|" | "+" | "-" | "*" | "/")+ (label2=ID | num=myINT))*
		//")"?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//("#" | "=" | "$" | "." | "_")?
		public Alternatives getAlternatives_2_1_0() { return cAlternatives_2_1_0; }

		//"#"
		public Keyword getNumberSignKeyword_2_1_0_0() { return cNumberSignKeyword_2_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_0_1() { return cEqualsSignKeyword_2_1_0_1; }

		//"$"
		public Keyword getDollarSignKeyword_2_1_0_2() { return cDollarSignKeyword_2_1_0_2; }

		//"."
		public Keyword getFullStopKeyword_2_1_0_3() { return cFullStopKeyword_2_1_0_3; }

		//"_"
		public Keyword get_Keyword_2_1_0_4() { return c_Keyword_2_1_0_4; }

		//"("?
		public Keyword getLeftParenthesisKeyword_2_1_1() { return cLeftParenthesisKeyword_2_1_1; }

		//label=ID | num2=myINT
		public Alternatives getAlternatives_2_1_2() { return cAlternatives_2_1_2; }

		//label=ID
		public Assignment getLabelAssignment_2_1_2_0() { return cLabelAssignment_2_1_2_0; }

		//ID
		public RuleCall getLabelIDTerminalRuleCall_2_1_2_0_0() { return cLabelIDTerminalRuleCall_2_1_2_0_0; }

		//num2=myINT
		public Assignment getNum2Assignment_2_1_2_1() { return cNum2Assignment_2_1_2_1; }

		//myINT
		public RuleCall getNum2MyINTParserRuleCall_2_1_2_1_0() { return cNum2MyINTParserRuleCall_2_1_2_1_0; }

		//(("|" | "+" | "-" | "*" | "/")+ (label2=ID | num=myINT))*
		public Group getGroup_2_1_3() { return cGroup_2_1_3; }

		//("|" | "+" | "-" | "*" | "/")+
		public Alternatives getAlternatives_2_1_3_0() { return cAlternatives_2_1_3_0; }

		//"|"
		public Keyword getVerticalLineKeyword_2_1_3_0_0() { return cVerticalLineKeyword_2_1_3_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_2_1_3_0_1() { return cPlusSignKeyword_2_1_3_0_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_2_1_3_0_2() { return cHyphenMinusKeyword_2_1_3_0_2; }

		//"*"
		public Keyword getAsteriskKeyword_2_1_3_0_3() { return cAsteriskKeyword_2_1_3_0_3; }

		//"/"
		public Keyword getSolidusKeyword_2_1_3_0_4() { return cSolidusKeyword_2_1_3_0_4; }

		//label2=ID | num=myINT
		public Alternatives getAlternatives_2_1_3_1() { return cAlternatives_2_1_3_1; }

		//label2=ID
		public Assignment getLabel2Assignment_2_1_3_1_0() { return cLabel2Assignment_2_1_3_1_0; }

		//ID
		public RuleCall getLabel2IDTerminalRuleCall_2_1_3_1_0_0() { return cLabel2IDTerminalRuleCall_2_1_3_1_0_0; }

		//num=myINT
		public Assignment getNumAssignment_2_1_3_1_1() { return cNumAssignment_2_1_3_1_1; }

		//myINT
		public RuleCall getNumMyINTParserRuleCall_2_1_3_1_1_0() { return cNumMyINTParserRuleCall_2_1_3_1_1_0; }

		//")"?
		public Keyword getRightParenthesisKeyword_2_1_4() { return cRightParenthesisKeyword_2_1_4; }
	}

	public class DescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "description");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPercentSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cNumberSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIntAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cIntMyINTParserRuleCall_1_0_0 = (RuleCall)cIntAssignment_1_0.eContents().get(0);
		private final Assignment cStringAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cStringAssignment_1_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cDescriptionIDTerminalRuleCall_1_2_0 = (RuleCall)cDescriptionAssignment_1_2.eContents().get(0);
		
		//description:
		//	("%" | "#")? (int+=myINT | string+=STRING | description+=ID);
		@Override public ParserRule getRule() { return rule; }

		//("%" | "#")? (int+=myINT | string+=STRING | description+=ID)
		public Group getGroup() { return cGroup; }

		//("%" | "#")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"%"
		public Keyword getPercentSignKeyword_0_0() { return cPercentSignKeyword_0_0; }

		//"#"
		public Keyword getNumberSignKeyword_0_1() { return cNumberSignKeyword_0_1; }

		//int+=myINT | string+=STRING | description+=ID
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//int+=myINT
		public Assignment getIntAssignment_1_0() { return cIntAssignment_1_0; }

		//myINT
		public RuleCall getIntMyINTParserRuleCall_1_0_0() { return cIntMyINTParserRuleCall_1_0_0; }

		//string+=STRING
		public Assignment getStringAssignment_1_1() { return cStringAssignment_1_1; }

		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_1_0() { return cStringSTRINGTerminalRuleCall_1_1_0; }

		//description+=ID
		public Assignment getDescriptionAssignment_1_2() { return cDescriptionAssignment_1_2; }

		//ID
		public RuleCall getDescriptionIDTerminalRuleCall_1_2_0() { return cDescriptionIDTerminalRuleCall_1_2_0; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cNumberSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cDollarSignKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cFullStopKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Keyword c_Keyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final Keyword cPlusSignKeyword_0_6 = (Keyword)cAlternatives_0.eContents().get(6);
		private final Keyword cHyphenMinusKeyword_0_7 = (Keyword)cAlternatives_0.eContents().get(7);
		private final Keyword cAsteriskKeyword_0_8 = (Keyword)cAlternatives_0.eContents().get(8);
		private final Keyword cSolidusKeyword_0_9 = (Keyword)cAlternatives_0.eContents().get(9);
		private final Keyword cAmpersandKeyword_0_10 = (Keyword)cAlternatives_0.eContents().get(10);
		private final Keyword cReverseSolidusKeyword_0_11 = (Keyword)cAlternatives_0.eContents().get(11);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cVariableIntAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cVariableIntMyINTParserRuleCall_1_0_0 = (RuleCall)cVariableIntAssignment_1_0.eContents().get(0);
		private final Assignment cVariableABCAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cVariableABCIDTerminalRuleCall_1_1_0 = (RuleCall)cVariableABCAssignment_1_1.eContents().get(0);
		private final Assignment cVariableStringAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cVariableStringSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cVariableStringAssignment_1_2.eContents().get(0);
		private final Assignment cVariableHexAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cVariableHexHEXTerminalRuleCall_1_3_0 = (RuleCall)cVariableHexAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//variable:
		//	("(" | "#" | "=" | "$" | "." | "_" | "+" | "-" | "*" | "/" | "&" | "\\")* (variableInt=myINT | variableABC=ID |
		//	variableString=STRING | variableHex=HEX) ")"?;
		@Override public ParserRule getRule() { return rule; }

		//("(" | "#" | "=" | "$" | "." | "_" | "+" | "-" | "*" | "/" | "&" | "\\")* (variableInt=myINT | variableABC=ID |
		//variableString=STRING | variableHex=HEX) ")"?
		public Group getGroup() { return cGroup; }

		//("(" | "#" | "=" | "$" | "." | "_" | "+" | "-" | "*" | "/" | "&" | "\\")*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//"#"
		public Keyword getNumberSignKeyword_0_1() { return cNumberSignKeyword_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//"$"
		public Keyword getDollarSignKeyword_0_3() { return cDollarSignKeyword_0_3; }

		//"."
		public Keyword getFullStopKeyword_0_4() { return cFullStopKeyword_0_4; }

		//"_"
		public Keyword get_Keyword_0_5() { return c_Keyword_0_5; }

		//"+"
		public Keyword getPlusSignKeyword_0_6() { return cPlusSignKeyword_0_6; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_7() { return cHyphenMinusKeyword_0_7; }

		//"*"
		public Keyword getAsteriskKeyword_0_8() { return cAsteriskKeyword_0_8; }

		//"/"
		public Keyword getSolidusKeyword_0_9() { return cSolidusKeyword_0_9; }

		//"&"
		public Keyword getAmpersandKeyword_0_10() { return cAmpersandKeyword_0_10; }

		//"\\"
		public Keyword getReverseSolidusKeyword_0_11() { return cReverseSolidusKeyword_0_11; }

		//variableInt=myINT | variableABC=ID | variableString=STRING | variableHex=HEX
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//variableInt=myINT
		public Assignment getVariableIntAssignment_1_0() { return cVariableIntAssignment_1_0; }

		//myINT
		public RuleCall getVariableIntMyINTParserRuleCall_1_0_0() { return cVariableIntMyINTParserRuleCall_1_0_0; }

		//variableABC=ID
		public Assignment getVariableABCAssignment_1_1() { return cVariableABCAssignment_1_1; }

		//ID
		public RuleCall getVariableABCIDTerminalRuleCall_1_1_0() { return cVariableABCIDTerminalRuleCall_1_1_0; }

		//variableString=STRING
		public Assignment getVariableStringAssignment_1_2() { return cVariableStringAssignment_1_2; }

		//STRING
		public RuleCall getVariableStringSTRINGTerminalRuleCall_1_2_0() { return cVariableStringSTRINGTerminalRuleCall_1_2_0; }

		//variableHex=HEX
		public Assignment getVariableHexAssignment_1_3() { return cVariableHexAssignment_1_3; }

		//HEX
		public RuleCall getVariableHexHEXTerminalRuleCall_1_3_0() { return cVariableHexHEXTerminalRuleCall_1_3_0; }

		//")"?
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cNumberSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cDollarSignKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cFullStopKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Keyword c_Keyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final Keyword cPlusSignKeyword_0_6 = (Keyword)cAlternatives_0.eContents().get(6);
		private final Keyword cHyphenMinusKeyword_0_7 = (Keyword)cAlternatives_0.eContents().get(7);
		private final Keyword cAsteriskKeyword_0_8 = (Keyword)cAlternatives_0.eContents().get(8);
		private final Keyword cSolidusKeyword_0_9 = (Keyword)cAlternatives_0.eContents().get(9);
		private final Keyword cAmpersandKeyword_0_10 = (Keyword)cAlternatives_0.eContents().get(10);
		private final Keyword cColonKeyword_0_11 = (Keyword)cAlternatives_0.eContents().get(11);
		private final Keyword cReverseSolidusKeyword_0_12 = (Keyword)cAlternatives_0.eContents().get(12);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cVariableIntAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cVariableIntMyINTParserRuleCall_1_0_0 = (RuleCall)cVariableIntAssignment_1_0.eContents().get(0);
		private final Assignment cVariableABCAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cVariableABCIDTerminalRuleCall_1_1_0 = (RuleCall)cVariableABCAssignment_1_1.eContents().get(0);
		private final Assignment cVariableStringAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cVariableStringSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cVariableStringAssignment_1_2.eContents().get(0);
		private final Assignment cVariableHexAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cVariableHexHEXTerminalRuleCall_1_3_0 = (RuleCall)cVariableHexAssignment_1_3.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Alternatives cAlternatives_2_1_1 = (Alternatives)cGroup_2_1.eContents().get(1);
		private final Assignment cDefIntAssignment_2_1_1_0 = (Assignment)cAlternatives_2_1_1.eContents().get(0);
		private final RuleCall cDefIntMyINTParserRuleCall_2_1_1_0_0 = (RuleCall)cDefIntAssignment_2_1_1_0.eContents().get(0);
		private final Assignment cDefABCAssignment_2_1_1_1 = (Assignment)cAlternatives_2_1_1.eContents().get(1);
		private final RuleCall cDefABCIDTerminalRuleCall_2_1_1_1_0 = (RuleCall)cDefABCAssignment_2_1_1_1.eContents().get(0);
		private final Assignment cDefStringAssignment_2_1_1_2 = (Assignment)cAlternatives_2_1_1.eContents().get(2);
		private final RuleCall cDefStringSTRINGTerminalRuleCall_2_1_1_2_0 = (RuleCall)cDefStringAssignment_2_1_1_2.eContents().get(0);
		private final Assignment cDefHexAssignment_2_1_1_3 = (Assignment)cAlternatives_2_1_1.eContents().get(3);
		private final RuleCall cDefHexHEXTerminalRuleCall_2_1_1_3_0 = (RuleCall)cDefHexAssignment_2_1_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//definition:
		//	("(" | "#" | "=" | "$" | "." | "_" | "+" | "-" | "*" | "/" | "&" | ":" | "\\")* (variableInt=myINT | variableABC=ID |
		//	variableString=STRING | variableHex=HEX) (":" | "=" (defInt=myINT | defABC=ID | defString=STRING | defHex=HEX))? ")"?;
		@Override public ParserRule getRule() { return rule; }

		//("(" | "#" | "=" | "$" | "." | "_" | "+" | "-" | "*" | "/" | "&" | ":" | "\\")* (variableInt=myINT | variableABC=ID |
		//variableString=STRING | variableHex=HEX) (":" | "=" (defInt=myINT | defABC=ID | defString=STRING | defHex=HEX))? ")"?
		public Group getGroup() { return cGroup; }

		//("(" | "#" | "=" | "$" | "." | "_" | "+" | "-" | "*" | "/" | "&" | ":" | "\\")*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//"#"
		public Keyword getNumberSignKeyword_0_1() { return cNumberSignKeyword_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//"$"
		public Keyword getDollarSignKeyword_0_3() { return cDollarSignKeyword_0_3; }

		//"."
		public Keyword getFullStopKeyword_0_4() { return cFullStopKeyword_0_4; }

		//"_"
		public Keyword get_Keyword_0_5() { return c_Keyword_0_5; }

		//"+"
		public Keyword getPlusSignKeyword_0_6() { return cPlusSignKeyword_0_6; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_7() { return cHyphenMinusKeyword_0_7; }

		//"*"
		public Keyword getAsteriskKeyword_0_8() { return cAsteriskKeyword_0_8; }

		//"/"
		public Keyword getSolidusKeyword_0_9() { return cSolidusKeyword_0_9; }

		//"&"
		public Keyword getAmpersandKeyword_0_10() { return cAmpersandKeyword_0_10; }

		//":"
		public Keyword getColonKeyword_0_11() { return cColonKeyword_0_11; }

		//"\\"
		public Keyword getReverseSolidusKeyword_0_12() { return cReverseSolidusKeyword_0_12; }

		//variableInt=myINT | variableABC=ID | variableString=STRING | variableHex=HEX
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//variableInt=myINT
		public Assignment getVariableIntAssignment_1_0() { return cVariableIntAssignment_1_0; }

		//myINT
		public RuleCall getVariableIntMyINTParserRuleCall_1_0_0() { return cVariableIntMyINTParserRuleCall_1_0_0; }

		//variableABC=ID
		public Assignment getVariableABCAssignment_1_1() { return cVariableABCAssignment_1_1; }

		//ID
		public RuleCall getVariableABCIDTerminalRuleCall_1_1_0() { return cVariableABCIDTerminalRuleCall_1_1_0; }

		//variableString=STRING
		public Assignment getVariableStringAssignment_1_2() { return cVariableStringAssignment_1_2; }

		//STRING
		public RuleCall getVariableStringSTRINGTerminalRuleCall_1_2_0() { return cVariableStringSTRINGTerminalRuleCall_1_2_0; }

		//variableHex=HEX
		public Assignment getVariableHexAssignment_1_3() { return cVariableHexAssignment_1_3; }

		//HEX
		public RuleCall getVariableHexHEXTerminalRuleCall_1_3_0() { return cVariableHexHEXTerminalRuleCall_1_3_0; }

		//(":" | "=" (defInt=myINT | defABC=ID | defString=STRING | defHex=HEX))?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//"=" (defInt=myINT | defABC=ID | defString=STRING | defHex=HEX)
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_0() { return cEqualsSignKeyword_2_1_0; }

		//defInt=myINT | defABC=ID | defString=STRING | defHex=HEX
		public Alternatives getAlternatives_2_1_1() { return cAlternatives_2_1_1; }

		//defInt=myINT
		public Assignment getDefIntAssignment_2_1_1_0() { return cDefIntAssignment_2_1_1_0; }

		//myINT
		public RuleCall getDefIntMyINTParserRuleCall_2_1_1_0_0() { return cDefIntMyINTParserRuleCall_2_1_1_0_0; }

		//defABC=ID
		public Assignment getDefABCAssignment_2_1_1_1() { return cDefABCAssignment_2_1_1_1; }

		//ID
		public RuleCall getDefABCIDTerminalRuleCall_2_1_1_1_0() { return cDefABCIDTerminalRuleCall_2_1_1_1_0; }

		//defString=STRING
		public Assignment getDefStringAssignment_2_1_1_2() { return cDefStringAssignment_2_1_1_2; }

		//STRING
		public RuleCall getDefStringSTRINGTerminalRuleCall_2_1_1_2_0() { return cDefStringSTRINGTerminalRuleCall_2_1_1_2_0; }

		//defHex=HEX
		public Assignment getDefHexAssignment_2_1_1_3() { return cDefHexAssignment_2_1_1_3; }

		//HEX
		public RuleCall getDefHexHEXTerminalRuleCall_2_1_1_3_0() { return cDefHexHEXTerminalRuleCall_2_1_1_3_0; }

		//")"?
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class RandomEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "randomEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cNumberSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cDollarSignKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cFullStopKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword c_Keyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Keyword cPlusSignKeyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final Keyword cHyphenMinusKeyword_0_6 = (Keyword)cAlternatives_0.eContents().get(6);
		private final Keyword cAmpersandKeyword_0_7 = (Keyword)cAlternatives_0.eContents().get(7);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cEntryIntAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cEntryIntMyINTParserRuleCall_1_0_0 = (RuleCall)cEntryIntAssignment_1_0.eContents().get(0);
		private final Assignment cEntryABCAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cEntryABCIDTerminalRuleCall_1_1_0 = (RuleCall)cEntryABCAssignment_1_1.eContents().get(0);
		private final Assignment cEntryStringAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cEntryStringSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cEntryStringAssignment_1_2.eContents().get(0);
		private final Assignment cEntryHexAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cEntryHexHEXTerminalRuleCall_1_3_0 = (RuleCall)cEntryHexAssignment_1_3.eContents().get(0);
		
		//randomEntry:
		//	("#" | "=" | "$" | "." | "_" | "+" | "-" | "&")* (entryInt=myINT | entryABC=ID | entryString=STRING | entryHex=HEX);
		@Override public ParserRule getRule() { return rule; }

		//("#" | "=" | "$" | "." | "_" | "+" | "-" | "&")* (entryInt=myINT | entryABC=ID | entryString=STRING | entryHex=HEX)
		public Group getGroup() { return cGroup; }

		//("#" | "=" | "$" | "." | "_" | "+" | "-" | "&")*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"#"
		public Keyword getNumberSignKeyword_0_0() { return cNumberSignKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//"$"
		public Keyword getDollarSignKeyword_0_2() { return cDollarSignKeyword_0_2; }

		//"."
		public Keyword getFullStopKeyword_0_3() { return cFullStopKeyword_0_3; }

		//"_"
		public Keyword get_Keyword_0_4() { return c_Keyword_0_4; }

		//"+"
		public Keyword getPlusSignKeyword_0_5() { return cPlusSignKeyword_0_5; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_6() { return cHyphenMinusKeyword_0_6; }

		//"&"
		public Keyword getAmpersandKeyword_0_7() { return cAmpersandKeyword_0_7; }

		//entryInt=myINT | entryABC=ID | entryString=STRING | entryHex=HEX
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//entryInt=myINT
		public Assignment getEntryIntAssignment_1_0() { return cEntryIntAssignment_1_0; }

		//myINT
		public RuleCall getEntryIntMyINTParserRuleCall_1_0_0() { return cEntryIntMyINTParserRuleCall_1_0_0; }

		//entryABC=ID
		public Assignment getEntryABCAssignment_1_1() { return cEntryABCAssignment_1_1; }

		//ID
		public RuleCall getEntryABCIDTerminalRuleCall_1_1_0() { return cEntryABCIDTerminalRuleCall_1_1_0; }

		//entryString=STRING
		public Assignment getEntryStringAssignment_1_2() { return cEntryStringAssignment_1_2; }

		//STRING
		public RuleCall getEntryStringSTRINGTerminalRuleCall_1_2_0() { return cEntryStringSTRINGTerminalRuleCall_1_2_0; }

		//entryHex=HEX
		public Assignment getEntryHexAssignment_1_3() { return cEntryHexAssignment_1_3; }

		//HEX
		public RuleCall getEntryHexHEXTerminalRuleCall_1_3_0() { return cEntryHexHEXTerminalRuleCall_1_3_0; }
	}

	public class Rs_shElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rs_sh");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cREGISTERParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cBAREL_SHIFT_REGISTERParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cImmediate_labelAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cImmediate_labelImmediate_labelParserRuleCall_1_1_0 = (RuleCall)cImmediate_labelAssignment_1_1.eContents().get(0);
		
		//rs_sh:
		//	REGISTER | BAREL_SHIFT_REGISTER? immediate_label+=immediate_label;
		@Override public ParserRule getRule() { return rule; }

		//REGISTER | BAREL_SHIFT_REGISTER? immediate_label+=immediate_label
		public Alternatives getAlternatives() { return cAlternatives; }

		//REGISTER
		public RuleCall getREGISTERParserRuleCall_0() { return cREGISTERParserRuleCall_0; }

		//BAREL_SHIFT_REGISTER? immediate_label+=immediate_label
		public Group getGroup_1() { return cGroup_1; }

		//BAREL_SHIFT_REGISTER?
		public RuleCall getBAREL_SHIFT_REGISTERParserRuleCall_1_0() { return cBAREL_SHIFT_REGISTERParserRuleCall_1_0; }

		//immediate_label+=immediate_label
		public Assignment getImmediate_labelAssignment_1_1() { return cImmediate_labelAssignment_1_1; }

		//immediate_label
		public RuleCall getImmediate_labelImmediate_labelParserRuleCall_1_1_0() { return cImmediate_labelImmediate_labelParserRuleCall_1_1_0; }
	}

	public class Flexible_offsetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "flexible_offset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cNumberSignKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Assignment cExprAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cExprMyINTParserRuleCall_1_0_0_1_0 = (RuleCall)cExprAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cNumberSignKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cExpr2Assignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cExpr2IDTerminalRuleCall_1_0_1_1_0 = (RuleCall)cExpr2Assignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1_0_0 = (Keyword)cAlternatives_1_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1_0_1 = (Keyword)cAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRegisterAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRegisterREGISTERParserRuleCall_1_1_1_0 = (RuleCall)cRegisterAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cBAREL_SHIFT_REGISTERAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cBAREL_SHIFT_REGISTERBAREL_SHIFT_REGISTERParserRuleCall_1_1_2_1_0 = (RuleCall)cBAREL_SHIFT_REGISTERAssignment_1_1_2_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_2_2 = (Alternatives)cGroup_1_1_2.eContents().get(2);
		private final Assignment cImmediate_labelAssignment_1_1_2_2_0 = (Assignment)cAlternatives_1_1_2_2.eContents().get(0);
		private final RuleCall cImmediate_labelImmediate_labelParserRuleCall_1_1_2_2_0_0 = (RuleCall)cImmediate_labelAssignment_1_1_2_2_0.eContents().get(0);
		private final Assignment cNumAssignment_1_1_2_2_1 = (Assignment)cAlternatives_1_1_2_2.eContents().get(1);
		private final RuleCall cNumMyINTParserRuleCall_1_1_2_2_1_0 = (RuleCall)cNumAssignment_1_1_2_2_1.eContents().get(0);
		
		//flexible_offset:
		//	"," (("#" expr=myINT | "#" expr2=ID) | ("-" | "+")? register+=REGISTER ("," BAREL_SHIFT_REGISTER+=BAREL_SHIFT_REGISTER
		//	(immediate_label+=immediate_label | num=myINT))?);
		@Override public ParserRule getRule() { return rule; }

		//"," (("#" expr=myINT | "#" expr2=ID) | ("-" | "+")? register+=REGISTER ("," BAREL_SHIFT_REGISTER+=BAREL_SHIFT_REGISTER
		//(immediate_label+=immediate_label | num=myINT))?)
		public Group getGroup() { return cGroup; }

		//","
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }

		//("#" expr=myINT | "#" expr2=ID) | ("-" | "+")? register+=REGISTER ("," BAREL_SHIFT_REGISTER+=BAREL_SHIFT_REGISTER
		//(immediate_label+=immediate_label | num=myINT))?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"#" expr=myINT | "#" expr2=ID
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"#" expr=myINT
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//"#"
		public Keyword getNumberSignKeyword_1_0_0_0() { return cNumberSignKeyword_1_0_0_0; }

		//expr=myINT
		public Assignment getExprAssignment_1_0_0_1() { return cExprAssignment_1_0_0_1; }

		//myINT
		public RuleCall getExprMyINTParserRuleCall_1_0_0_1_0() { return cExprMyINTParserRuleCall_1_0_0_1_0; }

		//"#" expr2=ID
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//"#"
		public Keyword getNumberSignKeyword_1_0_1_0() { return cNumberSignKeyword_1_0_1_0; }

		//expr2=ID
		public Assignment getExpr2Assignment_1_0_1_1() { return cExpr2Assignment_1_0_1_1; }

		//ID
		public RuleCall getExpr2IDTerminalRuleCall_1_0_1_1_0() { return cExpr2IDTerminalRuleCall_1_0_1_1_0; }

		//("-" | "+")? register+=REGISTER ("," BAREL_SHIFT_REGISTER+=BAREL_SHIFT_REGISTER (immediate_label+=immediate_label |
		//num=myINT))?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//("-" | "+")?
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_1_0_0() { return cHyphenMinusKeyword_1_1_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_1_0_1() { return cPlusSignKeyword_1_1_0_1; }

		//register+=REGISTER
		public Assignment getRegisterAssignment_1_1_1() { return cRegisterAssignment_1_1_1; }

		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_1_1_1_0() { return cRegisterREGISTERParserRuleCall_1_1_1_0; }

		//("," BAREL_SHIFT_REGISTER+=BAREL_SHIFT_REGISTER (immediate_label+=immediate_label | num=myINT))?
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//","
		public Keyword getCommaKeyword_1_1_2_0() { return cCommaKeyword_1_1_2_0; }

		//BAREL_SHIFT_REGISTER+=BAREL_SHIFT_REGISTER
		public Assignment getBAREL_SHIFT_REGISTERAssignment_1_1_2_1() { return cBAREL_SHIFT_REGISTERAssignment_1_1_2_1; }

		//BAREL_SHIFT_REGISTER
		public RuleCall getBAREL_SHIFT_REGISTERBAREL_SHIFT_REGISTERParserRuleCall_1_1_2_1_0() { return cBAREL_SHIFT_REGISTERBAREL_SHIFT_REGISTERParserRuleCall_1_1_2_1_0; }

		//immediate_label+=immediate_label | num=myINT
		public Alternatives getAlternatives_1_1_2_2() { return cAlternatives_1_1_2_2; }

		//immediate_label+=immediate_label
		public Assignment getImmediate_labelAssignment_1_1_2_2_0() { return cImmediate_labelAssignment_1_1_2_2_0; }

		//immediate_label
		public RuleCall getImmediate_labelImmediate_labelParserRuleCall_1_1_2_2_0_0() { return cImmediate_labelImmediate_labelParserRuleCall_1_1_2_2_0_0; }

		//num=myINT
		public Assignment getNumAssignment_1_1_2_2_1() { return cNumAssignment_1_1_2_2_1; }

		//myINT
		public RuleCall getNumMyINTParserRuleCall_1_1_2_2_1_0() { return cNumMyINTParserRuleCall_1_1_2_2_1_0; }
	}

	public class Literal_numericElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "literal_numeric");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cHexAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cHexHEXTerminalRuleCall_0_0 = (RuleCall)cHexAssignment_0.eContents().get(0);
		private final Assignment cIntAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIntPLUS_MINUS_INTTerminalRuleCall_1_0 = (RuleCall)cIntAssignment_1.eContents().get(0);
		
		//literal_numeric:
		//	hex=HEX | int=PLUS_MINUS_INT;
		@Override public ParserRule getRule() { return rule; }

		//hex=HEX | int=PLUS_MINUS_INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//hex=HEX
		public Assignment getHexAssignment_0() { return cHexAssignment_0; }

		//HEX
		public RuleCall getHexHEXTerminalRuleCall_0_0() { return cHexHEXTerminalRuleCall_0_0; }

		//int=PLUS_MINUS_INT
		public Assignment getIntAssignment_1() { return cIntAssignment_1; }

		//PLUS_MINUS_INT
		public RuleCall getIntPLUS_MINUS_INTTerminalRuleCall_1_0() { return cIntPLUS_MINUS_INTTerminalRuleCall_1_0; }
	}

	public class Numeric_backward_forwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "numeric_backward_forward");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cHexAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cHexHEXTerminalRuleCall_0_0 = (RuleCall)cHexAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIntAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIntMyINTParserRuleCall_1_0_0 = (RuleCall)cIntAssignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cFKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cFKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Keyword cBKeyword_1_1_2 = (Keyword)cAlternatives_1_1.eContents().get(2);
		private final Keyword cBKeyword_1_1_3 = (Keyword)cAlternatives_1_1.eContents().get(3);
		
		//numeric_backward_forward:
		//	hex=HEX | int=myINT ("f" | "F" | "b" | "B")?;
		@Override public ParserRule getRule() { return rule; }

		//hex=HEX | int=myINT ("f" | "F" | "b" | "B")?
		public Alternatives getAlternatives() { return cAlternatives; }

		//hex=HEX
		public Assignment getHexAssignment_0() { return cHexAssignment_0; }

		//HEX
		public RuleCall getHexHEXTerminalRuleCall_0_0() { return cHexHEXTerminalRuleCall_0_0; }

		//int=myINT ("f" | "F" | "b" | "B")?
		public Group getGroup_1() { return cGroup_1; }

		//int=myINT
		public Assignment getIntAssignment_1_0() { return cIntAssignment_1_0; }

		//myINT
		public RuleCall getIntMyINTParserRuleCall_1_0_0() { return cIntMyINTParserRuleCall_1_0_0; }

		//("f" | "F" | "b" | "B")?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"f"
		public Keyword getFKeyword_1_1_0() { return cFKeyword_1_1_0; }

		//"F"
		public Keyword getFKeyword_1_1_1() { return cFKeyword_1_1_1; }

		//"b"
		public Keyword getBKeyword_1_1_2() { return cBKeyword_1_1_2; }

		//"B"
		public Keyword getBKeyword_1_1_3() { return cBKeyword_1_1_3; }
	}

	public class MyINTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myINT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cDigitOneDigitSixKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDigitThreeDigitTwoKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//myINT:
		//	INT | "16" | "32";
		@Override public ParserRule getRule() { return rule; }

		//INT | "16" | "32"
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"16"
		public Keyword getDigitOneDigitSixKeyword_1() { return cDigitOneDigitSixKeyword_1; }

		//"32"
		public Keyword getDigitThreeDigitTwoKeyword_2() { return cDigitThreeDigitTwoKeyword_2; }
	}
	
	
	private final ModelElements pModel;
	private final ARMInstrElements pARMInstr;
	private final OperationInstrElements pOperationInstr;
	private final CcodeElements pCcode;
	private final Variable_variableElements pVariable_variable;
	private final Variable_colonElements pVariable_colon;
	private final Label_keywordElements pLabel_keyword;
	private final Add_sub_instrElements pAdd_sub_instr;
	private final Adrl_adr_instrElements pAdrl_adr_instr;
	private final Mul_3R_instrElements pMul_3R_instr;
	private final Mul_4R_instrElements pMul_4R_instr;
	private final Mov_instrElements pMov_instr;
	private final Shift_instrElements pShift_instr;
	private final Clz_instrElements pClz_instr;
	private final Compare_test_instrElements pCompare_test_instr;
	private final Logical_instrElements pLogical_instr;
	private final Branch_instrElements pBranch_instr;
	private final Mrs_instrElements pMrs_instr;
	private final Msr_instrElements pMsr_instr;
	private final Ldr_str_irpre_instrElements pLdr_str_irpre_instr;
	private final Ldr_str_spre_instrElements pLdr_str_spre_instr;
	private final Ldr_str_irpsot_instrElements pLdr_str_irpsot_instr;
	private final Ldr_str_rpost_instrElements pLdr_str_rpost_instr;
	private final Ldm_instrElements pLdm_instr;
	private final Push_pop_instrElements pPush_pop_instr;
	private final Bkpt_instrElements pBkpt_instr;
	private final Swp_instrElements pSwp_instr;
	private final Svc_instrElements pSvc_instr;
	private final ADD_OPElements pADD_OP;
	private final ADC_OPElements pADC_OP;
	private final ADR_OPElements pADR_OP;
	private final SUB_OPElements pSUB_OP;
	private final SBC_OPElements pSBC_OP;
	private final RSB_OPElements pRSB_OP;
	private final RSC_OPElements pRSC_OP;
	private final ADRL_OPElements pADRL_OP;
	private final MUL_OPElements pMUL_OP;
	private final MLS_OPElements pMLS_OP;
	private final MLA_OPElements pMLA_OP;
	private final UMULL_OPElements pUMULL_OP;
	private final UMLAL_OPElements pUMLAL_OP;
	private final SMULL_OPElements pSMULL_OP;
	private final SMLAL_OPElements pSMLAL_OP;
	private final SMUL_OPElements pSMUL_OP;
	private final SMULW_OPElements pSMULW_OP;
	private final SMLA_OPElements pSMLA_OP;
	private final SMLAW_OPElements pSMLAW_OP;
	private final MOV_OPElements pMOV_OP;
	private final MVN_OPElements pMVN_OP;
	private final ASR_OPElements pASR_OP;
	private final LSL_OPElements pLSL_OP;
	private final LSR_OPElements pLSR_OP;
	private final ROR_OPElements pROR_OP;
	private final RRX_OPElements pRRX_OP;
	private final CLZ_OPElements pCLZ_OP;
	private final CMP_OPElements pCMP_OP;
	private final CMN_OPElements pCMN_OP;
	private final TST_OPElements pTST_OP;
	private final TEQ_OPElements pTEQ_OP;
	private final AND_OPElements pAND_OP;
	private final EOR_OPElements pEOR_OP;
	private final ORR_OPElements pORR_OP;
	private final ORN_OPElements pORN_OP;
	private final BIC_OPElements pBIC_OP;
	private final B_OPElements pB_OP;
	private final BL_OPElements pBL_OP;
	private final BX_OPElements pBX_OP;
	private final BLX_OPElements pBLX_OP;
	private final BXJ_OPElements pBXJ_OP;
	private final MRS_OPElements pMRS_OP;
	private final MSR_OPElements pMSR_OP;
	private final LDR_OPElements pLDR_OP;
	private final STR_OPElements pSTR_OP;
	private final LDM_OPElements pLDM_OP;
	private final STM_OPElements pSTM_OP;
	private final PUSH_OPElements pPUSH_OP;
	private final POP_OPElements pPOP_OP;
	private final SWP_OPElements pSWP_OP;
	private final SWPB_OPElements pSWPB_OP;
	private final SVC_OPElements pSVC_OP;
	private final PSR_FIELD_EElements pPSR_FIELD_E;
	private final APSR_FLAG_EElements pAPSR_FLAG_E;
	private final NOPElements pNOP;
	private final TerminalRule tADD_COM;
	private final TerminalRule tADC_COM;
	private final TerminalRule tADR_COM;
	private final TerminalRule tSUB_COM;
	private final TerminalRule tSBC_COM;
	private final TerminalRule tRSB_COM;
	private final TerminalRule tRSC_COM;
	private final TerminalRule tADRL_COM;
	private final TerminalRule tMUL_3R_COM;
	private final TerminalRule tMUL_4R_COM;
	private final TerminalRule tMLA_COM;
	private final TerminalRule tUMULL_COM;
	private final TerminalRule tUMLAL_COM;
	private final TerminalRule tSMULL_COM;
	private final TerminalRule tSMLAL_COM;
	private final TerminalRule tSMUL_COM;
	private final TerminalRule tSMULW_COM;
	private final TerminalRule tSMLA_COM;
	private final TerminalRule tSMLAW_COM;
	private final TerminalRule tMOV_COM;
	private final TerminalRule tMVN_COM;
	private final TerminalRule tASR_COM;
	private final TerminalRule tLSL_COM;
	private final TerminalRule tLSR_COM;
	private final TerminalRule tROR_COM;
	private final TerminalRule tRRX_COM;
	private final TerminalRule tCLZ_COM;
	private final TerminalRule tCMP_COM;
	private final TerminalRule tCMN_COM;
	private final TerminalRule tTST_COM;
	private final TerminalRule tTEQ_COM;
	private final TerminalRule tAND_COM;
	private final TerminalRule tEOR_COM;
	private final TerminalRule tORR_COM;
	private final TerminalRule tORN_COM;
	private final TerminalRule tBIC_COM;
	private final TerminalRule tB_COM;
	private final TerminalRule tBL_COM;
	private final TerminalRule tBX_COM;
	private final TerminalRule tBLX_COM;
	private final TerminalRule tBXJ_COM;
	private final TerminalRule tMRS_COM;
	private final TerminalRule tMSR_COM;
	private final TerminalRule tLDR_COM;
	private final TerminalRule tSTR_COM;
	private final TerminalRule tLDM_COM;
	private final TerminalRule tSTM_COM;
	private final TerminalRule tPUSH_COM;
	private final TerminalRule tPOP_COM;
	private final TerminalRule tSWP_COM;
	private final TerminalRule tSWPB_COM;
	private final TerminalRule tSVC_COM;
	private final TerminalRule tPSR_FIELD;
	private final TerminalRule tFIELD;
	private final TerminalRule tPSR;
	private final TerminalRule tAPSR_FLAG;
	private final TerminalRule tFLAGS;
	private final TerminalRule tXY_LABEL;
	private final TerminalRule tCONDITION_SUFFIX;
	private final TerminalRule tADDRESING_MODE;
	private final PREPROCESSORElements pPREPROCESSOR;
	private final PREPROCESSOR_DEFINEElements pPREPROCESSOR_DEFINE;
	private final PREPROCESSOR_ENDIFElements pPREPROCESSOR_ENDIF;
	private final PREPROCESSOR_ELSEElements pPREPROCESSOR_ELSE;
	private final CExtendCodeElements pCExtendCode;
	private final Assembler_Directives_equElements pAssembler_Directives_equ;
	private final Assembler_DirectivesElements pAssembler_Directives;
	private final Assembler_Directives_macroElements pAssembler_Directives_macro;
	private final Assember_Directives_typeElements pAssember_Directives_type;
	private final Assembler_Directives_endmElements pAssembler_Directives_endm;
	private final ARM_Machine_DirectivesElements pARM_Machine_Directives;
	private final ARM_MACHINE_DIRECTIVES_alignElements pARM_MACHINE_DIRECTIVES_align;
	private final ARM_Machine_Directives_codeElements pARM_Machine_Directives_code;
	private final ARM_Machine_Directives_syntaxElements pARM_Machine_Directives_syntax;
	private final ARM_Machine_Directives_saveElements pARM_Machine_Directives_save;
	private final CExtendascizElements pCExtendasciz;
	private final CLangElements pCLang;
	private final REGISTERElements pREGISTER;
	private final BAREL_SHIFT_REGISTERElements pBAREL_SHIFT_REGISTER;
	private final Operand2Elements pOperand2;
	private final OpshElements pOpsh;
	private final Immediate_labelElements pImmediate_label;
	private final DescriptionElements pDescription;
	private final VariableElements pVariable;
	private final DefinitionElements pDefinition;
	private final RandomEntryElements pRandomEntry;
	private final Rs_shElements pRs_sh;
	private final Flexible_offsetElements pFlexible_offset;
	private final Literal_numericElements pLiteral_numeric;
	private final Numeric_backward_forwardElements pNumeric_backward_forward;
	private final MyINTElements pMyINT;
	private final TerminalRule tHEX;
	private final TerminalRule tPLUS_MINUS_INT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tSTRING;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ARMGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pARMInstr = new ARMInstrElements();
		this.pOperationInstr = new OperationInstrElements();
		this.pCcode = new CcodeElements();
		this.pVariable_variable = new Variable_variableElements();
		this.pVariable_colon = new Variable_colonElements();
		this.pLabel_keyword = new Label_keywordElements();
		this.pAdd_sub_instr = new Add_sub_instrElements();
		this.pAdrl_adr_instr = new Adrl_adr_instrElements();
		this.pMul_3R_instr = new Mul_3R_instrElements();
		this.pMul_4R_instr = new Mul_4R_instrElements();
		this.pMov_instr = new Mov_instrElements();
		this.pShift_instr = new Shift_instrElements();
		this.pClz_instr = new Clz_instrElements();
		this.pCompare_test_instr = new Compare_test_instrElements();
		this.pLogical_instr = new Logical_instrElements();
		this.pBranch_instr = new Branch_instrElements();
		this.pMrs_instr = new Mrs_instrElements();
		this.pMsr_instr = new Msr_instrElements();
		this.pLdr_str_irpre_instr = new Ldr_str_irpre_instrElements();
		this.pLdr_str_spre_instr = new Ldr_str_spre_instrElements();
		this.pLdr_str_irpsot_instr = new Ldr_str_irpsot_instrElements();
		this.pLdr_str_rpost_instr = new Ldr_str_rpost_instrElements();
		this.pLdm_instr = new Ldm_instrElements();
		this.pPush_pop_instr = new Push_pop_instrElements();
		this.pBkpt_instr = new Bkpt_instrElements();
		this.pSwp_instr = new Swp_instrElements();
		this.pSvc_instr = new Svc_instrElements();
		this.pADD_OP = new ADD_OPElements();
		this.pADC_OP = new ADC_OPElements();
		this.pADR_OP = new ADR_OPElements();
		this.pSUB_OP = new SUB_OPElements();
		this.pSBC_OP = new SBC_OPElements();
		this.pRSB_OP = new RSB_OPElements();
		this.pRSC_OP = new RSC_OPElements();
		this.pADRL_OP = new ADRL_OPElements();
		this.pMUL_OP = new MUL_OPElements();
		this.pMLS_OP = new MLS_OPElements();
		this.pMLA_OP = new MLA_OPElements();
		this.pUMULL_OP = new UMULL_OPElements();
		this.pUMLAL_OP = new UMLAL_OPElements();
		this.pSMULL_OP = new SMULL_OPElements();
		this.pSMLAL_OP = new SMLAL_OPElements();
		this.pSMUL_OP = new SMUL_OPElements();
		this.pSMULW_OP = new SMULW_OPElements();
		this.pSMLA_OP = new SMLA_OPElements();
		this.pSMLAW_OP = new SMLAW_OPElements();
		this.pMOV_OP = new MOV_OPElements();
		this.pMVN_OP = new MVN_OPElements();
		this.pASR_OP = new ASR_OPElements();
		this.pLSL_OP = new LSL_OPElements();
		this.pLSR_OP = new LSR_OPElements();
		this.pROR_OP = new ROR_OPElements();
		this.pRRX_OP = new RRX_OPElements();
		this.pCLZ_OP = new CLZ_OPElements();
		this.pCMP_OP = new CMP_OPElements();
		this.pCMN_OP = new CMN_OPElements();
		this.pTST_OP = new TST_OPElements();
		this.pTEQ_OP = new TEQ_OPElements();
		this.pAND_OP = new AND_OPElements();
		this.pEOR_OP = new EOR_OPElements();
		this.pORR_OP = new ORR_OPElements();
		this.pORN_OP = new ORN_OPElements();
		this.pBIC_OP = new BIC_OPElements();
		this.pB_OP = new B_OPElements();
		this.pBL_OP = new BL_OPElements();
		this.pBX_OP = new BX_OPElements();
		this.pBLX_OP = new BLX_OPElements();
		this.pBXJ_OP = new BXJ_OPElements();
		this.pMRS_OP = new MRS_OPElements();
		this.pMSR_OP = new MSR_OPElements();
		this.pLDR_OP = new LDR_OPElements();
		this.pSTR_OP = new STR_OPElements();
		this.pLDM_OP = new LDM_OPElements();
		this.pSTM_OP = new STM_OPElements();
		this.pPUSH_OP = new PUSH_OPElements();
		this.pPOP_OP = new POP_OPElements();
		this.pSWP_OP = new SWP_OPElements();
		this.pSWPB_OP = new SWPB_OPElements();
		this.pSVC_OP = new SVC_OPElements();
		this.pPSR_FIELD_E = new PSR_FIELD_EElements();
		this.pAPSR_FLAG_E = new APSR_FLAG_EElements();
		this.pNOP = new NOPElements();
		this.tADD_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ADD_COM");
		this.tADC_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ADC_COM");
		this.tADR_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ADR_COM");
		this.tSUB_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SUB_COM");
		this.tSBC_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SBC_COM");
		this.tRSB_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RSB_COM");
		this.tRSC_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RSC_COM");
		this.tADRL_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ADRL_COM");
		this.tMUL_3R_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MUL_3R_COM");
		this.tMUL_4R_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MUL_4R_COM");
		this.tMLA_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MLA_COM");
		this.tUMULL_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UMULL_COM");
		this.tUMLAL_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UMLAL_COM");
		this.tSMULL_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SMULL_COM");
		this.tSMLAL_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SMLAL_COM");
		this.tSMUL_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SMUL_COM");
		this.tSMULW_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SMULW_COM");
		this.tSMLA_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SMLA_COM");
		this.tSMLAW_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SMLAW_COM");
		this.tMOV_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MOV_COM");
		this.tMVN_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MVN_COM");
		this.tASR_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ASR_COM");
		this.tLSL_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LSL_COM");
		this.tLSR_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LSR_COM");
		this.tROR_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ROR_COM");
		this.tRRX_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RRX_COM");
		this.tCLZ_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CLZ_COM");
		this.tCMP_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CMP_COM");
		this.tCMN_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CMN_COM");
		this.tTST_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TST_COM");
		this.tTEQ_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TEQ_COM");
		this.tAND_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AND_COM");
		this.tEOR_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EOR_COM");
		this.tORR_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ORR_COM");
		this.tORN_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ORN_COM");
		this.tBIC_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BIC_COM");
		this.tB_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "B_COM");
		this.tBL_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BL_COM");
		this.tBX_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BX_COM");
		this.tBLX_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BLX_COM");
		this.tBXJ_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BXJ_COM");
		this.tMRS_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MRS_COM");
		this.tMSR_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MSR_COM");
		this.tLDR_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LDR_COM");
		this.tSTR_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STR_COM");
		this.tLDM_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LDM_COM");
		this.tSTM_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STM_COM");
		this.tPUSH_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PUSH_COM");
		this.tPOP_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "POP_COM");
		this.tSWP_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SWP_COM");
		this.tSWPB_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SWPB_COM");
		this.tSVC_COM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SVC_COM");
		this.tPSR_FIELD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PSR_FIELD");
		this.tFIELD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FIELD");
		this.tPSR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PSR");
		this.tAPSR_FLAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "APSR_FLAG");
		this.tFLAGS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLAGS");
		this.tXY_LABEL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XY_LABEL");
		this.tCONDITION_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CONDITION_SUFFIX");
		this.tADDRESING_MODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ADDRESING_MODE");
		this.pPREPROCESSOR = new PREPROCESSORElements();
		this.pPREPROCESSOR_DEFINE = new PREPROCESSOR_DEFINEElements();
		this.pPREPROCESSOR_ENDIF = new PREPROCESSOR_ENDIFElements();
		this.pPREPROCESSOR_ELSE = new PREPROCESSOR_ELSEElements();
		this.pCExtendCode = new CExtendCodeElements();
		this.pAssembler_Directives_equ = new Assembler_Directives_equElements();
		this.pAssembler_Directives = new Assembler_DirectivesElements();
		this.pAssembler_Directives_macro = new Assembler_Directives_macroElements();
		this.pAssember_Directives_type = new Assember_Directives_typeElements();
		this.pAssembler_Directives_endm = new Assembler_Directives_endmElements();
		this.pARM_Machine_Directives = new ARM_Machine_DirectivesElements();
		this.pARM_MACHINE_DIRECTIVES_align = new ARM_MACHINE_DIRECTIVES_alignElements();
		this.pARM_Machine_Directives_code = new ARM_Machine_Directives_codeElements();
		this.pARM_Machine_Directives_syntax = new ARM_Machine_Directives_syntaxElements();
		this.pARM_Machine_Directives_save = new ARM_Machine_Directives_saveElements();
		this.pCExtendasciz = new CExtendascizElements();
		this.pCLang = new CLangElements();
		this.pREGISTER = new REGISTERElements();
		this.pBAREL_SHIFT_REGISTER = new BAREL_SHIFT_REGISTERElements();
		this.pOperand2 = new Operand2Elements();
		this.pOpsh = new OpshElements();
		this.pImmediate_label = new Immediate_labelElements();
		this.pDescription = new DescriptionElements();
		this.pVariable = new VariableElements();
		this.pDefinition = new DefinitionElements();
		this.pRandomEntry = new RandomEntryElements();
		this.pRs_sh = new Rs_shElements();
		this.pFlexible_offset = new Flexible_offsetElements();
		this.pLiteral_numeric = new Literal_numericElements();
		this.pNumeric_backward_forward = new Numeric_backward_forwardElements();
		this.pMyINT = new MyINTElements();
		this.tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX");
		this.tPLUS_MINUS_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PLUS_MINUS_INT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.ARM".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	elements+=ARMInstr*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//ARMInstr:
	//	Ccode | OperationInstr;
	public ARMInstrElements getARMInstrAccess() {
		return pARMInstr;
	}
	
	public ParserRule getARMInstrRule() {
		return getARMInstrAccess().getRule();
	}

	//OperationInstr:
	//	add_sub_instr | adrl_adr_instr | mul_3R_instr | mul_4R_instr | mov_instr | shift_instr | clz_instr |
	//	compare_test_instr | logical_instr | branch_instr | mrs_instr | msr_instr | ldr_str_irpre_instr | ldr_str_spre_instr |
	//	ldr_str_irpsot_instr | ldr_str_rpost_instr | ldm_instr | push_pop_instr | bkpt_instr | svc_instr | swp_instr | NOP;
	public OperationInstrElements getOperationInstrAccess() {
		return pOperationInstr;
	}
	
	public ParserRule getOperationInstrRule() {
		return getOperationInstrAccess().getRule();
	}

	//Ccode:
	//	"\\"? PREPROCESSOR ("("? "defined"? "("? expression=variable ")"? (("||" | "&&") "defined"? "("? expression2=variable
	//	")"?)* ")"?)? | "\\"? PREPROCESSOR_DEFINE (expression=variable expression2=variable*)? | PREPROCESSOR_ENDIF |
	//	PREPROCESSOR_ELSE | CExtendCode (expression+=variable ("," ("." | expression2+=variable))*)? |
	//	Assembler_Directives_equ (expression+=variable ("," ("." | expression2+=variable))*)? | Assembler_Directives
	//	(expression=variable ("," expression2=variable)*) | Assembler_Directives_macro (expression=definition+ (","
	//	definition=definition)*) | Assember_Directives_type (expression+=variable ("," description+=description)?) |
	//	Assembler_Directives_endm | ARM_Machine_Directives (expression=variable ("," expression2=variable)*)? |
	//	ARM_MACHINE_DIRECTIVES_align (int=myINT | hex=HEX)? | ARM_Machine_Directives_code (arm?="16" | thumb?="32") |
	//	ARM_Machine_Directives_syntax ("unified" | "divided") | ARM_Machine_Directives_save "{"? reglist+=ID ("," reglist+=ID
	//	| "," reglistNum+=myINT)* "}"? | ARM_Machine_Directives_save "{"? register+=REGISTER ("," register+=REGISTER)* "}"? |
	//	CExtendasciz expression=variable? | "\\"? CLang expression=variable? | label_keyword+=label_keyword | "\\"?
	//	variable_colon | variable_variable;
	public CcodeElements getCcodeAccess() {
		return pCcode;
	}
	
	public ParserRule getCcodeRule() {
		return getCcodeAccess().getRule();
	}

	//variable_variable:
	//	variable+=variable ("," variable2+=variable)*;
	public Variable_variableElements getVariable_variableAccess() {
		return pVariable_variable;
	}
	
	public ParserRule getVariable_variableRule() {
		return getVariable_variableAccess().getRule();
	}

	//variable_colon:
	//	(variable+=ID | variableINT+=myINT) ":";
	public Variable_colonElements getVariable_colonAccess() {
		return pVariable_colon;
	}
	
	public ParserRule getVariable_colonRule() {
		return getVariable_colonAccess().getRule();
	}

	//label_keyword:
	//	label+=ID ((variable+=variable | register+=REGISTER) ("," (variable2+=variable | register+=REGISTER))*)?;
	public Label_keywordElements getLabel_keywordAccess() {
		return pLabel_keyword;
	}
	
	public ParserRule getLabel_keywordRule() {
		return getLabel_keywordAccess().getRule();
	}

	//add_sub_instr:
	//	(ADD_OP | ADC_OP | ADR_OP | SUB_OP | SBC_OP | RSB_OP | RSC_OP | ADRL_OP) (register+=REGISTER "," register+=REGISTER
	//	"," Operand2+=Operand2);
	public Add_sub_instrElements getAdd_sub_instrAccess() {
		return pAdd_sub_instr;
	}
	
	public ParserRule getAdd_sub_instrRule() {
		return getAdd_sub_instrAccess().getRule();
	}

	//adrl_adr_instr:
	//	(ADRL_OP | ADR_OP) (register+=REGISTER "," expression+=randomEntry+);
	public Adrl_adr_instrElements getAdrl_adr_instrAccess() {
		return pAdrl_adr_instr;
	}
	
	public ParserRule getAdrl_adr_instrRule() {
		return getAdrl_adr_instrAccess().getRule();
	}

	//mul_3R_instr:
	//	(MUL_OP | SMUL_OP | SMULW_OP) (register+=REGISTER "," register+=REGISTER "," register+=REGISTER);
	public Mul_3R_instrElements getMul_3R_instrAccess() {
		return pMul_3R_instr;
	}
	
	public ParserRule getMul_3R_instrRule() {
		return getMul_3R_instrAccess().getRule();
	}

	//mul_4R_instr:
	//	(MLA_OP | UMULL_OP | UMLAL_OP | SMULL_OP | SMLAL_OP | MLS_OP | SMLA_OP | SMLAW_OP) (register+=REGISTER ","
	//	register+=REGISTER "," register+=REGISTER "," register+=REGISTER);
	public Mul_4R_instrElements getMul_4R_instrAccess() {
		return pMul_4R_instr;
	}
	
	public ParserRule getMul_4R_instrRule() {
		return getMul_4R_instrAccess().getRule();
	}

	//mov_instr:
	//	(MOV_OP | MVN_OP) (register+=REGISTER "," Operand2+=Operand2);
	public Mov_instrElements getMov_instrAccess() {
		return pMov_instr;
	}
	
	public ParserRule getMov_instrRule() {
		return getMov_instrAccess().getRule();
	}

	//shift_instr:
	//	(ASR_OP | LSL_OP | LSR_OP | ROR_OP | RRX_OP) (register+=REGISTER "," register+=REGISTER "," rs_sh+=rs_sh);
	public Shift_instrElements getShift_instrAccess() {
		return pShift_instr;
	}
	
	public ParserRule getShift_instrRule() {
		return getShift_instrAccess().getRule();
	}

	//clz_instr:
	//	CLZ_OP (register+=REGISTER "," register+=REGISTER);
	public Clz_instrElements getClz_instrAccess() {
		return pClz_instr;
	}
	
	public ParserRule getClz_instrRule() {
		return getClz_instrAccess().getRule();
	}

	//compare_test_instr:
	//	(CMP_OP | CMN_OP | TST_OP | TEQ_OP) (register+=REGISTER "," Operand2+=Operand2);
	public Compare_test_instrElements getCompare_test_instrAccess() {
		return pCompare_test_instr;
	}
	
	public ParserRule getCompare_test_instrRule() {
		return getCompare_test_instrAccess().getRule();
	}

	//logical_instr:
	//	(AND_OP | EOR_OP | ORR_OP | ORN_OP | BIC_OP) (register+=REGISTER ("," register+=REGISTER)? "," Operand2+=Operand2);
	public Logical_instrElements getLogical_instrAccess() {
		return pLogical_instr;
	}
	
	public ParserRule getLogical_instrRule() {
		return getLogical_instrAccess().getRule();
	}

	//branch_instr:
	//	(B_OP | BL_OP | BX_OP | BLX_OP | BXJ_OP) (immediate_label+=immediate_label | register+=REGISTER);
	public Branch_instrElements getBranch_instrAccess() {
		return pBranch_instr;
	}
	
	public ParserRule getBranch_instrRule() {
		return getBranch_instrAccess().getRule();
	}

	//mrs_instr:
	//	MRS_OP (register+=REGISTER "," PSR_FIELD+=PSR_FIELD_E);
	public Mrs_instrElements getMrs_instrAccess() {
		return pMrs_instr;
	}
	
	public ParserRule getMrs_instrRule() {
		return getMrs_instrAccess().getRule();
	}

	//msr_instr:
	//	MSR_OP ((APSR_FLAG+=APSR_FLAG_E | PSR_FIELD+=PSR_FIELD_E) "," (register+=REGISTER |
	//	immediate_label+=immediate_label));
	public Msr_instrElements getMsr_instrAccess() {
		return pMsr_instr;
	}
	
	public ParserRule getMsr_instrRule() {
		return getMsr_instrAccess().getRule();
	}

	//ldr_str_irpre_instr:
	//	(LDR_OP | STR_OP) (register+=REGISTER ("," "[" register+=REGISTER (("," ("+" | "-")? (register+=REGISTER |
	//	immediate_label+=immediate_label))? "]" "!"?) | "," immediate_label+=immediate_label) (","
	//	immediate_label+=immediate_label)?);
	public Ldr_str_irpre_instrElements getLdr_str_irpre_instrAccess() {
		return pLdr_str_irpre_instr;
	}
	
	public ParserRule getLdr_str_irpre_instrRule() {
		return getLdr_str_irpre_instrAccess().getRule();
	}

	//ldr_str_spre_instr:
	//	(LDR_OP | STR_OP) (register+=REGISTER "," "[" register+=REGISTER "," ("+" | "-")? register+=REGISTER ","
	//	BAREL_SHIFT_REGISTER+=BAREL_SHIFT_REGISTER immediate_label+=immediate_label "]" "!"?);
	public Ldr_str_spre_instrElements getLdr_str_spre_instrAccess() {
		return pLdr_str_spre_instr;
	}
	
	public ParserRule getLdr_str_spre_instrRule() {
		return getLdr_str_spre_instrAccess().getRule();
	}

	//ldr_str_irpsot_instr:
	//	(LDR_OP | STR_OP) (register+=REGISTER "," "[" register+=REGISTER "]" "," "#"? ("+" | "-")? (register+=REGISTER |
	//	immediate_label+=immediate_label));
	public Ldr_str_irpsot_instrElements getLdr_str_irpsot_instrAccess() {
		return pLdr_str_irpsot_instr;
	}
	
	public ParserRule getLdr_str_irpsot_instrRule() {
		return getLdr_str_irpsot_instrAccess().getRule();
	}

	//ldr_str_rpost_instr:
	//	(LDR_OP | STR_OP) (register+=REGISTER "," "[" register+=REGISTER "]" "," ("+" | "-")? register+=REGISTER ","
	//	BAREL_SHIFT_REGISTER+=BAREL_SHIFT_REGISTER immediate_label+=immediate_label);
	public Ldr_str_rpost_instrElements getLdr_str_rpost_instrAccess() {
		return pLdr_str_rpost_instr;
	}
	
	public ParserRule getLdr_str_rpost_instrRule() {
		return getLdr_str_rpost_instrAccess().getRule();
	}

	//ldm_instr:
	//	(LDM_OP | STM_OP) (register+=REGISTER "!"? "," "{" register+=REGISTER ("-" register+=REGISTER)? (","
	//	register+=REGISTER ("-" register+=REGISTER)?)* "}" "^"?);
	public Ldm_instrElements getLdm_instrAccess() {
		return pLdm_instr;
	}
	
	public ParserRule getLdm_instrRule() {
		return getLdm_instrAccess().getRule();
	}

	//push_pop_instr:
	//	(PUSH_OP | POP_OP) "{" (register+=REGISTER ("+" | "-" register+=REGISTER)?) ("," register+=REGISTER ("+" | "-"
	//	register+=REGISTER)?)* "}";
	public Push_pop_instrElements getPush_pop_instrAccess() {
		return pPush_pop_instr;
	}
	
	public ParserRule getPush_pop_instrRule() {
		return getPush_pop_instrAccess().getRule();
	}

	//bkpt_instr:
	//	("bkpt" | "BKPT") immediate_label+=immediate_label;
	public Bkpt_instrElements getBkpt_instrAccess() {
		return pBkpt_instr;
	}
	
	public ParserRule getBkpt_instrRule() {
		return getBkpt_instrAccess().getRule();
	}

	//swp_instr:
	//	(SWP_OP | SWPB_OP) (register+=REGISTER "," register+=REGISTER "," "[" register+=REGISTER (","
	//	immediate_label+=immediate_label)? "]");
	public Swp_instrElements getSwp_instrAccess() {
		return pSwp_instr;
	}
	
	public ParserRule getSwp_instrRule() {
		return getSwp_instrAccess().getRule();
	}

	//svc_instr:
	//	SVC_OP immediate_label+=immediate_label;
	public Svc_instrElements getSvc_instrAccess() {
		return pSvc_instr;
	}
	
	public ParserRule getSvc_instrRule() {
		return getSvc_instrAccess().getRule();
	}

	//ADD_OP:
	//	op?=("add" | "ADD" | ADD_COM);
	public ADD_OPElements getADD_OPAccess() {
		return pADD_OP;
	}
	
	public ParserRule getADD_OPRule() {
		return getADD_OPAccess().getRule();
	}

	//ADC_OP:
	//	op?=("adc" | "ADC" | ADC_COM);
	public ADC_OPElements getADC_OPAccess() {
		return pADC_OP;
	}
	
	public ParserRule getADC_OPRule() {
		return getADC_OPAccess().getRule();
	}

	//ADR_OP:
	//	op?=("adr" | "ADR" | ADR_COM);
	public ADR_OPElements getADR_OPAccess() {
		return pADR_OP;
	}
	
	public ParserRule getADR_OPRule() {
		return getADR_OPAccess().getRule();
	}

	//SUB_OP:
	//	op?=("sub" | "SUB" | SUB_COM);
	public SUB_OPElements getSUB_OPAccess() {
		return pSUB_OP;
	}
	
	public ParserRule getSUB_OPRule() {
		return getSUB_OPAccess().getRule();
	}

	//SBC_OP:
	//	op?=("sbc" | "SBC" | SBC_COM);
	public SBC_OPElements getSBC_OPAccess() {
		return pSBC_OP;
	}
	
	public ParserRule getSBC_OPRule() {
		return getSBC_OPAccess().getRule();
	}

	//RSB_OP:
	//	op?=("rsb" | "RSB" | RSB_COM);
	public RSB_OPElements getRSB_OPAccess() {
		return pRSB_OP;
	}
	
	public ParserRule getRSB_OPRule() {
		return getRSB_OPAccess().getRule();
	}

	//RSC_OP:
	//	op?=("rsc" | "RSC" | RSC_COM);
	public RSC_OPElements getRSC_OPAccess() {
		return pRSC_OP;
	}
	
	public ParserRule getRSC_OPRule() {
		return getRSC_OPAccess().getRule();
	}

	//ADRL_OP:
	//	op?=("adrl" | "ADRL" | ADRL_COM);
	public ADRL_OPElements getADRL_OPAccess() {
		return pADRL_OP;
	}
	
	public ParserRule getADRL_OPRule() {
		return getADRL_OPAccess().getRule();
	}

	//MUL_OP:
	//	op?=("mul" | "MUL" | MUL_3R_COM);
	public MUL_OPElements getMUL_OPAccess() {
		return pMUL_OP;
	}
	
	public ParserRule getMUL_OPRule() {
		return getMUL_OPAccess().getRule();
	}

	//MLS_OP:
	//	op?=("mls" | "MLS" | MUL_4R_COM);
	public MLS_OPElements getMLS_OPAccess() {
		return pMLS_OP;
	}
	
	public ParserRule getMLS_OPRule() {
		return getMLS_OPAccess().getRule();
	}

	//MLA_OP:
	//	op?=("mla" | "MLA" | MLA_COM);
	public MLA_OPElements getMLA_OPAccess() {
		return pMLA_OP;
	}
	
	public ParserRule getMLA_OPRule() {
		return getMLA_OPAccess().getRule();
	}

	//UMULL_OP:
	//	op?=("umull" | "UMULL" | UMULL_COM);
	public UMULL_OPElements getUMULL_OPAccess() {
		return pUMULL_OP;
	}
	
	public ParserRule getUMULL_OPRule() {
		return getUMULL_OPAccess().getRule();
	}

	//UMLAL_OP:
	//	op?=("umlal" | "UMLAL" | UMLAL_COM);
	public UMLAL_OPElements getUMLAL_OPAccess() {
		return pUMLAL_OP;
	}
	
	public ParserRule getUMLAL_OPRule() {
		return getUMLAL_OPAccess().getRule();
	}

	//SMULL_OP:
	//	op?=("smull" | "SMULL" | SMULL_COM);
	public SMULL_OPElements getSMULL_OPAccess() {
		return pSMULL_OP;
	}
	
	public ParserRule getSMULL_OPRule() {
		return getSMULL_OPAccess().getRule();
	}

	//SMLAL_OP:
	//	op?=("smlal" | "SMLAL" | SMLAL_COM);
	public SMLAL_OPElements getSMLAL_OPAccess() {
		return pSMLAL_OP;
	}
	
	public ParserRule getSMLAL_OPRule() {
		return getSMLAL_OPAccess().getRule();
	}

	//SMUL_OP:
	//	op?=("smul" | "SMUL" | SMUL_COM);
	public SMUL_OPElements getSMUL_OPAccess() {
		return pSMUL_OP;
	}
	
	public ParserRule getSMUL_OPRule() {
		return getSMUL_OPAccess().getRule();
	}

	//SMULW_OP:
	//	op?=("smulw" | "SMULW" | SMULW_COM);
	public SMULW_OPElements getSMULW_OPAccess() {
		return pSMULW_OP;
	}
	
	public ParserRule getSMULW_OPRule() {
		return getSMULW_OPAccess().getRule();
	}

	//SMLA_OP:
	//	op?=("smla" | "SMLA" | SMLA_COM);
	public SMLA_OPElements getSMLA_OPAccess() {
		return pSMLA_OP;
	}
	
	public ParserRule getSMLA_OPRule() {
		return getSMLA_OPAccess().getRule();
	}

	//SMLAW_OP:
	//	op?=("smlaw" | "SMLAW" | SMLAW_COM);
	public SMLAW_OPElements getSMLAW_OPAccess() {
		return pSMLAW_OP;
	}
	
	public ParserRule getSMLAW_OPRule() {
		return getSMLAW_OPAccess().getRule();
	}

	//MOV_OP:
	//	op?=("mov" | "MOV" | MOV_COM);
	public MOV_OPElements getMOV_OPAccess() {
		return pMOV_OP;
	}
	
	public ParserRule getMOV_OPRule() {
		return getMOV_OPAccess().getRule();
	}

	//MVN_OP:
	//	op?=("mvn" | "MVN" | MVN_COM);
	public MVN_OPElements getMVN_OPAccess() {
		return pMVN_OP;
	}
	
	public ParserRule getMVN_OPRule() {
		return getMVN_OPAccess().getRule();
	}

	//ASR_OP:
	//	op?=("asr" | "ASR" | ASR_COM);
	public ASR_OPElements getASR_OPAccess() {
		return pASR_OP;
	}
	
	public ParserRule getASR_OPRule() {
		return getASR_OPAccess().getRule();
	}

	//LSL_OP:
	//	op?=("lsl" | "LSL" | LSL_COM);
	public LSL_OPElements getLSL_OPAccess() {
		return pLSL_OP;
	}
	
	public ParserRule getLSL_OPRule() {
		return getLSL_OPAccess().getRule();
	}

	//LSR_OP:
	//	op?=("lsr" | "LSR" | LSR_COM);
	public LSR_OPElements getLSR_OPAccess() {
		return pLSR_OP;
	}
	
	public ParserRule getLSR_OPRule() {
		return getLSR_OPAccess().getRule();
	}

	//ROR_OP:
	//	op?=("ror" | "ROR" | ROR_COM);
	public ROR_OPElements getROR_OPAccess() {
		return pROR_OP;
	}
	
	public ParserRule getROR_OPRule() {
		return getROR_OPAccess().getRule();
	}

	//RRX_OP:
	//	op?=("rrx" | "RRX" | RRX_COM);
	public RRX_OPElements getRRX_OPAccess() {
		return pRRX_OP;
	}
	
	public ParserRule getRRX_OPRule() {
		return getRRX_OPAccess().getRule();
	}

	//CLZ_OP:
	//	op?=("clz" | "CLZ" | CLZ_COM);
	public CLZ_OPElements getCLZ_OPAccess() {
		return pCLZ_OP;
	}
	
	public ParserRule getCLZ_OPRule() {
		return getCLZ_OPAccess().getRule();
	}

	//CMP_OP:
	//	op?=("cmp" | "CMP" | CMP_COM);
	public CMP_OPElements getCMP_OPAccess() {
		return pCMP_OP;
	}
	
	public ParserRule getCMP_OPRule() {
		return getCMP_OPAccess().getRule();
	}

	//CMN_OP:
	//	op?=("cmn" | "CMN" | CMN_COM);
	public CMN_OPElements getCMN_OPAccess() {
		return pCMN_OP;
	}
	
	public ParserRule getCMN_OPRule() {
		return getCMN_OPAccess().getRule();
	}

	//TST_OP:
	//	op?=("tst" | "TST" | TST_COM);
	public TST_OPElements getTST_OPAccess() {
		return pTST_OP;
	}
	
	public ParserRule getTST_OPRule() {
		return getTST_OPAccess().getRule();
	}

	//TEQ_OP:
	//	op?=("teq" | "TEQ" | TEQ_COM);
	public TEQ_OPElements getTEQ_OPAccess() {
		return pTEQ_OP;
	}
	
	public ParserRule getTEQ_OPRule() {
		return getTEQ_OPAccess().getRule();
	}

	//AND_OP:
	//	op?=("and" | "AND" | AND_COM);
	public AND_OPElements getAND_OPAccess() {
		return pAND_OP;
	}
	
	public ParserRule getAND_OPRule() {
		return getAND_OPAccess().getRule();
	}

	//EOR_OP:
	//	op?=("eor" | "EOR" | EOR_COM);
	public EOR_OPElements getEOR_OPAccess() {
		return pEOR_OP;
	}
	
	public ParserRule getEOR_OPRule() {
		return getEOR_OPAccess().getRule();
	}

	//ORR_OP:
	//	op?=("orr" | "ORR" | ORR_COM);
	public ORR_OPElements getORR_OPAccess() {
		return pORR_OP;
	}
	
	public ParserRule getORR_OPRule() {
		return getORR_OPAccess().getRule();
	}

	//ORN_OP:
	//	op?=("orn" | "ORN" | ORN_COM);
	public ORN_OPElements getORN_OPAccess() {
		return pORN_OP;
	}
	
	public ParserRule getORN_OPRule() {
		return getORN_OPAccess().getRule();
	}

	//BIC_OP:
	//	op?=("bic" | "BIC" | BIC_COM);
	public BIC_OPElements getBIC_OPAccess() {
		return pBIC_OP;
	}
	
	public ParserRule getBIC_OPRule() {
		return getBIC_OPAccess().getRule();
	}

	//B_OP:
	//	op?=("b" | "B" | B_COM);
	public B_OPElements getB_OPAccess() {
		return pB_OP;
	}
	
	public ParserRule getB_OPRule() {
		return getB_OPAccess().getRule();
	}

	//BL_OP:
	//	op?=("bl" | "BL" | BL_COM);
	public BL_OPElements getBL_OPAccess() {
		return pBL_OP;
	}
	
	public ParserRule getBL_OPRule() {
		return getBL_OPAccess().getRule();
	}

	//BX_OP:
	//	op?=("bx" | "BX" | BX_COM);
	public BX_OPElements getBX_OPAccess() {
		return pBX_OP;
	}
	
	public ParserRule getBX_OPRule() {
		return getBX_OPAccess().getRule();
	}

	//BLX_OP:
	//	op?=("blx" | "BLX" | BLX_COM);
	public BLX_OPElements getBLX_OPAccess() {
		return pBLX_OP;
	}
	
	public ParserRule getBLX_OPRule() {
		return getBLX_OPAccess().getRule();
	}

	//BXJ_OP:
	//	op?=("bxj" | "BXJ" | BXJ_COM);
	public BXJ_OPElements getBXJ_OPAccess() {
		return pBXJ_OP;
	}
	
	public ParserRule getBXJ_OPRule() {
		return getBXJ_OPAccess().getRule();
	}

	//MRS_OP:
	//	op?=("mrs" | "MRS" | MRS_COM);
	public MRS_OPElements getMRS_OPAccess() {
		return pMRS_OP;
	}
	
	public ParserRule getMRS_OPRule() {
		return getMRS_OPAccess().getRule();
	}

	//MSR_OP:
	//	op?=("msr" | "MSR" | MSR_COM);
	public MSR_OPElements getMSR_OPAccess() {
		return pMSR_OP;
	}
	
	public ParserRule getMSR_OPRule() {
		return getMSR_OPAccess().getRule();
	}

	//LDR_OP:
	//	op?=("ldr" | "LDR" | LDR_COM);
	public LDR_OPElements getLDR_OPAccess() {
		return pLDR_OP;
	}
	
	public ParserRule getLDR_OPRule() {
		return getLDR_OPAccess().getRule();
	}

	//STR_OP:
	//	op?=("str" | "STR" | STR_COM);
	public STR_OPElements getSTR_OPAccess() {
		return pSTR_OP;
	}
	
	public ParserRule getSTR_OPRule() {
		return getSTR_OPAccess().getRule();
	}

	//LDM_OP:
	//	op?=("ldm" | "LDM" | LDM_COM);
	public LDM_OPElements getLDM_OPAccess() {
		return pLDM_OP;
	}
	
	public ParserRule getLDM_OPRule() {
		return getLDM_OPAccess().getRule();
	}

	//STM_OP:
	//	op?=("stm" | "STM" | STM_COM);
	public STM_OPElements getSTM_OPAccess() {
		return pSTM_OP;
	}
	
	public ParserRule getSTM_OPRule() {
		return getSTM_OPAccess().getRule();
	}

	//PUSH_OP:
	//	op?=("push" | "PUSH" | PUSH_COM);
	public PUSH_OPElements getPUSH_OPAccess() {
		return pPUSH_OP;
	}
	
	public ParserRule getPUSH_OPRule() {
		return getPUSH_OPAccess().getRule();
	}

	//POP_OP:
	//	op?=("pop" | "POP" | POP_COM);
	public POP_OPElements getPOP_OPAccess() {
		return pPOP_OP;
	}
	
	public ParserRule getPOP_OPRule() {
		return getPOP_OPAccess().getRule();
	}

	//SWP_OP:
	//	op?=("swp" | "SWP" | SWP_COM);
	public SWP_OPElements getSWP_OPAccess() {
		return pSWP_OP;
	}
	
	public ParserRule getSWP_OPRule() {
		return getSWP_OPAccess().getRule();
	}

	//SWPB_OP:
	//	op?=("swpb" | "SWPB" | SWPB_COM);
	public SWPB_OPElements getSWPB_OPAccess() {
		return pSWPB_OP;
	}
	
	public ParserRule getSWPB_OPRule() {
		return getSWPB_OPAccess().getRule();
	}

	//SVC_OP:
	//	op?=("svc" | "SVC" | SVC_COM);
	public SVC_OPElements getSVC_OPAccess() {
		return pSVC_OP;
	}
	
	public ParserRule getSVC_OPRule() {
		return getSVC_OPAccess().getRule();
	}

	//PSR_FIELD_E:
	//	op+=PSR_FIELD;
	public PSR_FIELD_EElements getPSR_FIELD_EAccess() {
		return pPSR_FIELD_E;
	}
	
	public ParserRule getPSR_FIELD_ERule() {
		return getPSR_FIELD_EAccess().getRule();
	}

	//APSR_FLAG_E:
	//	op+=APSR_FLAG;
	public APSR_FLAG_EElements getAPSR_FLAG_EAccess() {
		return pAPSR_FLAG_E;
	}
	
	public ParserRule getAPSR_FLAG_ERule() {
		return getAPSR_FLAG_EAccess().getRule();
	}

	//NOP:
	//	op?=("nop" | "NOP");
	public NOPElements getNOPAccess() {
		return pNOP;
	}
	
	public ParserRule getNOPRule() {
		return getNOPAccess().getRule();
	}

	//terminal ADD_COM:
	//	("add" | "ADD") CONDITION_SUFFIX? ("s" | "S")?;
	public TerminalRule getADD_COMRule() {
		return tADD_COM;
	} 

	//terminal ADC_COM:
	//	("adc" | "ADC") CONDITION_SUFFIX? ("s" | "S")?;
	public TerminalRule getADC_COMRule() {
		return tADC_COM;
	} 

	//terminal ADR_COM:
	//	("adr" | "ADR") CONDITION_SUFFIX? ("s" | "S")?;
	public TerminalRule getADR_COMRule() {
		return tADR_COM;
	} 

	//terminal SUB_COM:
	//	("sub" | "SUB") CONDITION_SUFFIX? ("s" | "S")?;
	public TerminalRule getSUB_COMRule() {
		return tSUB_COM;
	} 

	//terminal SBC_COM:
	//	("sbc" | "SBC") CONDITION_SUFFIX? ("s" | "S")?;
	public TerminalRule getSBC_COMRule() {
		return tSBC_COM;
	} 

	//terminal RSB_COM:
	//	("rsb" | "RSB") CONDITION_SUFFIX? ("s" | "S")?;
	public TerminalRule getRSB_COMRule() {
		return tRSB_COM;
	} 

	//terminal RSC_COM:
	//	("rsc" | "RSC") CONDITION_SUFFIX? ("s" | "S")?;
	public TerminalRule getRSC_COMRule() {
		return tRSC_COM;
	} 

	//terminal ADRL_COM:
	//	("adrl" | "ADRL") CONDITION_SUFFIX? ("s" | "S")?;
	public TerminalRule getADRL_COMRule() {
		return tADRL_COM;
	} 

	//terminal MUL_3R_COM:
	//	("mul" | "MUL") CONDITION_SUFFIX? ("s" | "S")?;
	public TerminalRule getMUL_3R_COMRule() {
		return tMUL_3R_COM;
	} 

	//terminal MUL_4R_COM:
	//	("mls" | "MLS") CONDITION_SUFFIX?;
	public TerminalRule getMUL_4R_COMRule() {
		return tMUL_4R_COM;
	} 

	//terminal MLA_COM:
	//	("mla" | "MLA") CONDITION_SUFFIX? ("s" | "S")?;
	public TerminalRule getMLA_COMRule() {
		return tMLA_COM;
	} 

	//terminal UMULL_COM:
	//	("umull" | "UMULL") CONDITION_SUFFIX? ("s" | "S")?;
	public TerminalRule getUMULL_COMRule() {
		return tUMULL_COM;
	} 

	//terminal UMLAL_COM:
	//	("umlal" | "UMLAL") CONDITION_SUFFIX? ("s" | "S")?;
	public TerminalRule getUMLAL_COMRule() {
		return tUMLAL_COM;
	} 

	//terminal SMULL_COM:
	//	("smull" | "SMULL") CONDITION_SUFFIX? ("s" | "S")?;
	public TerminalRule getSMULL_COMRule() {
		return tSMULL_COM;
	} 

	//terminal SMLAL_COM:
	//	("smlal" | "SMLAL") CONDITION_SUFFIX? ("s" | "S")?;
	public TerminalRule getSMLAL_COMRule() {
		return tSMLAL_COM;
	} 

	//terminal SMUL_COM:
	//	("smul" | "SMUL") XY_LABEL XY_LABEL CONDITION_SUFFIX?;
	public TerminalRule getSMUL_COMRule() {
		return tSMUL_COM;
	} 

	//terminal SMULW_COM:
	//	("smulw" | "SMULW") XY_LABEL XY_LABEL CONDITION_SUFFIX?;
	public TerminalRule getSMULW_COMRule() {
		return tSMULW_COM;
	} 

	//terminal SMLA_COM:
	//	("smla" | "SMLA") XY_LABEL XY_LABEL CONDITION_SUFFIX?;
	public TerminalRule getSMLA_COMRule() {
		return tSMLA_COM;
	} 

	//terminal SMLAW_COM:
	//	("smlaw" | "SMLAW") XY_LABEL XY_LABEL CONDITION_SUFFIX?;
	public TerminalRule getSMLAW_COMRule() {
		return tSMLAW_COM;
	} 

	//terminal MOV_COM:
	//	("mov" | "MOV") CONDITION_SUFFIX? ("s" | "S")?;
	public TerminalRule getMOV_COMRule() {
		return tMOV_COM;
	} 

	//terminal MVN_COM:
	//	("mvn" | "MVN") CONDITION_SUFFIX? ("s" | "S")?;
	public TerminalRule getMVN_COMRule() {
		return tMVN_COM;
	} 

	//terminal ASR_COM:
	//	("asr" | "ASR") CONDITION_SUFFIX? ("s" | "S")?;
	public TerminalRule getASR_COMRule() {
		return tASR_COM;
	} 

	//terminal LSL_COM:
	//	("lsl" | "LSL") CONDITION_SUFFIX? ("s" | "S")?;
	public TerminalRule getLSL_COMRule() {
		return tLSL_COM;
	} 

	//terminal LSR_COM:
	//	("lsr" | "LSR") CONDITION_SUFFIX? ("s" | "S")?;
	public TerminalRule getLSR_COMRule() {
		return tLSR_COM;
	} 

	//terminal ROR_COM:
	//	("ror" | "ROR") CONDITION_SUFFIX? ("s" | "S")?;
	public TerminalRule getROR_COMRule() {
		return tROR_COM;
	} 

	//terminal RRX_COM:
	//	("rrx" | "RRX") CONDITION_SUFFIX? ("s" | "S")?;
	public TerminalRule getRRX_COMRule() {
		return tRRX_COM;
	} 

	//terminal CLZ_COM:
	//	("clz" | "CLZ") CONDITION_SUFFIX?;
	public TerminalRule getCLZ_COMRule() {
		return tCLZ_COM;
	} 

	//terminal CMP_COM:
	//	("cmp" | "CMP") CONDITION_SUFFIX?;
	public TerminalRule getCMP_COMRule() {
		return tCMP_COM;
	} 

	//terminal CMN_COM:
	//	("cmn" | "CMN") CONDITION_SUFFIX?;
	public TerminalRule getCMN_COMRule() {
		return tCMN_COM;
	} 

	//terminal TST_COM:
	//	("tst" | "TST") CONDITION_SUFFIX?;
	public TerminalRule getTST_COMRule() {
		return tTST_COM;
	} 

	//terminal TEQ_COM:
	//	("teq" | "TEQ") CONDITION_SUFFIX?;
	public TerminalRule getTEQ_COMRule() {
		return tTEQ_COM;
	} 

	//terminal AND_COM:
	//	("and" | "AND") CONDITION_SUFFIX? ("s" | "S")?;
	public TerminalRule getAND_COMRule() {
		return tAND_COM;
	} 

	//terminal EOR_COM:
	//	("eor" | "EOR") CONDITION_SUFFIX? ("s" | "S")?;
	public TerminalRule getEOR_COMRule() {
		return tEOR_COM;
	} 

	//terminal ORR_COM:
	//	("orr" | "ORR") CONDITION_SUFFIX? ("s" | "S")?;
	public TerminalRule getORR_COMRule() {
		return tORR_COM;
	} 

	//terminal ORN_COM:
	//	("orn" | "ORN") CONDITION_SUFFIX? ("s" | "S")?;
	public TerminalRule getORN_COMRule() {
		return tORN_COM;
	} 

	//terminal BIC_COM:
	//	("bic" | "BIC") CONDITION_SUFFIX? ("s" | "S")?;
	public TerminalRule getBIC_COMRule() {
		return tBIC_COM;
	} 

	//terminal B_COM:
	//	("b" | "B") CONDITION_SUFFIX?;
	public TerminalRule getB_COMRule() {
		return tB_COM;
	} 

	//terminal BL_COM:
	//	("bl" | "BL") CONDITION_SUFFIX?;
	public TerminalRule getBL_COMRule() {
		return tBL_COM;
	} 

	//terminal BX_COM:
	//	("bx" | "BX") CONDITION_SUFFIX?;
	public TerminalRule getBX_COMRule() {
		return tBX_COM;
	} 

	//terminal BLX_COM:
	//	("blx" | "BLX") CONDITION_SUFFIX?;
	public TerminalRule getBLX_COMRule() {
		return tBLX_COM;
	} 

	//terminal BXJ_COM:
	//	("bxj" | "BXJ") CONDITION_SUFFIX?;
	public TerminalRule getBXJ_COMRule() {
		return tBXJ_COM;
	} 

	//terminal MRS_COM:
	//	("mrs" | "MRS") CONDITION_SUFFIX?;
	public TerminalRule getMRS_COMRule() {
		return tMRS_COM;
	} 

	//terminal MSR_COM:
	//	("msr" | "MSR") CONDITION_SUFFIX?;
	public TerminalRule getMSR_COMRule() {
		return tMSR_COM;
	} 

	//terminal LDR_COM:
	//	("ldr" | "LDR") CONDITION_SUFFIX? XY_LABEL?;
	public TerminalRule getLDR_COMRule() {
		return tLDR_COM;
	} 

	//terminal STR_COM:
	//	("str" | "STR") CONDITION_SUFFIX? XY_LABEL?;
	public TerminalRule getSTR_COMRule() {
		return tSTR_COM;
	} 

	//terminal LDM_COM:
	//	("ldm" | "LDM") CONDITION_SUFFIX? ADDRESING_MODE?;
	public TerminalRule getLDM_COMRule() {
		return tLDM_COM;
	} 

	//terminal STM_COM:
	//	("stm" | "STM") CONDITION_SUFFIX? ADDRESING_MODE?;
	public TerminalRule getSTM_COMRule() {
		return tSTM_COM;
	} 

	//terminal PUSH_COM:
	//	("push" | "PUSH") CONDITION_SUFFIX?;
	public TerminalRule getPUSH_COMRule() {
		return tPUSH_COM;
	} 

	//terminal POP_COM:
	//	("pop" | "POP") CONDITION_SUFFIX?;
	public TerminalRule getPOP_COMRule() {
		return tPOP_COM;
	} 

	//terminal SWP_COM:
	//	("swp" | "SWP") CONDITION_SUFFIX?;
	public TerminalRule getSWP_COMRule() {
		return tSWP_COM;
	} 

	//terminal SWPB_COM:
	//	("swpb" | "SWPB") CONDITION_SUFFIX?;
	public TerminalRule getSWPB_COMRule() {
		return tSWPB_COM;
	} 

	//terminal SVC_COM:
	//	("svc" | "SVC") CONDITION_SUFFIX?;
	public TerminalRule getSVC_COMRule() {
		return tSVC_COM;
	} 

	//terminal PSR_FIELD:
	//	PSR ("_" FIELD+)?;
	public TerminalRule getPSR_FIELDRule() {
		return tPSR_FIELD;
	} 

	//terminal FIELD:
	//	"c" | "f" | "s" | "x" | "all" | "C" | "F" | "S" | "X" | "ALL";
	public TerminalRule getFIELDRule() {
		return tFIELD;
	} 

	//terminal PSR:
	//	"cpsr" | "spsr" | "CPSR" | "SPSR";
	public TerminalRule getPSRRule() {
		return tPSR;
	} 

	//terminal APSR_FLAG:
	//	("apsr" | "APSR") ("_" FLAGS+)?;
	public TerminalRule getAPSR_FLAGRule() {
		return tAPSR_FLAG;
	} 

	//terminal FLAGS:
	//	"nzcvq" | "g" | "NZCVQ" | "G";
	public TerminalRule getFLAGSRule() {
		return tFLAGS;
	} 

	//terminal XY_LABEL:
	//	"b" | "bt" | "sb" | "h" | "sh" | "B" | "BT" | "SB" | "H" | "SH";
	public TerminalRule getXY_LABELRule() {
		return tXY_LABEL;
	} 

	//terminal CONDITION_SUFFIX:
	//	"eq" | "ne" | "cs" | "hs" | "cc" | "lo" | "mi" | "pl" | "vs" | "vc" | "hi" | "ls" | "ge" | "lt" | "gt" | "le" | "al" |
	//	"EQ" | "NE" | "CS" | "HS" | "CC" | "LO" | "MI" | "PL" | "VS" | "VC" | "HI" | "LS" | "GE" | "LT" | "GT" | "LE" | "AL";
	public TerminalRule getCONDITION_SUFFIXRule() {
		return tCONDITION_SUFFIX;
	} 

	//terminal ADDRESING_MODE:
	//	"ia" | "fd" | "ea" | "ib" | "ed" | "fa" | "da" | "db" | "IA" | "FD" | "EA" | "IB" | "ED" | "FA" | "DA" | "DB";
	public TerminalRule getADDRESING_MODERule() {
		return tADDRESING_MODE;
	} 

	//PREPROCESSOR:
	//	hash?="#" code?=("if" | "elif" | "error" | "pragma" | "undef" | "include" | "ifdef" | "ifndef" | "line");
	public PREPROCESSORElements getPREPROCESSORAccess() {
		return pPREPROCESSOR;
	}
	
	public ParserRule getPREPROCESSORRule() {
		return getPREPROCESSORAccess().getRule();
	}

	//PREPROCESSOR_DEFINE:
	//	hash?="#" code?="define";
	public PREPROCESSOR_DEFINEElements getPREPROCESSOR_DEFINEAccess() {
		return pPREPROCESSOR_DEFINE;
	}
	
	public ParserRule getPREPROCESSOR_DEFINERule() {
		return getPREPROCESSOR_DEFINEAccess().getRule();
	}

	//PREPROCESSOR_ENDIF:
	//	hash?="#" code?="endif";
	public PREPROCESSOR_ENDIFElements getPREPROCESSOR_ENDIFAccess() {
		return pPREPROCESSOR_ENDIF;
	}
	
	public ParserRule getPREPROCESSOR_ENDIFRule() {
		return getPREPROCESSOR_ENDIFAccess().getRule();
	}

	//PREPROCESSOR_ELSE:
	//	hash?="#" code?="else";
	public PREPROCESSOR_ELSEElements getPREPROCESSOR_ELSEAccess() {
		return pPREPROCESSOR_ELSE;
	}
	
	public ParserRule getPREPROCESSOR_ELSERule() {
		return getPREPROCESSOR_ELSEAccess().getRule();
	}

	//CExtendCode:
	//	dot?="." code?=("extern" | "data" | "text" | "global" | "end");
	public CExtendCodeElements getCExtendCodeAccess() {
		return pCExtendCode;
	}
	
	public ParserRule getCExtendCodeRule() {
		return getCExtendCodeAccess().getRule();
	}

	//Assembler_Directives_equ:
	//	dot?="." code?="equ";
	public Assembler_Directives_equElements getAssembler_Directives_equAccess() {
		return pAssembler_Directives_equ;
	}
	
	public ParserRule getAssembler_Directives_equRule() {
		return getAssembler_Directives_equAccess().getRule();
	}

	//Assembler_Directives:
	//	dot?="." code?=("long" | "word" | "ascii");
	public Assembler_DirectivesElements getAssembler_DirectivesAccess() {
		return pAssembler_Directives;
	}
	
	public ParserRule getAssembler_DirectivesRule() {
		return getAssembler_DirectivesAccess().getRule();
	}

	//Assembler_Directives_macro:
	//	dot?="." code?="macro";
	public Assembler_Directives_macroElements getAssembler_Directives_macroAccess() {
		return pAssembler_Directives_macro;
	}
	
	public ParserRule getAssembler_Directives_macroRule() {
		return getAssembler_Directives_macroAccess().getRule();
	}

	//Assember_Directives_type:
	//	dot?="." code?="type";
	public Assember_Directives_typeElements getAssember_Directives_typeAccess() {
		return pAssember_Directives_type;
	}
	
	public ParserRule getAssember_Directives_typeRule() {
		return getAssember_Directives_typeAccess().getRule();
	}

	//Assembler_Directives_endm:
	//	dot?="." code?="endm";
	public Assembler_Directives_endmElements getAssembler_Directives_endmAccess() {
		return pAssembler_Directives_endm;
	}
	
	public ParserRule getAssembler_Directives_endmRule() {
		return getAssembler_Directives_endmAccess().getRule();
	}

	//ARM_Machine_Directives:
	//	dot?="." code?=("2byte" | "4byte" | "8byte" | "arch" | "arch_extension" | "arm" | "bss" | "cantunwind" | "cpu" |
	//	"even" | "extend" | "ldouble" | "fnend" | "fnstart" | "force_thumb" | "fpu" | "handlerdata" | "ltorg" | "movsp" |
	//	"object_arch" | "packed" | "personality" | "personalityindex" | "pool" | "secrel32" | "thumb" | "thumb_func" |
	//	"thumb_set" | "space" | "byte");
	public ARM_Machine_DirectivesElements getARM_Machine_DirectivesAccess() {
		return pARM_Machine_Directives;
	}
	
	public ParserRule getARM_Machine_DirectivesRule() {
		return getARM_Machine_DirectivesAccess().getRule();
	}

	//ARM_MACHINE_DIRECTIVES_align:
	//	dot?="." code?="align";
	public ARM_MACHINE_DIRECTIVES_alignElements getARM_MACHINE_DIRECTIVES_alignAccess() {
		return pARM_MACHINE_DIRECTIVES_align;
	}
	
	public ParserRule getARM_MACHINE_DIRECTIVES_alignRule() {
		return getARM_MACHINE_DIRECTIVES_alignAccess().getRule();
	}

	//ARM_Machine_Directives_code:
	//	dot?="." code?="code";
	public ARM_Machine_Directives_codeElements getARM_Machine_Directives_codeAccess() {
		return pARM_Machine_Directives_code;
	}
	
	public ParserRule getARM_Machine_Directives_codeRule() {
		return getARM_Machine_Directives_codeAccess().getRule();
	}

	//ARM_Machine_Directives_syntax:
	//	dot?="." code?="syntax";
	public ARM_Machine_Directives_syntaxElements getARM_Machine_Directives_syntaxAccess() {
		return pARM_Machine_Directives_syntax;
	}
	
	public ParserRule getARM_Machine_Directives_syntaxRule() {
		return getARM_Machine_Directives_syntaxAccess().getRule();
	}

	//ARM_Machine_Directives_save:
	//	dot?="." code?="save";
	public ARM_Machine_Directives_saveElements getARM_Machine_Directives_saveAccess() {
		return pARM_Machine_Directives_save;
	}
	
	public ParserRule getARM_Machine_Directives_saveRule() {
		return getARM_Machine_Directives_saveAccess().getRule();
	}

	//CExtendasciz:
	//	dot?="." code?="asciz";
	public CExtendascizElements getCExtendascizAccess() {
		return pCExtendasciz;
	}
	
	public ParserRule getCExtendascizRule() {
		return getCExtendascizAccess().getRule();
	}

	//CLang:
	//	code?=("title:" | "prompt:" | "Content:" | "main1:" | "break:" | "loop:" | "exit_main:" | "start:" | "stop:" |
	//	"START:" | "STOP:");
	public CLangElements getCLangAccess() {
		return pCLang;
	}
	
	public ParserRule getCLangRule() {
		return getCLangAccess().getRule();
	}

	//REGISTER:
	//	r0?="r0" | r1?="r1" | r2?="r2" | r3?="r3" | r4?="r4" | r5?="r5" | r6?="r6" | r7?="r7" | r8?="r8" | r9?="r9" |
	//	r10?="r10" | r11?="r11" | r12?="r12" | r13?="r13" | r14?="r14" | r15?="r15" | rfp?="fp" | rip?="ip" | rsp?="sp" |
	//	rlr?="lr" | rpc?="pc" | R001?="R0" | R01?="R1" | R02?="R2" | R03?="R3" | R04?="R4" | R05?="R5" | R06?="R6" | R07?="R7"
	//	| R08?="R8" | R09?="R9" | R010?="R10" | R011?="R11" | R012?="R12" | R013?="R13" | R014?="R14" | R015?="R15" |
	//	R0FP?="FP" | R0IP?="IP" | R0SP?="SP" | R0LR?="LR" | R0PC?="PC" | "\\"? ID;
	public REGISTERElements getREGISTERAccess() {
		return pREGISTER;
	}
	
	public ParserRule getREGISTERRule() {
		return getREGISTERAccess().getRule();
	}

	//BAREL_SHIFT_REGISTER:
	//	BAREL_SHIFT_REGISTER?=("asr" | "lsl" | "lsr" | "ror" | "ASR" | "LSL" | "LSR" | "ROR" | ID);
	public BAREL_SHIFT_REGISTERElements getBAREL_SHIFT_REGISTERAccess() {
		return pBAREL_SHIFT_REGISTER;
	}
	
	public ParserRule getBAREL_SHIFT_REGISTERRule() {
		return getBAREL_SHIFT_REGISTERAccess().getRule();
	}

	//Operand2:
	//	immediate_label | REGISTER ("," opsh+=opsh)?;
	public Operand2Elements getOperand2Access() {
		return pOperand2;
	}
	
	public ParserRule getOperand2Rule() {
		return getOperand2Access().getRule();
	}

	//opsh:
	//	"\\"? BAREL_SHIFT_REGISTER (immediate_label+=immediate_label | register+=REGISTER);
	public OpshElements getOpshAccess() {
		return pOpsh;
	}
	
	public ParserRule getOpshRule() {
		return getOpshAccess().getRule();
	}

	//immediate_label:
	//	literal_numeric+=literal_numeric | numeric_backward_forward+=numeric_backward_forward | "\\"? (("#" | "=" | "$" | "."
	//	| "_")? "("? (label=ID | num2=myINT) (("|" | "+" | "-" | "*" | "/")+ (label2=ID | num=myINT))* ")"?);
	public Immediate_labelElements getImmediate_labelAccess() {
		return pImmediate_label;
	}
	
	public ParserRule getImmediate_labelRule() {
		return getImmediate_labelAccess().getRule();
	}

	//description:
	//	("%" | "#")? (int+=myINT | string+=STRING | description+=ID);
	public DescriptionElements getDescriptionAccess() {
		return pDescription;
	}
	
	public ParserRule getDescriptionRule() {
		return getDescriptionAccess().getRule();
	}

	//variable:
	//	("(" | "#" | "=" | "$" | "." | "_" | "+" | "-" | "*" | "/" | "&" | "\\")* (variableInt=myINT | variableABC=ID |
	//	variableString=STRING | variableHex=HEX) ")"?;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//definition:
	//	("(" | "#" | "=" | "$" | "." | "_" | "+" | "-" | "*" | "/" | "&" | ":" | "\\")* (variableInt=myINT | variableABC=ID |
	//	variableString=STRING | variableHex=HEX) (":" | "=" (defInt=myINT | defABC=ID | defString=STRING | defHex=HEX))? ")"?;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	//randomEntry:
	//	("#" | "=" | "$" | "." | "_" | "+" | "-" | "&")* (entryInt=myINT | entryABC=ID | entryString=STRING | entryHex=HEX);
	public RandomEntryElements getRandomEntryAccess() {
		return pRandomEntry;
	}
	
	public ParserRule getRandomEntryRule() {
		return getRandomEntryAccess().getRule();
	}

	//rs_sh:
	//	REGISTER | BAREL_SHIFT_REGISTER? immediate_label+=immediate_label;
	public Rs_shElements getRs_shAccess() {
		return pRs_sh;
	}
	
	public ParserRule getRs_shRule() {
		return getRs_shAccess().getRule();
	}

	//flexible_offset:
	//	"," (("#" expr=myINT | "#" expr2=ID) | ("-" | "+")? register+=REGISTER ("," BAREL_SHIFT_REGISTER+=BAREL_SHIFT_REGISTER
	//	(immediate_label+=immediate_label | num=myINT))?);
	public Flexible_offsetElements getFlexible_offsetAccess() {
		return pFlexible_offset;
	}
	
	public ParserRule getFlexible_offsetRule() {
		return getFlexible_offsetAccess().getRule();
	}

	//literal_numeric:
	//	hex=HEX | int=PLUS_MINUS_INT;
	public Literal_numericElements getLiteral_numericAccess() {
		return pLiteral_numeric;
	}
	
	public ParserRule getLiteral_numericRule() {
		return getLiteral_numericAccess().getRule();
	}

	//numeric_backward_forward:
	//	hex=HEX | int=myINT ("f" | "F" | "b" | "B")?;
	public Numeric_backward_forwardElements getNumeric_backward_forwardAccess() {
		return pNumeric_backward_forward;
	}
	
	public ParserRule getNumeric_backward_forwardRule() {
		return getNumeric_backward_forwardAccess().getRule();
	}

	//myINT:
	//	INT | "16" | "32";
	public MyINTElements getMyINTAccess() {
		return pMyINT;
	}
	
	public ParserRule getMyINTRule() {
		return getMyINTAccess().getRule();
	}

	//terminal HEX:
	//	("=" | "#")? ("0x" | "&") ("0".."9" | "a".."f" | "A".."F")*;
	public TerminalRule getHEXRule() {
		return tHEX;
	} 

	//terminal PLUS_MINUS_INT:
	//	("=" | "#") ("+" | "-")? INT;
	public TerminalRule getPLUS_MINUS_INTRule() {
		return tPLUS_MINUS_INT;
	} 

	//terminal SL_COMMENT:
	//	("@" | "//") !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'0'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'0'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
