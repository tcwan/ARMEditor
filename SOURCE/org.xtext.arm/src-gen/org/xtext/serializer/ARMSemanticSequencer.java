/*
 * generated by Xtext
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.xtext.aRM.ADC_OP;
import org.xtext.aRM.ADD_OP;
import org.xtext.aRM.ADRL_OP;
import org.xtext.aRM.ADR_OP;
import org.xtext.aRM.AND_OP;
import org.xtext.aRM.APSR_FLAG_E;
import org.xtext.aRM.ARMPackage;
import org.xtext.aRM.ARM_MACHINE_DIRECTIVES_align;
import org.xtext.aRM.ARM_Machine_Directives;
import org.xtext.aRM.ARM_Machine_Directives_code;
import org.xtext.aRM.ARM_Machine_Directives_save;
import org.xtext.aRM.ARM_Machine_Directives_syntax;
import org.xtext.aRM.ASR_OP;
import org.xtext.aRM.Assember_Directives_type;
import org.xtext.aRM.Assembler_Directives;
import org.xtext.aRM.Assembler_Directives_endm;
import org.xtext.aRM.Assembler_Directives_equ;
import org.xtext.aRM.Assembler_Directives_macro;
import org.xtext.aRM.BAREL_SHIFT_REGISTER;
import org.xtext.aRM.BIC_OP;
import org.xtext.aRM.BLX_OP;
import org.xtext.aRM.BL_OP;
import org.xtext.aRM.BXJ_OP;
import org.xtext.aRM.BX_OP;
import org.xtext.aRM.B_OP;
import org.xtext.aRM.CExtendCode;
import org.xtext.aRM.CExtendasciz;
import org.xtext.aRM.CLZ_OP;
import org.xtext.aRM.CLang;
import org.xtext.aRM.CMN_OP;
import org.xtext.aRM.CMP_OP;
import org.xtext.aRM.Ccode;
import org.xtext.aRM.EOR_OP;
import org.xtext.aRM.LDM_OP;
import org.xtext.aRM.LDR_OP;
import org.xtext.aRM.LSL_OP;
import org.xtext.aRM.LSR_OP;
import org.xtext.aRM.MLA_OP;
import org.xtext.aRM.MLS_OP;
import org.xtext.aRM.MOV_OP;
import org.xtext.aRM.MRS_OP;
import org.xtext.aRM.MSR_OP;
import org.xtext.aRM.MUL_OP;
import org.xtext.aRM.MVN_OP;
import org.xtext.aRM.Model;
import org.xtext.aRM.NOP;
import org.xtext.aRM.ORN_OP;
import org.xtext.aRM.ORR_OP;
import org.xtext.aRM.POP_OP;
import org.xtext.aRM.PREPROCESSOR;
import org.xtext.aRM.PREPROCESSOR_DEFINE;
import org.xtext.aRM.PREPROCESSOR_ELSE;
import org.xtext.aRM.PREPROCESSOR_ENDIF;
import org.xtext.aRM.PSR_FIELD_E;
import org.xtext.aRM.PUSH_OP;
import org.xtext.aRM.REGISTER;
import org.xtext.aRM.ROR_OP;
import org.xtext.aRM.RRX_OP;
import org.xtext.aRM.RSB_OP;
import org.xtext.aRM.RSC_OP;
import org.xtext.aRM.SBC_OP;
import org.xtext.aRM.SMLAL_OP;
import org.xtext.aRM.SMLAW_OP;
import org.xtext.aRM.SMLA_OP;
import org.xtext.aRM.SMULL_OP;
import org.xtext.aRM.SMULW_OP;
import org.xtext.aRM.SMUL_OP;
import org.xtext.aRM.STM_OP;
import org.xtext.aRM.STR_OP;
import org.xtext.aRM.SUB_OP;
import org.xtext.aRM.SVC_OP;
import org.xtext.aRM.SWPB_OP;
import org.xtext.aRM.SWP_OP;
import org.xtext.aRM.TEQ_OP;
import org.xtext.aRM.TST_OP;
import org.xtext.aRM.UMLAL_OP;
import org.xtext.aRM.UMULL_OP;
import org.xtext.aRM.bkpt_instr;
import org.xtext.aRM.definition;
import org.xtext.aRM.description;
import org.xtext.aRM.flexible_offset;
import org.xtext.aRM.immediate_label;
import org.xtext.aRM.label_keyword;
import org.xtext.aRM.literal_numeric;
import org.xtext.aRM.numeric_backward_forward;
import org.xtext.aRM.randomEntry;
import org.xtext.aRM.rs_sh;
import org.xtext.aRM.variable;
import org.xtext.aRM.variable_colon;
import org.xtext.aRM.variable_variable;
import org.xtext.services.ARMGrammarAccess;

@SuppressWarnings("all")
public class ARMSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ARMGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == ARMPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case ARMPackage.ADC_OP:
				if(context == grammarAccess.getADC_OPRule()) {
					sequence_ADC_OP(context, (ADC_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getAdd_sub_instrRule()) {
					sequence_ADC_OP_add_sub_instr(context, (ADC_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.ADD_OP:
				if(context == grammarAccess.getADD_OPRule()) {
					sequence_ADD_OP(context, (ADD_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getAdd_sub_instrRule()) {
					sequence_ADD_OP_add_sub_instr(context, (ADD_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.ADRL_OP:
				if(context == grammarAccess.getADRL_OPRule()) {
					sequence_ADRL_OP(context, (ADRL_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getAdd_sub_instrRule()) {
					sequence_ADRL_OP_add_sub_instr(context, (ADRL_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getAdrl_adr_instrRule()) {
					sequence_ADRL_OP_adrl_adr_instr(context, (ADRL_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.ADR_OP:
				if(context == grammarAccess.getADR_OPRule()) {
					sequence_ADR_OP(context, (ADR_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getAdd_sub_instrRule()) {
					sequence_ADR_OP_add_sub_instr(context, (ADR_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getAdrl_adr_instrRule()) {
					sequence_ADR_OP_adrl_adr_instr(context, (ADR_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.AND_OP:
				if(context == grammarAccess.getAND_OPRule()) {
					sequence_AND_OP(context, (AND_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getLogical_instrRule()) {
					sequence_AND_OP_logical_instr(context, (AND_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.APSR_FLAG_E:
				sequence_APSR_FLAG_E(context, (APSR_FLAG_E) semanticObject); 
				return; 
			case ARMPackage.ARM_MACHINE_DIRECTIVES_ALIGN:
				if(context == grammarAccess.getARM_MACHINE_DIRECTIVES_alignRule()) {
					sequence_ARM_MACHINE_DIRECTIVES_align(context, (ARM_MACHINE_DIRECTIVES_align) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getCcodeRule()) {
					sequence_ARM_MACHINE_DIRECTIVES_align_Ccode(context, (ARM_MACHINE_DIRECTIVES_align) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.ARM_MACHINE_DIRECTIVES:
				if(context == grammarAccess.getARM_Machine_DirectivesRule()) {
					sequence_ARM_Machine_Directives(context, (ARM_Machine_Directives) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getCcodeRule()) {
					sequence_ARM_Machine_Directives_Ccode(context, (ARM_Machine_Directives) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.ARM_MACHINE_DIRECTIVES_CODE:
				if(context == grammarAccess.getARM_Machine_Directives_codeRule()) {
					sequence_ARM_Machine_Directives_code(context, (ARM_Machine_Directives_code) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getCcodeRule()) {
					sequence_ARM_Machine_Directives_code_Ccode(context, (ARM_Machine_Directives_code) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.ARM_MACHINE_DIRECTIVES_SAVE:
				if(context == grammarAccess.getARM_Machine_Directives_saveRule()) {
					sequence_ARM_Machine_Directives_save(context, (ARM_Machine_Directives_save) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getCcodeRule()) {
					sequence_ARM_Machine_Directives_save_Ccode(context, (ARM_Machine_Directives_save) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.ARM_MACHINE_DIRECTIVES_SYNTAX:
				sequence_ARM_Machine_Directives_syntax(context, (ARM_Machine_Directives_syntax) semanticObject); 
				return; 
			case ARMPackage.ASR_OP:
				if(context == grammarAccess.getASR_OPRule()) {
					sequence_ASR_OP(context, (ASR_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getShift_instrRule()) {
					sequence_ASR_OP_shift_instr(context, (ASR_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.ASSEMBER_DIRECTIVES_TYPE:
				if(context == grammarAccess.getAssember_Directives_typeRule()) {
					sequence_Assember_Directives_type(context, (Assember_Directives_type) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getCcodeRule()) {
					sequence_Assember_Directives_type_Ccode(context, (Assember_Directives_type) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.ASSEMBLER_DIRECTIVES:
				if(context == grammarAccess.getAssembler_DirectivesRule()) {
					sequence_Assembler_Directives(context, (Assembler_Directives) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getCcodeRule()) {
					sequence_Assembler_Directives_Ccode(context, (Assembler_Directives) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.ASSEMBLER_DIRECTIVES_ENDM:
				sequence_Assembler_Directives_endm(context, (Assembler_Directives_endm) semanticObject); 
				return; 
			case ARMPackage.ASSEMBLER_DIRECTIVES_EQU:
				if(context == grammarAccess.getAssembler_Directives_equRule()) {
					sequence_Assembler_Directives_equ(context, (Assembler_Directives_equ) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getCcodeRule()) {
					sequence_Assembler_Directives_equ_Ccode(context, (Assembler_Directives_equ) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.ASSEMBLER_DIRECTIVES_MACRO:
				if(context == grammarAccess.getAssembler_Directives_macroRule()) {
					sequence_Assembler_Directives_macro(context, (Assembler_Directives_macro) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getCcodeRule()) {
					sequence_Assembler_Directives_macro_Ccode(context, (Assembler_Directives_macro) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.BAREL_SHIFT_REGISTER:
				if(context == grammarAccess.getBAREL_SHIFT_REGISTERRule()) {
					sequence_BAREL_SHIFT_REGISTER(context, (BAREL_SHIFT_REGISTER) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getOpshRule()) {
					sequence_BAREL_SHIFT_REGISTER_opsh(context, (BAREL_SHIFT_REGISTER) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getRs_shRule()) {
					sequence_BAREL_SHIFT_REGISTER_rs_sh(context, (BAREL_SHIFT_REGISTER) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.BIC_OP:
				if(context == grammarAccess.getBIC_OPRule()) {
					sequence_BIC_OP(context, (BIC_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getLogical_instrRule()) {
					sequence_BIC_OP_logical_instr(context, (BIC_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.BLX_OP:
				if(context == grammarAccess.getBLX_OPRule()) {
					sequence_BLX_OP(context, (BLX_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getBranch_instrRule()) {
					sequence_BLX_OP_branch_instr(context, (BLX_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.BL_OP:
				if(context == grammarAccess.getBL_OPRule()) {
					sequence_BL_OP(context, (BL_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getBranch_instrRule()) {
					sequence_BL_OP_branch_instr(context, (BL_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.BXJ_OP:
				if(context == grammarAccess.getBXJ_OPRule()) {
					sequence_BXJ_OP(context, (BXJ_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getBranch_instrRule()) {
					sequence_BXJ_OP_branch_instr(context, (BXJ_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.BX_OP:
				if(context == grammarAccess.getBX_OPRule()) {
					sequence_BX_OP(context, (BX_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getBranch_instrRule()) {
					sequence_BX_OP_branch_instr(context, (BX_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.BOP:
				if(context == grammarAccess.getB_OPRule()) {
					sequence_B_OP(context, (B_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getBranch_instrRule()) {
					sequence_B_OP_branch_instr(context, (B_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.CEXTEND_CODE:
				if(context == grammarAccess.getCExtendCodeRule()) {
					sequence_CExtendCode(context, (CExtendCode) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getCcodeRule()) {
					sequence_CExtendCode_Ccode(context, (CExtendCode) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.CEXTENDASCIZ:
				if(context == grammarAccess.getCExtendascizRule()) {
					sequence_CExtendasciz(context, (CExtendasciz) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getCcodeRule()) {
					sequence_CExtendasciz_Ccode(context, (CExtendasciz) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.CLZ_OP:
				if(context == grammarAccess.getCLZ_OPRule()) {
					sequence_CLZ_OP(context, (CLZ_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getClz_instrRule()) {
					sequence_CLZ_OP_clz_instr(context, (CLZ_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.CLANG:
				if(context == grammarAccess.getCLangRule()) {
					sequence_CLang(context, (CLang) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getCcodeRule()) {
					sequence_CLang_Ccode(context, (CLang) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.CMN_OP:
				if(context == grammarAccess.getCMN_OPRule()) {
					sequence_CMN_OP(context, (CMN_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getCompare_test_instrRule()) {
					sequence_CMN_OP_compare_test_instr(context, (CMN_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.CMP_OP:
				if(context == grammarAccess.getCMP_OPRule()) {
					sequence_CMP_OP(context, (CMP_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getCompare_test_instrRule()) {
					sequence_CMP_OP_compare_test_instr(context, (CMP_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.CCODE:
				sequence_Ccode(context, (Ccode) semanticObject); 
				return; 
			case ARMPackage.EOR_OP:
				if(context == grammarAccess.getEOR_OPRule()) {
					sequence_EOR_OP(context, (EOR_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getLogical_instrRule()) {
					sequence_EOR_OP_logical_instr(context, (EOR_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.LDM_OP:
				if(context == grammarAccess.getLDM_OPRule()) {
					sequence_LDM_OP(context, (LDM_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getLdm_instrRule()) {
					sequence_LDM_OP_ldm_instr(context, (LDM_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.LDR_OP:
				if(context == grammarAccess.getLDR_OPRule()) {
					sequence_LDR_OP(context, (LDR_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getLdr_str_irpre_instrRule()) {
					sequence_LDR_OP_ldr_str_irpre_instr(context, (LDR_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getLdr_str_irpsot_instrRule()) {
					sequence_LDR_OP_ldr_str_irpsot_instr(context, (LDR_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getLdr_str_rpost_instrRule()) {
					sequence_LDR_OP_ldr_str_rpost_instr(context, (LDR_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getLdr_str_spre_instrRule()) {
					sequence_LDR_OP_ldr_str_spre_instr(context, (LDR_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.LSL_OP:
				if(context == grammarAccess.getLSL_OPRule()) {
					sequence_LSL_OP(context, (LSL_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getShift_instrRule()) {
					sequence_LSL_OP_shift_instr(context, (LSL_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.LSR_OP:
				if(context == grammarAccess.getLSR_OPRule()) {
					sequence_LSR_OP(context, (LSR_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getShift_instrRule()) {
					sequence_LSR_OP_shift_instr(context, (LSR_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.MLA_OP:
				if(context == grammarAccess.getMLA_OPRule()) {
					sequence_MLA_OP(context, (MLA_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getMul_4R_instrRule()) {
					sequence_MLA_OP_mul_4R_instr(context, (MLA_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.MLS_OP:
				if(context == grammarAccess.getMLS_OPRule()) {
					sequence_MLS_OP(context, (MLS_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getMul_4R_instrRule()) {
					sequence_MLS_OP_mul_4R_instr(context, (MLS_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.MOV_OP:
				if(context == grammarAccess.getMOV_OPRule()) {
					sequence_MOV_OP(context, (MOV_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getMov_instrRule()) {
					sequence_MOV_OP_mov_instr(context, (MOV_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.MRS_OP:
				if(context == grammarAccess.getMRS_OPRule()) {
					sequence_MRS_OP(context, (MRS_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getMrs_instrRule()) {
					sequence_MRS_OP_mrs_instr(context, (MRS_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.MSR_OP:
				if(context == grammarAccess.getMSR_OPRule()) {
					sequence_MSR_OP(context, (MSR_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getMsr_instrRule()) {
					sequence_MSR_OP_msr_instr(context, (MSR_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.MUL_OP:
				if(context == grammarAccess.getMUL_OPRule()) {
					sequence_MUL_OP(context, (MUL_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getMul_3R_instrRule()) {
					sequence_MUL_OP_mul_3R_instr(context, (MUL_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.MVN_OP:
				if(context == grammarAccess.getMVN_OPRule()) {
					sequence_MVN_OP(context, (MVN_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getMov_instrRule()) {
					sequence_MVN_OP_mov_instr(context, (MVN_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case ARMPackage.NOP:
				sequence_NOP(context, (NOP) semanticObject); 
				return; 
			case ARMPackage.ORN_OP:
				if(context == grammarAccess.getORN_OPRule()) {
					sequence_ORN_OP(context, (ORN_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getLogical_instrRule()) {
					sequence_ORN_OP_logical_instr(context, (ORN_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.ORR_OP:
				if(context == grammarAccess.getORR_OPRule()) {
					sequence_ORR_OP(context, (ORR_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getLogical_instrRule()) {
					sequence_ORR_OP_logical_instr(context, (ORR_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.POP_OP:
				if(context == grammarAccess.getPOP_OPRule()) {
					sequence_POP_OP(context, (POP_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getPush_pop_instrRule()) {
					sequence_POP_OP_push_pop_instr(context, (POP_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.PREPROCESSOR:
				if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getCcodeRule()) {
					sequence_Ccode_PREPROCESSOR(context, (PREPROCESSOR) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPREPROCESSORRule()) {
					sequence_PREPROCESSOR(context, (PREPROCESSOR) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.PREPROCESSOR_DEFINE:
				if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getCcodeRule()) {
					sequence_Ccode_PREPROCESSOR_DEFINE(context, (PREPROCESSOR_DEFINE) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPREPROCESSOR_DEFINERule()) {
					sequence_PREPROCESSOR_DEFINE(context, (PREPROCESSOR_DEFINE) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.PREPROCESSOR_ELSE:
				sequence_PREPROCESSOR_ELSE(context, (PREPROCESSOR_ELSE) semanticObject); 
				return; 
			case ARMPackage.PREPROCESSOR_ENDIF:
				sequence_PREPROCESSOR_ENDIF(context, (PREPROCESSOR_ENDIF) semanticObject); 
				return; 
			case ARMPackage.PSR_FIELD_E:
				sequence_PSR_FIELD_E(context, (PSR_FIELD_E) semanticObject); 
				return; 
			case ARMPackage.PUSH_OP:
				if(context == grammarAccess.getPUSH_OPRule()) {
					sequence_PUSH_OP(context, (PUSH_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getPush_pop_instrRule()) {
					sequence_PUSH_OP_push_pop_instr(context, (PUSH_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.REGISTER:
				if(context == grammarAccess.getOperand2Rule()) {
					sequence_Operand2_REGISTER(context, (REGISTER) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getREGISTERRule() ||
				   context == grammarAccess.getRs_shRule()) {
					sequence_REGISTER(context, (REGISTER) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.ROR_OP:
				if(context == grammarAccess.getROR_OPRule()) {
					sequence_ROR_OP(context, (ROR_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getShift_instrRule()) {
					sequence_ROR_OP_shift_instr(context, (ROR_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.RRX_OP:
				if(context == grammarAccess.getRRX_OPRule()) {
					sequence_RRX_OP(context, (RRX_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getShift_instrRule()) {
					sequence_RRX_OP_shift_instr(context, (RRX_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.RSB_OP:
				if(context == grammarAccess.getRSB_OPRule()) {
					sequence_RSB_OP(context, (RSB_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getAdd_sub_instrRule()) {
					sequence_RSB_OP_add_sub_instr(context, (RSB_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.RSC_OP:
				if(context == grammarAccess.getRSC_OPRule()) {
					sequence_RSC_OP(context, (RSC_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getAdd_sub_instrRule()) {
					sequence_RSC_OP_add_sub_instr(context, (RSC_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.SBC_OP:
				if(context == grammarAccess.getSBC_OPRule()) {
					sequence_SBC_OP(context, (SBC_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getAdd_sub_instrRule()) {
					sequence_SBC_OP_add_sub_instr(context, (SBC_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.SMLAL_OP:
				if(context == grammarAccess.getSMLAL_OPRule()) {
					sequence_SMLAL_OP(context, (SMLAL_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getMul_4R_instrRule()) {
					sequence_SMLAL_OP_mul_4R_instr(context, (SMLAL_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.SMLAW_OP:
				if(context == grammarAccess.getSMLAW_OPRule()) {
					sequence_SMLAW_OP(context, (SMLAW_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getMul_4R_instrRule()) {
					sequence_SMLAW_OP_mul_4R_instr(context, (SMLAW_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.SMLA_OP:
				if(context == grammarAccess.getSMLA_OPRule()) {
					sequence_SMLA_OP(context, (SMLA_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getMul_4R_instrRule()) {
					sequence_SMLA_OP_mul_4R_instr(context, (SMLA_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.SMULL_OP:
				if(context == grammarAccess.getSMULL_OPRule()) {
					sequence_SMULL_OP(context, (SMULL_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getMul_4R_instrRule()) {
					sequence_SMULL_OP_mul_4R_instr(context, (SMULL_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.SMULW_OP:
				if(context == grammarAccess.getSMULW_OPRule()) {
					sequence_SMULW_OP(context, (SMULW_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getMul_3R_instrRule()) {
					sequence_SMULW_OP_mul_3R_instr(context, (SMULW_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.SMUL_OP:
				if(context == grammarAccess.getSMUL_OPRule()) {
					sequence_SMUL_OP(context, (SMUL_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getMul_3R_instrRule()) {
					sequence_SMUL_OP_mul_3R_instr(context, (SMUL_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.STM_OP:
				if(context == grammarAccess.getSTM_OPRule()) {
					sequence_STM_OP(context, (STM_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getLdm_instrRule()) {
					sequence_STM_OP_ldm_instr(context, (STM_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.STR_OP:
				if(context == grammarAccess.getSTR_OPRule()) {
					sequence_STR_OP(context, (STR_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getLdr_str_irpre_instrRule()) {
					sequence_STR_OP_ldr_str_irpre_instr(context, (STR_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getLdr_str_irpsot_instrRule()) {
					sequence_STR_OP_ldr_str_irpsot_instr(context, (STR_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getLdr_str_rpost_instrRule()) {
					sequence_STR_OP_ldr_str_rpost_instr(context, (STR_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getLdr_str_spre_instrRule()) {
					sequence_STR_OP_ldr_str_spre_instr(context, (STR_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.SUB_OP:
				if(context == grammarAccess.getSUB_OPRule()) {
					sequence_SUB_OP(context, (SUB_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getAdd_sub_instrRule()) {
					sequence_SUB_OP_add_sub_instr(context, (SUB_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.SVC_OP:
				if(context == grammarAccess.getSVC_OPRule()) {
					sequence_SVC_OP(context, (SVC_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getSvc_instrRule()) {
					sequence_SVC_OP_svc_instr(context, (SVC_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.SWPB_OP:
				if(context == grammarAccess.getSWPB_OPRule()) {
					sequence_SWPB_OP(context, (SWPB_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getSwp_instrRule()) {
					sequence_SWPB_OP_swp_instr(context, (SWPB_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.SWP_OP:
				if(context == grammarAccess.getSWP_OPRule()) {
					sequence_SWP_OP(context, (SWP_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getSwp_instrRule()) {
					sequence_SWP_OP_swp_instr(context, (SWP_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.TEQ_OP:
				if(context == grammarAccess.getTEQ_OPRule()) {
					sequence_TEQ_OP(context, (TEQ_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getCompare_test_instrRule()) {
					sequence_TEQ_OP_compare_test_instr(context, (TEQ_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.TST_OP:
				if(context == grammarAccess.getTST_OPRule()) {
					sequence_TST_OP(context, (TST_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getCompare_test_instrRule()) {
					sequence_TST_OP_compare_test_instr(context, (TST_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.UMLAL_OP:
				if(context == grammarAccess.getUMLAL_OPRule()) {
					sequence_UMLAL_OP(context, (UMLAL_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getMul_4R_instrRule()) {
					sequence_UMLAL_OP_mul_4R_instr(context, (UMLAL_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.UMULL_OP:
				if(context == grammarAccess.getUMULL_OPRule()) {
					sequence_UMULL_OP(context, (UMULL_OP) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getARMInstrRule() ||
				   context == grammarAccess.getOperationInstrRule() ||
				   context == grammarAccess.getMul_4R_instrRule()) {
					sequence_UMULL_OP_mul_4R_instr(context, (UMULL_OP) semanticObject); 
					return; 
				}
				else break;
			case ARMPackage.BKPT_INSTR:
				sequence_bkpt_instr(context, (bkpt_instr) semanticObject); 
				return; 
			case ARMPackage.DEFINITION:
				sequence_definition(context, (definition) semanticObject); 
				return; 
			case ARMPackage.DESCRIPTION:
				sequence_description(context, (description) semanticObject); 
				return; 
			case ARMPackage.FLEXIBLE_OFFSET:
				sequence_flexible_offset(context, (flexible_offset) semanticObject); 
				return; 
			case ARMPackage.IMMEDIATE_LABEL:
				sequence_immediate_label(context, (immediate_label) semanticObject); 
				return; 
			case ARMPackage.LABEL_KEYWORD:
				sequence_label_keyword(context, (label_keyword) semanticObject); 
				return; 
			case ARMPackage.LITERAL_NUMERIC:
				sequence_literal_numeric(context, (literal_numeric) semanticObject); 
				return; 
			case ARMPackage.NUMERIC_BACKWARD_FORWARD:
				sequence_numeric_backward_forward(context, (numeric_backward_forward) semanticObject); 
				return; 
			case ARMPackage.RANDOM_ENTRY:
				sequence_randomEntry(context, (randomEntry) semanticObject); 
				return; 
			case ARMPackage.RS_SH:
				sequence_rs_sh(context, (rs_sh) semanticObject); 
				return; 
			case ARMPackage.VARIABLE:
				sequence_variable(context, (variable) semanticObject); 
				return; 
			case ARMPackage.VARIABLE_COLON:
				sequence_variable_colon(context, (variable_colon) semanticObject); 
				return; 
			case ARMPackage.VARIABLE_VARIABLE:
				sequence_variable_variable(context, (variable_variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (op?='adc' | op?='ADC' | op?=ADC_COM)
	 */
	protected void sequence_ADC_OP(EObject context, ADC_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='adc' | op?='ADC' | op?=ADC_COM) register+=REGISTER register+=REGISTER Operand2+=Operand2)
	 */
	protected void sequence_ADC_OP_add_sub_instr(EObject context, ADC_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='add' | op?='ADD' | op?=ADD_COM)
	 */
	protected void sequence_ADD_OP(EObject context, ADD_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='add' | op?='ADD' | op?=ADD_COM) register+=REGISTER register+=REGISTER Operand2+=Operand2)
	 */
	protected void sequence_ADD_OP_add_sub_instr(EObject context, ADD_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='adrl' | op?='ADRL' | op?=ADRL_COM)
	 */
	protected void sequence_ADRL_OP(EObject context, ADRL_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='adrl' | op?='ADRL' | op?=ADRL_COM) register+=REGISTER register+=REGISTER Operand2+=Operand2)
	 */
	protected void sequence_ADRL_OP_add_sub_instr(EObject context, ADRL_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='adrl' | op?='ADRL' | op?=ADRL_COM) register+=REGISTER expression+=randomEntry+)
	 */
	protected void sequence_ADRL_OP_adrl_adr_instr(EObject context, ADRL_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='adr' | op?='ADR' | op?=ADR_COM)
	 */
	protected void sequence_ADR_OP(EObject context, ADR_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='adr' | op?='ADR' | op?=ADR_COM) register+=REGISTER register+=REGISTER Operand2+=Operand2)
	 */
	protected void sequence_ADR_OP_add_sub_instr(EObject context, ADR_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='adr' | op?='ADR' | op?=ADR_COM) register+=REGISTER expression+=randomEntry+)
	 */
	protected void sequence_ADR_OP_adrl_adr_instr(EObject context, ADR_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='and' | op?='AND' | op?=AND_COM)
	 */
	protected void sequence_AND_OP(EObject context, AND_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='and' | op?='AND' | op?=AND_COM) register+=REGISTER register+=REGISTER? Operand2+=Operand2)
	 */
	protected void sequence_AND_OP_logical_instr(EObject context, AND_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     op+=APSR_FLAG
	 */
	protected void sequence_APSR_FLAG_E(EObject context, APSR_FLAG_E semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (dot?='.' code?='align')
	 */
	protected void sequence_ARM_MACHINE_DIRECTIVES_align(EObject context, ARM_MACHINE_DIRECTIVES_align semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (dot?='.' code?='align' (int=myINT | hex=HEX)?)
	 */
	protected void sequence_ARM_MACHINE_DIRECTIVES_align_Ccode(EObject context, ARM_MACHINE_DIRECTIVES_align semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         dot?='.' 
	 *         (
	 *             code?='2byte' | 
	 *             code?='4byte' | 
	 *             code?='8byte' | 
	 *             code?='arch' | 
	 *             code?='arch_extension' | 
	 *             code?='arm' | 
	 *             code?='bss' | 
	 *             code?='cantunwind' | 
	 *             code?='cpu' | 
	 *             code?='even' | 
	 *             code?='extend' | 
	 *             code?='ldouble' | 
	 *             code?='fnend' | 
	 *             code?='fnstart' | 
	 *             code?='force_thumb' | 
	 *             code?='fpu' | 
	 *             code?='handlerdata' | 
	 *             code?='ltorg' | 
	 *             code?='movsp' | 
	 *             code?='object_arch' | 
	 *             code?='packed' | 
	 *             code?='personality' | 
	 *             code?='personalityindex' | 
	 *             code?='pool' | 
	 *             code?='secrel32' | 
	 *             code?='thumb' | 
	 *             code?='thumb_func' | 
	 *             code?='thumb_set' | 
	 *             code?='space' | 
	 *             code?='byte'
	 *         )
	 *     )
	 */
	protected void sequence_ARM_Machine_Directives(EObject context, ARM_Machine_Directives semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         dot?='.' 
	 *         (
	 *             code?='2byte' | 
	 *             code?='4byte' | 
	 *             code?='8byte' | 
	 *             code?='arch' | 
	 *             code?='arch_extension' | 
	 *             code?='arm' | 
	 *             code?='bss' | 
	 *             code?='cantunwind' | 
	 *             code?='cpu' | 
	 *             code?='even' | 
	 *             code?='extend' | 
	 *             code?='ldouble' | 
	 *             code?='fnend' | 
	 *             code?='fnstart' | 
	 *             code?='force_thumb' | 
	 *             code?='fpu' | 
	 *             code?='handlerdata' | 
	 *             code?='ltorg' | 
	 *             code?='movsp' | 
	 *             code?='object_arch' | 
	 *             code?='packed' | 
	 *             code?='personality' | 
	 *             code?='personalityindex' | 
	 *             code?='pool' | 
	 *             code?='secrel32' | 
	 *             code?='thumb' | 
	 *             code?='thumb_func' | 
	 *             code?='thumb_set' | 
	 *             code?='space' | 
	 *             code?='byte'
	 *         ) 
	 *         (expression=variable expression2=variable*)?
	 *     )
	 */
	protected void sequence_ARM_Machine_Directives_Ccode(EObject context, ARM_Machine_Directives semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (dot?='.' code?='code')
	 */
	protected void sequence_ARM_Machine_Directives_code(EObject context, ARM_Machine_Directives_code semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (dot?='.' code?='code' (arm?='16' | thumb?='32'))
	 */
	protected void sequence_ARM_Machine_Directives_code_Ccode(EObject context, ARM_Machine_Directives_code semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (dot?='.' code?='save')
	 */
	protected void sequence_ARM_Machine_Directives_save(EObject context, ARM_Machine_Directives_save semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (dot?='.' code?='save' reglist+=ID (reglist+=ID | reglistNum+=myINT)*)
	 */
	protected void sequence_ARM_Machine_Directives_save_Ccode(EObject context, ARM_Machine_Directives_save semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (dot?='.' code?='syntax')
	 */
	protected void sequence_ARM_Machine_Directives_syntax(EObject context, ARM_Machine_Directives_syntax semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='asr' | op?='ASR' | op?=ASR_COM)
	 */
	protected void sequence_ASR_OP(EObject context, ASR_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='asr' | op?='ASR' | op?=ASR_COM) register+=REGISTER register+=REGISTER rs_sh+=rs_sh)
	 */
	protected void sequence_ASR_OP_shift_instr(EObject context, ASR_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (dot?='.' code?='type')
	 */
	protected void sequence_Assember_Directives_type(EObject context, Assember_Directives_type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (dot?='.' code?='type' expression+=variable description+=description?)
	 */
	protected void sequence_Assember_Directives_type_Ccode(EObject context, Assember_Directives_type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (dot?='.' (code?='long' | code?='word' | code?='ascii'))
	 */
	protected void sequence_Assembler_Directives(EObject context, Assembler_Directives semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (dot?='.' (code?='long' | code?='word' | code?='ascii') expression=variable expression2=variable*)
	 */
	protected void sequence_Assembler_Directives_Ccode(EObject context, Assembler_Directives semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (dot?='.' code?='endm')
	 */
	protected void sequence_Assembler_Directives_endm(EObject context, Assembler_Directives_endm semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (dot?='.' code?='equ')
	 */
	protected void sequence_Assembler_Directives_equ(EObject context, Assembler_Directives_equ semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (dot?='.' code?='equ' (expression+=variable expression2+=variable*)?)
	 */
	protected void sequence_Assembler_Directives_equ_Ccode(EObject context, Assembler_Directives_equ semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (dot?='.' code?='macro')
	 */
	protected void sequence_Assembler_Directives_macro(EObject context, Assembler_Directives_macro semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (dot?='.' code?='macro' expression=definition+ definition=definition*)
	 */
	protected void sequence_Assembler_Directives_macro_Ccode(EObject context, Assembler_Directives_macro semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         BAREL_SHIFT_REGISTER?='asr' | 
	 *         BAREL_SHIFT_REGISTER?='lsl' | 
	 *         BAREL_SHIFT_REGISTER?='lsr' | 
	 *         BAREL_SHIFT_REGISTER?='ror' | 
	 *         BAREL_SHIFT_REGISTER?='ASR' | 
	 *         BAREL_SHIFT_REGISTER?='LSL' | 
	 *         BAREL_SHIFT_REGISTER?='LSR' | 
	 *         BAREL_SHIFT_REGISTER?='ROR' | 
	 *         BAREL_SHIFT_REGISTER?=ID
	 *     )
	 */
	protected void sequence_BAREL_SHIFT_REGISTER(EObject context, BAREL_SHIFT_REGISTER semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (
	 *             BAREL_SHIFT_REGISTER?='asr' | 
	 *             BAREL_SHIFT_REGISTER?='lsl' | 
	 *             BAREL_SHIFT_REGISTER?='lsr' | 
	 *             BAREL_SHIFT_REGISTER?='ror' | 
	 *             BAREL_SHIFT_REGISTER?='ASR' | 
	 *             BAREL_SHIFT_REGISTER?='LSL' | 
	 *             BAREL_SHIFT_REGISTER?='LSR' | 
	 *             BAREL_SHIFT_REGISTER?='ROR' | 
	 *             BAREL_SHIFT_REGISTER?=ID
	 *         ) 
	 *         (immediate_label+=immediate_label | register+=REGISTER)
	 *     )
	 */
	protected void sequence_BAREL_SHIFT_REGISTER_opsh(EObject context, BAREL_SHIFT_REGISTER semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (
	 *             BAREL_SHIFT_REGISTER?='asr' | 
	 *             BAREL_SHIFT_REGISTER?='lsl' | 
	 *             BAREL_SHIFT_REGISTER?='lsr' | 
	 *             BAREL_SHIFT_REGISTER?='ror' | 
	 *             BAREL_SHIFT_REGISTER?='ASR' | 
	 *             BAREL_SHIFT_REGISTER?='LSL' | 
	 *             BAREL_SHIFT_REGISTER?='LSR' | 
	 *             BAREL_SHIFT_REGISTER?='ROR' | 
	 *             BAREL_SHIFT_REGISTER?=ID
	 *         ) 
	 *         immediate_label+=immediate_label
	 *     )
	 */
	protected void sequence_BAREL_SHIFT_REGISTER_rs_sh(EObject context, BAREL_SHIFT_REGISTER semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='bic' | op?='BIC' | op?=BIC_COM)
	 */
	protected void sequence_BIC_OP(EObject context, BIC_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='bic' | op?='BIC' | op?=BIC_COM) register+=REGISTER register+=REGISTER? Operand2+=Operand2)
	 */
	protected void sequence_BIC_OP_logical_instr(EObject context, BIC_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='blx' | op?='BLX' | op?=BLX_COM)
	 */
	protected void sequence_BLX_OP(EObject context, BLX_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='blx' | op?='BLX' | op?=BLX_COM) (immediate_label+=immediate_label | register+=REGISTER))
	 */
	protected void sequence_BLX_OP_branch_instr(EObject context, BLX_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='bl' | op?='BL' | op?=BL_COM)
	 */
	protected void sequence_BL_OP(EObject context, BL_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='bl' | op?='BL' | op?=BL_COM) (immediate_label+=immediate_label | register+=REGISTER))
	 */
	protected void sequence_BL_OP_branch_instr(EObject context, BL_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='bxj' | op?='BXJ' | op?=BXJ_COM)
	 */
	protected void sequence_BXJ_OP(EObject context, BXJ_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='bxj' | op?='BXJ' | op?=BXJ_COM) (immediate_label+=immediate_label | register+=REGISTER))
	 */
	protected void sequence_BXJ_OP_branch_instr(EObject context, BXJ_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='bx' | op?='BX' | op?=BX_COM)
	 */
	protected void sequence_BX_OP(EObject context, BX_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='bx' | op?='BX' | op?=BX_COM) (immediate_label+=immediate_label | register+=REGISTER))
	 */
	protected void sequence_BX_OP_branch_instr(EObject context, BX_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='b' | op?='B' | op?=B_COM)
	 */
	protected void sequence_B_OP(EObject context, B_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='b' | op?='B' | op?=B_COM) (immediate_label+=immediate_label | register+=REGISTER))
	 */
	protected void sequence_B_OP_branch_instr(EObject context, B_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (dot?='.' (code?='extern' | code?='data' | code?='text' | code?='global' | code?='end'))
	 */
	protected void sequence_CExtendCode(EObject context, CExtendCode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (dot?='.' (code?='extern' | code?='data' | code?='text' | code?='global' | code?='end') (expression+=variable expression2+=variable*)?)
	 */
	protected void sequence_CExtendCode_Ccode(EObject context, CExtendCode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (dot?='.' code?='asciz')
	 */
	protected void sequence_CExtendasciz(EObject context, CExtendasciz semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (dot?='.' code?='asciz' expression=variable?)
	 */
	protected void sequence_CExtendasciz_Ccode(EObject context, CExtendasciz semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='clz' | op?='CLZ' | op?=CLZ_COM)
	 */
	protected void sequence_CLZ_OP(EObject context, CLZ_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='clz' | op?='CLZ' | op?=CLZ_COM) register+=REGISTER register+=REGISTER)
	 */
	protected void sequence_CLZ_OP_clz_instr(EObject context, CLZ_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         code?='title:' | 
	 *         code?='prompt:' | 
	 *         code?='Content:' | 
	 *         code?='main1:' | 
	 *         code?='break:' | 
	 *         code?='loop:' | 
	 *         code?='exit_main:' | 
	 *         code?='start:' | 
	 *         code?='stop:' | 
	 *         code?='START:' | 
	 *         code?='STOP:'
	 *     )
	 */
	protected void sequence_CLang(EObject context, CLang semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (
	 *             code?='title:' | 
	 *             code?='prompt:' | 
	 *             code?='Content:' | 
	 *             code?='main1:' | 
	 *             code?='break:' | 
	 *             code?='loop:' | 
	 *             code?='exit_main:' | 
	 *             code?='start:' | 
	 *             code?='stop:' | 
	 *             code?='START:' | 
	 *             code?='STOP:'
	 *         ) 
	 *         expression=variable?
	 *     )
	 */
	protected void sequence_CLang_Ccode(EObject context, CLang semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='cmn' | op?='CMN' | op?=CMN_COM)
	 */
	protected void sequence_CMN_OP(EObject context, CMN_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='cmn' | op?='CMN' | op?=CMN_COM) register+=REGISTER Operand2+=Operand2)
	 */
	protected void sequence_CMN_OP_compare_test_instr(EObject context, CMN_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='cmp' | op?='CMP' | op?=CMP_COM)
	 */
	protected void sequence_CMP_OP(EObject context, CMP_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='cmp' | op?='CMP' | op?=CMP_COM) register+=REGISTER Operand2+=Operand2)
	 */
	protected void sequence_CMP_OP_compare_test_instr(EObject context, CMP_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     label_keyword+=label_keyword
	 */
	protected void sequence_Ccode(EObject context, Ccode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (hash?='#' code?='define' (expression=variable expression2=variable*)?)
	 */
	protected void sequence_Ccode_PREPROCESSOR_DEFINE(EObject context, PREPROCESSOR_DEFINE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         hash?='#' 
	 *         (
	 *             code?='if' | 
	 *             code?='elif' | 
	 *             code?='error' | 
	 *             code?='pragma' | 
	 *             code?='undef' | 
	 *             code?='include' | 
	 *             code?='ifdef' | 
	 *             code?='ifndef' | 
	 *             code?='line'
	 *         ) 
	 *         (expression=variable expression2=variable*)?
	 *     )
	 */
	protected void sequence_Ccode_PREPROCESSOR(EObject context, PREPROCESSOR semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='eor' | op?='EOR' | op?=EOR_COM)
	 */
	protected void sequence_EOR_OP(EObject context, EOR_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='eor' | op?='EOR' | op?=EOR_COM) register+=REGISTER register+=REGISTER? Operand2+=Operand2)
	 */
	protected void sequence_EOR_OP_logical_instr(EObject context, EOR_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='ldm' | op?='LDM' | op?=LDM_COM)
	 */
	protected void sequence_LDM_OP(EObject context, LDM_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='ldm' | op?='LDM' | op?=LDM_COM) register+=REGISTER register+=REGISTER register+=REGISTER? (register+=REGISTER register+=REGISTER?)*)
	 */
	protected void sequence_LDM_OP_ldm_instr(EObject context, LDM_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='ldr' | op?='LDR' | op?=LDR_COM)
	 */
	protected void sequence_LDR_OP(EObject context, LDR_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (op?='ldr' | op?='LDR' | op?=LDR_COM) 
	 *         register+=REGISTER 
	 *         ((register+=REGISTER (register+=REGISTER | immediate_label+=immediate_label)?) | immediate_label+=immediate_label) 
	 *         immediate_label+=immediate_label?
	 *     )
	 */
	protected void sequence_LDR_OP_ldr_str_irpre_instr(EObject context, LDR_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='ldr' | op?='LDR' | op?=LDR_COM) register+=REGISTER register+=REGISTER (register+=REGISTER | immediate_label+=immediate_label))
	 */
	protected void sequence_LDR_OP_ldr_str_irpsot_instr(EObject context, LDR_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (op?='ldr' | op?='LDR' | op?=LDR_COM) 
	 *         register+=REGISTER 
	 *         register+=REGISTER 
	 *         register+=REGISTER 
	 *         BAREL_SHIFT_REGISTER+=BAREL_SHIFT_REGISTER 
	 *         immediate_label+=immediate_label
	 *     )
	 */
	protected void sequence_LDR_OP_ldr_str_rpost_instr(EObject context, LDR_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (op?='ldr' | op?='LDR' | op?=LDR_COM) 
	 *         register+=REGISTER 
	 *         register+=REGISTER 
	 *         register+=REGISTER 
	 *         BAREL_SHIFT_REGISTER+=BAREL_SHIFT_REGISTER 
	 *         immediate_label+=immediate_label
	 *     )
	 */
	protected void sequence_LDR_OP_ldr_str_spre_instr(EObject context, LDR_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='lsl' | op?='LSL' | op?=LSL_COM)
	 */
	protected void sequence_LSL_OP(EObject context, LSL_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='lsl' | op?='LSL' | op?=LSL_COM) register+=REGISTER register+=REGISTER rs_sh+=rs_sh)
	 */
	protected void sequence_LSL_OP_shift_instr(EObject context, LSL_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='lsr' | op?='LSR' | op?=LSR_COM)
	 */
	protected void sequence_LSR_OP(EObject context, LSR_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='lsr' | op?='LSR' | op?=LSR_COM) register+=REGISTER register+=REGISTER rs_sh+=rs_sh)
	 */
	protected void sequence_LSR_OP_shift_instr(EObject context, LSR_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='mla' | op?='MLA' | op?=MLA_COM)
	 */
	protected void sequence_MLA_OP(EObject context, MLA_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='mla' | op?='MLA' | op?=MLA_COM) register+=REGISTER register+=REGISTER register+=REGISTER register+=REGISTER)
	 */
	protected void sequence_MLA_OP_mul_4R_instr(EObject context, MLA_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='mls' | op?='MLS' | op?=MUL_4R_COM)
	 */
	protected void sequence_MLS_OP(EObject context, MLS_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='mls' | op?='MLS' | op?=MUL_4R_COM) register+=REGISTER register+=REGISTER register+=REGISTER register+=REGISTER)
	 */
	protected void sequence_MLS_OP_mul_4R_instr(EObject context, MLS_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='mov' | op?='MOV' | op?=MOV_COM)
	 */
	protected void sequence_MOV_OP(EObject context, MOV_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='mov' | op?='MOV' | op?=MOV_COM) register+=REGISTER Operand2+=Operand2)
	 */
	protected void sequence_MOV_OP_mov_instr(EObject context, MOV_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='mrs' | op?='MRS' | op?=MRS_COM)
	 */
	protected void sequence_MRS_OP(EObject context, MRS_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='mrs' | op?='MRS' | op?=MRS_COM) register+=REGISTER PSR_FIELD+=PSR_FIELD_E)
	 */
	protected void sequence_MRS_OP_mrs_instr(EObject context, MRS_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='msr' | op?='MSR' | op?=MSR_COM)
	 */
	protected void sequence_MSR_OP(EObject context, MSR_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (op?='msr' | op?='MSR' | op?=MSR_COM) 
	 *         (APSR_FLAG+=APSR_FLAG_E | PSR_FIELD+=PSR_FIELD_E) 
	 *         (register+=REGISTER | immediate_label+=immediate_label)
	 *     )
	 */
	protected void sequence_MSR_OP_msr_instr(EObject context, MSR_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='mul' | op?='MUL' | op?=MUL_3R_COM)
	 */
	protected void sequence_MUL_OP(EObject context, MUL_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='mul' | op?='MUL' | op?=MUL_3R_COM) register+=REGISTER register+=REGISTER register+=REGISTER)
	 */
	protected void sequence_MUL_OP_mul_3R_instr(EObject context, MUL_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='mvn' | op?='MVN' | op?=MVN_COM)
	 */
	protected void sequence_MVN_OP(EObject context, MVN_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='mvn' | op?='MVN' | op?=MVN_COM) register+=REGISTER Operand2+=Operand2)
	 */
	protected void sequence_MVN_OP_mov_instr(EObject context, MVN_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     elements+=ARMInstr*
	 */
	protected void sequence_Model(EObject context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='nop' | op?='NOP')
	 */
	protected void sequence_NOP(EObject context, NOP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='orn' | op?='ORN' | op?=ORN_COM)
	 */
	protected void sequence_ORN_OP(EObject context, ORN_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='orn' | op?='ORN' | op?=ORN_COM) register+=REGISTER register+=REGISTER? Operand2+=Operand2)
	 */
	protected void sequence_ORN_OP_logical_instr(EObject context, ORN_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='orr' | op?='ORR' | op?=ORR_COM)
	 */
	protected void sequence_ORR_OP(EObject context, ORR_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='orr' | op?='ORR' | op?=ORR_COM) register+=REGISTER register+=REGISTER? Operand2+=Operand2)
	 */
	protected void sequence_ORR_OP_logical_instr(EObject context, ORR_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (
	 *             r0?='r0' | 
	 *             r1?='r1' | 
	 *             r2?='r2' | 
	 *             r3?='r3' | 
	 *             r4?='r4' | 
	 *             r5?='r5' | 
	 *             r6?='r6' | 
	 *             r7?='r7' | 
	 *             r8?='r8' | 
	 *             r9?='r9' | 
	 *             r10?='r10' | 
	 *             r11?='r11' | 
	 *             r12?='r12' | 
	 *             r13?='r13' | 
	 *             r14?='r14' | 
	 *             r15?='r15' | 
	 *             rfp?='fp' | 
	 *             rip?='ip' | 
	 *             rsp?='sp' | 
	 *             rlr?='lr' | 
	 *             rpc?='pc' | 
	 *             R001?='R0' | 
	 *             R01?='R1' | 
	 *             R02?='R2' | 
	 *             R03?='R3' | 
	 *             R04?='R4' | 
	 *             R05?='R5' | 
	 *             R06?='R6' | 
	 *             R07?='R7' | 
	 *             R08?='R8' | 
	 *             R09?='R9' | 
	 *             R010?='R10' | 
	 *             R011?='R11' | 
	 *             R012?='R12' | 
	 *             R013?='R13' | 
	 *             R014?='R14' | 
	 *             R015?='R15' | 
	 *             R0FP?='FP' | 
	 *             R0IP?='IP' | 
	 *             R0SP?='SP' | 
	 *             R0LR?='LR' | 
	 *             R0PC?='PC'
	 *         ) 
	 *         opsh+=opsh?
	 *     )
	 */
	protected void sequence_Operand2_REGISTER(EObject context, REGISTER semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='pop' | op?='POP' | op?=POP_COM)
	 */
	protected void sequence_POP_OP(EObject context, POP_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='pop' | op?='POP' | op?=POP_COM) register+=REGISTER register+=REGISTER? (register+=REGISTER register+=REGISTER?)*)
	 */
	protected void sequence_POP_OP_push_pop_instr(EObject context, POP_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (hash?='#' code?='define')
	 */
	protected void sequence_PREPROCESSOR_DEFINE(EObject context, PREPROCESSOR_DEFINE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (hash?='#' code?='else')
	 */
	protected void sequence_PREPROCESSOR_ELSE(EObject context, PREPROCESSOR_ELSE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (hash?='#' code?='endif')
	 */
	protected void sequence_PREPROCESSOR_ENDIF(EObject context, PREPROCESSOR_ENDIF semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         hash?='#' 
	 *         (
	 *             code?='if' | 
	 *             code?='elif' | 
	 *             code?='error' | 
	 *             code?='pragma' | 
	 *             code?='undef' | 
	 *             code?='include' | 
	 *             code?='ifdef' | 
	 *             code?='ifndef' | 
	 *             code?='line'
	 *         )
	 *     )
	 */
	protected void sequence_PREPROCESSOR(EObject context, PREPROCESSOR semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     op+=PSR_FIELD
	 */
	protected void sequence_PSR_FIELD_E(EObject context, PSR_FIELD_E semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='push' | op?='PUSH' | op?=PUSH_COM)
	 */
	protected void sequence_PUSH_OP(EObject context, PUSH_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='push' | op?='PUSH' | op?=PUSH_COM) register+=REGISTER register+=REGISTER? (register+=REGISTER register+=REGISTER?)*)
	 */
	protected void sequence_PUSH_OP_push_pop_instr(EObject context, PUSH_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         r0?='r0' | 
	 *         r1?='r1' | 
	 *         r2?='r2' | 
	 *         r3?='r3' | 
	 *         r4?='r4' | 
	 *         r5?='r5' | 
	 *         r6?='r6' | 
	 *         r7?='r7' | 
	 *         r8?='r8' | 
	 *         r9?='r9' | 
	 *         r10?='r10' | 
	 *         r11?='r11' | 
	 *         r12?='r12' | 
	 *         r13?='r13' | 
	 *         r14?='r14' | 
	 *         r15?='r15' | 
	 *         rfp?='fp' | 
	 *         rip?='ip' | 
	 *         rsp?='sp' | 
	 *         rlr?='lr' | 
	 *         rpc?='pc' | 
	 *         R001?='R0' | 
	 *         R01?='R1' | 
	 *         R02?='R2' | 
	 *         R03?='R3' | 
	 *         R04?='R4' | 
	 *         R05?='R5' | 
	 *         R06?='R6' | 
	 *         R07?='R7' | 
	 *         R08?='R8' | 
	 *         R09?='R9' | 
	 *         R010?='R10' | 
	 *         R011?='R11' | 
	 *         R012?='R12' | 
	 *         R013?='R13' | 
	 *         R014?='R14' | 
	 *         R015?='R15' | 
	 *         R0FP?='FP' | 
	 *         R0IP?='IP' | 
	 *         R0SP?='SP' | 
	 *         R0LR?='LR' | 
	 *         R0PC?='PC'
	 *     )?
	 */
	protected void sequence_REGISTER(EObject context, REGISTER semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='ror' | op?='ROR' | op?=ROR_COM)
	 */
	protected void sequence_ROR_OP(EObject context, ROR_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='ror' | op?='ROR' | op?=ROR_COM) register+=REGISTER register+=REGISTER rs_sh+=rs_sh)
	 */
	protected void sequence_ROR_OP_shift_instr(EObject context, ROR_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='rrx' | op?='RRX' | op?=RRX_COM)
	 */
	protected void sequence_RRX_OP(EObject context, RRX_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='rrx' | op?='RRX' | op?=RRX_COM) register+=REGISTER register+=REGISTER rs_sh+=rs_sh)
	 */
	protected void sequence_RRX_OP_shift_instr(EObject context, RRX_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='rsb' | op?='RSB' | op?=RSB_COM)
	 */
	protected void sequence_RSB_OP(EObject context, RSB_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='rsb' | op?='RSB' | op?=RSB_COM) register+=REGISTER register+=REGISTER Operand2+=Operand2)
	 */
	protected void sequence_RSB_OP_add_sub_instr(EObject context, RSB_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='rsc' | op?='RSC' | op?=RSC_COM)
	 */
	protected void sequence_RSC_OP(EObject context, RSC_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='rsc' | op?='RSC' | op?=RSC_COM) register+=REGISTER register+=REGISTER Operand2+=Operand2)
	 */
	protected void sequence_RSC_OP_add_sub_instr(EObject context, RSC_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='sbc' | op?='SBC' | op?=SBC_COM)
	 */
	protected void sequence_SBC_OP(EObject context, SBC_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='sbc' | op?='SBC' | op?=SBC_COM) register+=REGISTER register+=REGISTER Operand2+=Operand2)
	 */
	protected void sequence_SBC_OP_add_sub_instr(EObject context, SBC_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='smlal' | op?='SMLAL' | op?=SMLAL_COM)
	 */
	protected void sequence_SMLAL_OP(EObject context, SMLAL_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='smlal' | op?='SMLAL' | op?=SMLAL_COM) register+=REGISTER register+=REGISTER register+=REGISTER register+=REGISTER)
	 */
	protected void sequence_SMLAL_OP_mul_4R_instr(EObject context, SMLAL_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='smlaw' | op?='SMLAW' | op?=SMLAW_COM)
	 */
	protected void sequence_SMLAW_OP(EObject context, SMLAW_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='smlaw' | op?='SMLAW' | op?=SMLAW_COM) register+=REGISTER register+=REGISTER register+=REGISTER register+=REGISTER)
	 */
	protected void sequence_SMLAW_OP_mul_4R_instr(EObject context, SMLAW_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='smla' | op?='SMLA' | op?=SMLA_COM)
	 */
	protected void sequence_SMLA_OP(EObject context, SMLA_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='smla' | op?='SMLA' | op?=SMLA_COM) register+=REGISTER register+=REGISTER register+=REGISTER register+=REGISTER)
	 */
	protected void sequence_SMLA_OP_mul_4R_instr(EObject context, SMLA_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='smull' | op?='SMULL' | op?=SMULL_COM)
	 */
	protected void sequence_SMULL_OP(EObject context, SMULL_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='smull' | op?='SMULL' | op?=SMULL_COM) register+=REGISTER register+=REGISTER register+=REGISTER register+=REGISTER)
	 */
	protected void sequence_SMULL_OP_mul_4R_instr(EObject context, SMULL_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='smulw' | op?='SMULW' | op?=SMULW_COM)
	 */
	protected void sequence_SMULW_OP(EObject context, SMULW_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='smulw' | op?='SMULW' | op?=SMULW_COM) register+=REGISTER register+=REGISTER register+=REGISTER)
	 */
	protected void sequence_SMULW_OP_mul_3R_instr(EObject context, SMULW_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='smul' | op?='SMUL' | op?=SMUL_COM)
	 */
	protected void sequence_SMUL_OP(EObject context, SMUL_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='smul' | op?='SMUL' | op?=SMUL_COM) register+=REGISTER register+=REGISTER register+=REGISTER)
	 */
	protected void sequence_SMUL_OP_mul_3R_instr(EObject context, SMUL_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='stm' | op?='STM' | op?=STM_COM)
	 */
	protected void sequence_STM_OP(EObject context, STM_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='stm' | op?='STM' | op?=STM_COM) register+=REGISTER register+=REGISTER register+=REGISTER? (register+=REGISTER register+=REGISTER?)*)
	 */
	protected void sequence_STM_OP_ldm_instr(EObject context, STM_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='str' | op?='STR' | op?=STR_COM)
	 */
	protected void sequence_STR_OP(EObject context, STR_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (op?='str' | op?='STR' | op?=STR_COM) 
	 *         register+=REGISTER 
	 *         ((register+=REGISTER (register+=REGISTER | immediate_label+=immediate_label)?) | immediate_label+=immediate_label) 
	 *         immediate_label+=immediate_label?
	 *     )
	 */
	protected void sequence_STR_OP_ldr_str_irpre_instr(EObject context, STR_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='str' | op?='STR' | op?=STR_COM) register+=REGISTER register+=REGISTER (register+=REGISTER | immediate_label+=immediate_label))
	 */
	protected void sequence_STR_OP_ldr_str_irpsot_instr(EObject context, STR_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (op?='str' | op?='STR' | op?=STR_COM) 
	 *         register+=REGISTER 
	 *         register+=REGISTER 
	 *         register+=REGISTER 
	 *         BAREL_SHIFT_REGISTER+=BAREL_SHIFT_REGISTER 
	 *         immediate_label+=immediate_label
	 *     )
	 */
	protected void sequence_STR_OP_ldr_str_rpost_instr(EObject context, STR_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (op?='str' | op?='STR' | op?=STR_COM) 
	 *         register+=REGISTER 
	 *         register+=REGISTER 
	 *         register+=REGISTER 
	 *         BAREL_SHIFT_REGISTER+=BAREL_SHIFT_REGISTER 
	 *         immediate_label+=immediate_label
	 *     )
	 */
	protected void sequence_STR_OP_ldr_str_spre_instr(EObject context, STR_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='sub' | op?='SUB' | op?=SUB_COM)
	 */
	protected void sequence_SUB_OP(EObject context, SUB_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='sub' | op?='SUB' | op?=SUB_COM) register+=REGISTER register+=REGISTER Operand2+=Operand2)
	 */
	protected void sequence_SUB_OP_add_sub_instr(EObject context, SUB_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='svc' | op?='SVC' | op?=SVC_COM)
	 */
	protected void sequence_SVC_OP(EObject context, SVC_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='svc' | op?='SVC' | op?=SVC_COM) immediate_label+=immediate_label)
	 */
	protected void sequence_SVC_OP_svc_instr(EObject context, SVC_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='swpb' | op?='SWPB' | op?=SWPB_COM)
	 */
	protected void sequence_SWPB_OP(EObject context, SWPB_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='swpb' | op?='SWPB' | op?=SWPB_COM) register+=REGISTER register+=REGISTER register+=REGISTER immediate_label+=immediate_label?)
	 */
	protected void sequence_SWPB_OP_swp_instr(EObject context, SWPB_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='swp' | op?='SWP' | op?=SWP_COM)
	 */
	protected void sequence_SWP_OP(EObject context, SWP_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='swp' | op?='SWP' | op?=SWP_COM) register+=REGISTER register+=REGISTER register+=REGISTER immediate_label+=immediate_label?)
	 */
	protected void sequence_SWP_OP_swp_instr(EObject context, SWP_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='teq' | op?='TEQ' | op?=TEQ_COM)
	 */
	protected void sequence_TEQ_OP(EObject context, TEQ_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='teq' | op?='TEQ' | op?=TEQ_COM) register+=REGISTER Operand2+=Operand2)
	 */
	protected void sequence_TEQ_OP_compare_test_instr(EObject context, TEQ_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='tst' | op?='TST' | op?=TST_COM)
	 */
	protected void sequence_TST_OP(EObject context, TST_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='tst' | op?='TST' | op?=TST_COM) register+=REGISTER Operand2+=Operand2)
	 */
	protected void sequence_TST_OP_compare_test_instr(EObject context, TST_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='umlal' | op?='UMLAL' | op?=UMLAL_COM)
	 */
	protected void sequence_UMLAL_OP(EObject context, UMLAL_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='umlal' | op?='UMLAL' | op?=UMLAL_COM) register+=REGISTER register+=REGISTER register+=REGISTER register+=REGISTER)
	 */
	protected void sequence_UMLAL_OP_mul_4R_instr(EObject context, UMLAL_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (op?='umull' | op?='UMULL' | op?=UMULL_COM)
	 */
	protected void sequence_UMULL_OP(EObject context, UMULL_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op?='umull' | op?='UMULL' | op?=UMULL_COM) register+=REGISTER register+=REGISTER register+=REGISTER register+=REGISTER)
	 */
	protected void sequence_UMULL_OP_mul_4R_instr(EObject context, UMULL_OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     immediate_label+=immediate_label
	 */
	protected void sequence_bkpt_instr(EObject context, bkpt_instr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((variableInt=myINT | variableABC=ID | variableString=STRING | variableHex=HEX) (defInt=myINT | defABC=ID | defString=STRING | defHex=HEX)?)
	 */
	protected void sequence_definition(EObject context, definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (int+=myINT | string+=STRING | description+=ID)
	 */
	protected void sequence_description(EObject context, description semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (expr=myINT | expr2=ID | (register+=REGISTER (BAREL_SHIFT_REGISTER+=BAREL_SHIFT_REGISTER (immediate_label+=immediate_label | num=myINT))?))
	 */
	protected void sequence_flexible_offset(EObject context, flexible_offset semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (literal_numeric+=literal_numeric | numeric_backward_forward+=numeric_backward_forward | ((label=ID | num2=myINT) (label2=ID | num=myINT)*))
	 */
	protected void sequence_immediate_label(EObject context, immediate_label semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (label+=ID ((variable+=variable | register+=REGISTER) (variable2+=variable | register+=REGISTER)*)?)
	 */
	protected void sequence_label_keyword(EObject context, label_keyword semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (hex=HEX | int=PLUS_MINUS_INT)
	 */
	protected void sequence_literal_numeric(EObject context, literal_numeric semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (hex=HEX | int=myINT)
	 */
	protected void sequence_numeric_backward_forward(EObject context, numeric_backward_forward semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (entryInt=myINT | entryABC=ID | entryString=STRING | entryHex=HEX)
	 */
	protected void sequence_randomEntry(EObject context, randomEntry semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     immediate_label+=immediate_label
	 */
	protected void sequence_rs_sh(EObject context, rs_sh semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (variable+=ID | variableINT+=myINT)
	 */
	protected void sequence_variable_colon(EObject context, variable_colon semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (variableInt=myINT | variableABC=ID | variableString=STRING | variableHex=HEX)
	 */
	protected void sequence_variable(EObject context, variable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (variable+=variable variable2+=variable*)
	 */
	protected void sequence_variable_variable(EObject context, variable_variable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
