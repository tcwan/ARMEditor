/*
 * generated by Xtext
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.services.ARMGrammarAccess;

@SuppressWarnings("all")
public class ARMSyntacticSequencer extends AbstractSyntacticSequencer {

	protected ARMGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Ccode_AmpersandAmpersandKeyword_0_2_5_0_1_or_VerticalLineVerticalLineKeyword_0_2_5_0_0;
	protected AbstractElementAlias match_Ccode_DefinedKeyword_0_2_1_q;
	protected AbstractElementAlias match_Ccode_DefinedKeyword_0_2_5_1_q;
	protected AbstractElementAlias match_Ccode_DividedKeyword_13_1_1_or_UnifiedKeyword_13_1_0;
	protected AbstractElementAlias match_Ccode_LeftCurlyBracketKeyword_14_1_q;
	protected AbstractElementAlias match_Ccode_LeftCurlyBracketKeyword_15_1_q;
	protected AbstractElementAlias match_Ccode_LeftParenthesisKeyword_0_2_0_q;
	protected AbstractElementAlias match_Ccode_LeftParenthesisKeyword_0_2_2_q;
	protected AbstractElementAlias match_Ccode_LeftParenthesisKeyword_0_2_5_2_q;
	protected AbstractElementAlias match_Ccode_ReverseSolidusKeyword_0_0_q;
	protected AbstractElementAlias match_Ccode_ReverseSolidusKeyword_17_0_q;
	protected AbstractElementAlias match_Ccode_ReverseSolidusKeyword_19_0_q;
	protected AbstractElementAlias match_Ccode_ReverseSolidusKeyword_1_0_q;
	protected AbstractElementAlias match_Ccode_RightCurlyBracketKeyword_14_4_q;
	protected AbstractElementAlias match_Ccode_RightCurlyBracketKeyword_15_4_q;
	protected AbstractElementAlias match_Ccode_RightParenthesisKeyword_0_2_4_q;
	protected AbstractElementAlias match_Ccode_RightParenthesisKeyword_0_2_5_4_q;
	protected AbstractElementAlias match_Ccode_RightParenthesisKeyword_0_2_6_q;
	protected AbstractElementAlias match_Ccode___CommaKeyword_4_1_1_0_FullStopKeyword_4_1_1_1_0__a;
	protected AbstractElementAlias match_Ccode___CommaKeyword_5_1_1_0_FullStopKeyword_5_1_1_1_0__a;
	protected AbstractElementAlias match_Ccode___FullStopKeyword_4_1_1_1_0_CommaKeyword_4_1_1_0__a;
	protected AbstractElementAlias match_Ccode___FullStopKeyword_5_1_1_1_0_CommaKeyword_5_1_1_0__a;
	protected AbstractElementAlias match_REGISTER_ReverseSolidusKeyword_42_0_q;
	protected AbstractElementAlias match_bkpt_instr_BKPTKeyword_0_1_or_BkptKeyword_0_0;
	protected AbstractElementAlias match_definition_ColonKeyword_2_0_q;
	protected AbstractElementAlias match_definition_RightParenthesisKeyword_3_q;
	protected AbstractElementAlias match_definition___AmpersandKeyword_0_10_or_AsteriskKeyword_0_8_or_ColonKeyword_0_11_or_DollarSignKeyword_0_3_or_EqualsSignKeyword_0_2_or_FullStopKeyword_0_4_or_HyphenMinusKeyword_0_7_or_LeftParenthesisKeyword_0_0_or_NumberSignKeyword_0_1_or_PlusSignKeyword_0_6_or_ReverseSolidusKeyword_0_12_or_SolidusKeyword_0_9_or__Keyword_0_5__a;
	protected AbstractElementAlias match_description___NumberSignKeyword_0_1_or_PercentSignKeyword_0_0__q;
	protected AbstractElementAlias match_flexible_offset___HyphenMinusKeyword_1_1_0_0_or_PlusSignKeyword_1_1_0_1__q;
	protected AbstractElementAlias match_immediate_label_LeftParenthesisKeyword_2_1_1_q;
	protected AbstractElementAlias match_immediate_label_ReverseSolidusKeyword_2_0_q;
	protected AbstractElementAlias match_immediate_label_RightParenthesisKeyword_2_1_4_q;
	protected AbstractElementAlias match_immediate_label___AsteriskKeyword_2_1_3_0_3_or_HyphenMinusKeyword_2_1_3_0_2_or_PlusSignKeyword_2_1_3_0_1_or_SolidusKeyword_2_1_3_0_4_or_VerticalLineKeyword_2_1_3_0_0__p;
	protected AbstractElementAlias match_immediate_label___DollarSignKeyword_2_1_0_2_or_EqualsSignKeyword_2_1_0_1_or_FullStopKeyword_2_1_0_3_or_NumberSignKeyword_2_1_0_0_or__Keyword_2_1_0_4__q;
	protected AbstractElementAlias match_ldm_instr_CircumflexAccentKeyword_1_8_q;
	protected AbstractElementAlias match_ldm_instr_ExclamationMarkKeyword_1_1_q;
	protected AbstractElementAlias match_ldr_str_irpre_instr_ExclamationMarkKeyword_1_1_0_3_2_q;
	protected AbstractElementAlias match_ldr_str_irpre_instr___HyphenMinusKeyword_1_1_0_3_0_1_1_or_PlusSignKeyword_1_1_0_3_0_1_0__q;
	protected AbstractElementAlias match_ldr_str_irpsot_instr_NumberSignKeyword_1_6_q;
	protected AbstractElementAlias match_ldr_str_irpsot_instr___HyphenMinusKeyword_1_7_1_or_PlusSignKeyword_1_7_0__q;
	protected AbstractElementAlias match_ldr_str_rpost_instr___HyphenMinusKeyword_1_6_1_or_PlusSignKeyword_1_6_0__q;
	protected AbstractElementAlias match_ldr_str_spre_instr_ExclamationMarkKeyword_1_11_q;
	protected AbstractElementAlias match_ldr_str_spre_instr___HyphenMinusKeyword_1_5_1_or_PlusSignKeyword_1_5_0__q;
	protected AbstractElementAlias match_numeric_backward_forward___BKeyword_1_1_2_or_BKeyword_1_1_3_or_FKeyword_1_1_0_or_FKeyword_1_1_1__q;
	protected AbstractElementAlias match_opsh_ReverseSolidusKeyword_0_q;
	protected AbstractElementAlias match_push_pop_instr_PlusSignKeyword_2_1_0_q;
	protected AbstractElementAlias match_push_pop_instr_PlusSignKeyword_3_2_0_q;
	protected AbstractElementAlias match_randomEntry___AmpersandKeyword_0_7_or_DollarSignKeyword_0_2_or_EqualsSignKeyword_0_1_or_FullStopKeyword_0_3_or_HyphenMinusKeyword_0_6_or_NumberSignKeyword_0_0_or_PlusSignKeyword_0_5_or__Keyword_0_4__a;
	protected AbstractElementAlias match_variable_RightParenthesisKeyword_2_q;
	protected AbstractElementAlias match_variable___AmpersandKeyword_0_10_or_AsteriskKeyword_0_8_or_DollarSignKeyword_0_3_or_EqualsSignKeyword_0_2_or_FullStopKeyword_0_4_or_HyphenMinusKeyword_0_7_or_LeftParenthesisKeyword_0_0_or_NumberSignKeyword_0_1_or_PlusSignKeyword_0_6_or_ReverseSolidusKeyword_0_11_or_SolidusKeyword_0_9_or__Keyword_0_5__a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (ARMGrammarAccess) access;
		match_Ccode_AmpersandAmpersandKeyword_0_2_5_0_1_or_VerticalLineVerticalLineKeyword_0_2_5_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCcodeAccess().getAmpersandAmpersandKeyword_0_2_5_0_1()), new TokenAlias(false, false, grammarAccess.getCcodeAccess().getVerticalLineVerticalLineKeyword_0_2_5_0_0()));
		match_Ccode_DefinedKeyword_0_2_1_q = new TokenAlias(false, true, grammarAccess.getCcodeAccess().getDefinedKeyword_0_2_1());
		match_Ccode_DefinedKeyword_0_2_5_1_q = new TokenAlias(false, true, grammarAccess.getCcodeAccess().getDefinedKeyword_0_2_5_1());
		match_Ccode_DividedKeyword_13_1_1_or_UnifiedKeyword_13_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCcodeAccess().getDividedKeyword_13_1_1()), new TokenAlias(false, false, grammarAccess.getCcodeAccess().getUnifiedKeyword_13_1_0()));
		match_Ccode_LeftCurlyBracketKeyword_14_1_q = new TokenAlias(false, true, grammarAccess.getCcodeAccess().getLeftCurlyBracketKeyword_14_1());
		match_Ccode_LeftCurlyBracketKeyword_15_1_q = new TokenAlias(false, true, grammarAccess.getCcodeAccess().getLeftCurlyBracketKeyword_15_1());
		match_Ccode_LeftParenthesisKeyword_0_2_0_q = new TokenAlias(false, true, grammarAccess.getCcodeAccess().getLeftParenthesisKeyword_0_2_0());
		match_Ccode_LeftParenthesisKeyword_0_2_2_q = new TokenAlias(false, true, grammarAccess.getCcodeAccess().getLeftParenthesisKeyword_0_2_2());
		match_Ccode_LeftParenthesisKeyword_0_2_5_2_q = new TokenAlias(false, true, grammarAccess.getCcodeAccess().getLeftParenthesisKeyword_0_2_5_2());
		match_Ccode_ReverseSolidusKeyword_0_0_q = new TokenAlias(false, true, grammarAccess.getCcodeAccess().getReverseSolidusKeyword_0_0());
		match_Ccode_ReverseSolidusKeyword_17_0_q = new TokenAlias(false, true, grammarAccess.getCcodeAccess().getReverseSolidusKeyword_17_0());
		match_Ccode_ReverseSolidusKeyword_19_0_q = new TokenAlias(false, true, grammarAccess.getCcodeAccess().getReverseSolidusKeyword_19_0());
		match_Ccode_ReverseSolidusKeyword_1_0_q = new TokenAlias(false, true, grammarAccess.getCcodeAccess().getReverseSolidusKeyword_1_0());
		match_Ccode_RightCurlyBracketKeyword_14_4_q = new TokenAlias(false, true, grammarAccess.getCcodeAccess().getRightCurlyBracketKeyword_14_4());
		match_Ccode_RightCurlyBracketKeyword_15_4_q = new TokenAlias(false, true, grammarAccess.getCcodeAccess().getRightCurlyBracketKeyword_15_4());
		match_Ccode_RightParenthesisKeyword_0_2_4_q = new TokenAlias(false, true, grammarAccess.getCcodeAccess().getRightParenthesisKeyword_0_2_4());
		match_Ccode_RightParenthesisKeyword_0_2_5_4_q = new TokenAlias(false, true, grammarAccess.getCcodeAccess().getRightParenthesisKeyword_0_2_5_4());
		match_Ccode_RightParenthesisKeyword_0_2_6_q = new TokenAlias(false, true, grammarAccess.getCcodeAccess().getRightParenthesisKeyword_0_2_6());
		match_Ccode___CommaKeyword_4_1_1_0_FullStopKeyword_4_1_1_1_0__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getCcodeAccess().getCommaKeyword_4_1_1_0()), new TokenAlias(false, false, grammarAccess.getCcodeAccess().getFullStopKeyword_4_1_1_1_0()));
		match_Ccode___CommaKeyword_5_1_1_0_FullStopKeyword_5_1_1_1_0__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getCcodeAccess().getCommaKeyword_5_1_1_0()), new TokenAlias(false, false, grammarAccess.getCcodeAccess().getFullStopKeyword_5_1_1_1_0()));
		match_Ccode___FullStopKeyword_4_1_1_1_0_CommaKeyword_4_1_1_0__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getCcodeAccess().getFullStopKeyword_4_1_1_1_0()), new TokenAlias(false, false, grammarAccess.getCcodeAccess().getCommaKeyword_4_1_1_0()));
		match_Ccode___FullStopKeyword_5_1_1_1_0_CommaKeyword_5_1_1_0__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getCcodeAccess().getFullStopKeyword_5_1_1_1_0()), new TokenAlias(false, false, grammarAccess.getCcodeAccess().getCommaKeyword_5_1_1_0()));
		match_REGISTER_ReverseSolidusKeyword_42_0_q = new TokenAlias(false, true, grammarAccess.getREGISTERAccess().getReverseSolidusKeyword_42_0());
		match_bkpt_instr_BKPTKeyword_0_1_or_BkptKeyword_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getBkpt_instrAccess().getBKPTKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getBkpt_instrAccess().getBkptKeyword_0_0()));
		match_definition_ColonKeyword_2_0_q = new TokenAlias(false, true, grammarAccess.getDefinitionAccess().getColonKeyword_2_0());
		match_definition_RightParenthesisKeyword_3_q = new TokenAlias(false, true, grammarAccess.getDefinitionAccess().getRightParenthesisKeyword_3());
		match_definition___AmpersandKeyword_0_10_or_AsteriskKeyword_0_8_or_ColonKeyword_0_11_or_DollarSignKeyword_0_3_or_EqualsSignKeyword_0_2_or_FullStopKeyword_0_4_or_HyphenMinusKeyword_0_7_or_LeftParenthesisKeyword_0_0_or_NumberSignKeyword_0_1_or_PlusSignKeyword_0_6_or_ReverseSolidusKeyword_0_12_or_SolidusKeyword_0_9_or__Keyword_0_5__a = new AlternativeAlias(true, true, new TokenAlias(false, false, grammarAccess.getDefinitionAccess().getAmpersandKeyword_0_10()), new TokenAlias(false, false, grammarAccess.getDefinitionAccess().getAsteriskKeyword_0_8()), new TokenAlias(false, false, grammarAccess.getDefinitionAccess().getColonKeyword_0_11()), new TokenAlias(false, false, grammarAccess.getDefinitionAccess().getDollarSignKeyword_0_3()), new TokenAlias(false, false, grammarAccess.getDefinitionAccess().getEqualsSignKeyword_0_2()), new TokenAlias(false, false, grammarAccess.getDefinitionAccess().getFullStopKeyword_0_4()), new TokenAlias(false, false, grammarAccess.getDefinitionAccess().getHyphenMinusKeyword_0_7()), new TokenAlias(false, false, grammarAccess.getDefinitionAccess().getLeftParenthesisKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getDefinitionAccess().getNumberSignKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getDefinitionAccess().getPlusSignKeyword_0_6()), new TokenAlias(false, false, grammarAccess.getDefinitionAccess().getReverseSolidusKeyword_0_12()), new TokenAlias(false, false, grammarAccess.getDefinitionAccess().getSolidusKeyword_0_9()), new TokenAlias(false, false, grammarAccess.getDefinitionAccess().get_Keyword_0_5()));
		match_description___NumberSignKeyword_0_1_or_PercentSignKeyword_0_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getDescriptionAccess().getNumberSignKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getDescriptionAccess().getPercentSignKeyword_0_0()));
		match_flexible_offset___HyphenMinusKeyword_1_1_0_0_or_PlusSignKeyword_1_1_0_1__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getFlexible_offsetAccess().getHyphenMinusKeyword_1_1_0_0()), new TokenAlias(false, false, grammarAccess.getFlexible_offsetAccess().getPlusSignKeyword_1_1_0_1()));
		match_immediate_label_LeftParenthesisKeyword_2_1_1_q = new TokenAlias(false, true, grammarAccess.getImmediate_labelAccess().getLeftParenthesisKeyword_2_1_1());
		match_immediate_label_ReverseSolidusKeyword_2_0_q = new TokenAlias(false, true, grammarAccess.getImmediate_labelAccess().getReverseSolidusKeyword_2_0());
		match_immediate_label_RightParenthesisKeyword_2_1_4_q = new TokenAlias(false, true, grammarAccess.getImmediate_labelAccess().getRightParenthesisKeyword_2_1_4());
		match_immediate_label___AsteriskKeyword_2_1_3_0_3_or_HyphenMinusKeyword_2_1_3_0_2_or_PlusSignKeyword_2_1_3_0_1_or_SolidusKeyword_2_1_3_0_4_or_VerticalLineKeyword_2_1_3_0_0__p = new AlternativeAlias(true, false, new TokenAlias(false, false, grammarAccess.getImmediate_labelAccess().getAsteriskKeyword_2_1_3_0_3()), new TokenAlias(false, false, grammarAccess.getImmediate_labelAccess().getHyphenMinusKeyword_2_1_3_0_2()), new TokenAlias(false, false, grammarAccess.getImmediate_labelAccess().getPlusSignKeyword_2_1_3_0_1()), new TokenAlias(false, false, grammarAccess.getImmediate_labelAccess().getSolidusKeyword_2_1_3_0_4()), new TokenAlias(false, false, grammarAccess.getImmediate_labelAccess().getVerticalLineKeyword_2_1_3_0_0()));
		match_immediate_label___DollarSignKeyword_2_1_0_2_or_EqualsSignKeyword_2_1_0_1_or_FullStopKeyword_2_1_0_3_or_NumberSignKeyword_2_1_0_0_or__Keyword_2_1_0_4__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getImmediate_labelAccess().getDollarSignKeyword_2_1_0_2()), new TokenAlias(false, false, grammarAccess.getImmediate_labelAccess().getEqualsSignKeyword_2_1_0_1()), new TokenAlias(false, false, grammarAccess.getImmediate_labelAccess().getFullStopKeyword_2_1_0_3()), new TokenAlias(false, false, grammarAccess.getImmediate_labelAccess().getNumberSignKeyword_2_1_0_0()), new TokenAlias(false, false, grammarAccess.getImmediate_labelAccess().get_Keyword_2_1_0_4()));
		match_ldm_instr_CircumflexAccentKeyword_1_8_q = new TokenAlias(false, true, grammarAccess.getLdm_instrAccess().getCircumflexAccentKeyword_1_8());
		match_ldm_instr_ExclamationMarkKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getLdm_instrAccess().getExclamationMarkKeyword_1_1());
		match_ldr_str_irpre_instr_ExclamationMarkKeyword_1_1_0_3_2_q = new TokenAlias(false, true, grammarAccess.getLdr_str_irpre_instrAccess().getExclamationMarkKeyword_1_1_0_3_2());
		match_ldr_str_irpre_instr___HyphenMinusKeyword_1_1_0_3_0_1_1_or_PlusSignKeyword_1_1_0_3_0_1_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getLdr_str_irpre_instrAccess().getHyphenMinusKeyword_1_1_0_3_0_1_1()), new TokenAlias(false, false, grammarAccess.getLdr_str_irpre_instrAccess().getPlusSignKeyword_1_1_0_3_0_1_0()));
		match_ldr_str_irpsot_instr_NumberSignKeyword_1_6_q = new TokenAlias(false, true, grammarAccess.getLdr_str_irpsot_instrAccess().getNumberSignKeyword_1_6());
		match_ldr_str_irpsot_instr___HyphenMinusKeyword_1_7_1_or_PlusSignKeyword_1_7_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getLdr_str_irpsot_instrAccess().getHyphenMinusKeyword_1_7_1()), new TokenAlias(false, false, grammarAccess.getLdr_str_irpsot_instrAccess().getPlusSignKeyword_1_7_0()));
		match_ldr_str_rpost_instr___HyphenMinusKeyword_1_6_1_or_PlusSignKeyword_1_6_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getLdr_str_rpost_instrAccess().getHyphenMinusKeyword_1_6_1()), new TokenAlias(false, false, grammarAccess.getLdr_str_rpost_instrAccess().getPlusSignKeyword_1_6_0()));
		match_ldr_str_spre_instr_ExclamationMarkKeyword_1_11_q = new TokenAlias(false, true, grammarAccess.getLdr_str_spre_instrAccess().getExclamationMarkKeyword_1_11());
		match_ldr_str_spre_instr___HyphenMinusKeyword_1_5_1_or_PlusSignKeyword_1_5_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getLdr_str_spre_instrAccess().getHyphenMinusKeyword_1_5_1()), new TokenAlias(false, false, grammarAccess.getLdr_str_spre_instrAccess().getPlusSignKeyword_1_5_0()));
		match_numeric_backward_forward___BKeyword_1_1_2_or_BKeyword_1_1_3_or_FKeyword_1_1_0_or_FKeyword_1_1_1__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getNumeric_backward_forwardAccess().getBKeyword_1_1_2()), new TokenAlias(false, false, grammarAccess.getNumeric_backward_forwardAccess().getBKeyword_1_1_3()), new TokenAlias(false, false, grammarAccess.getNumeric_backward_forwardAccess().getFKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getNumeric_backward_forwardAccess().getFKeyword_1_1_1()));
		match_opsh_ReverseSolidusKeyword_0_q = new TokenAlias(false, true, grammarAccess.getOpshAccess().getReverseSolidusKeyword_0());
		match_push_pop_instr_PlusSignKeyword_2_1_0_q = new TokenAlias(false, true, grammarAccess.getPush_pop_instrAccess().getPlusSignKeyword_2_1_0());
		match_push_pop_instr_PlusSignKeyword_3_2_0_q = new TokenAlias(false, true, grammarAccess.getPush_pop_instrAccess().getPlusSignKeyword_3_2_0());
		match_randomEntry___AmpersandKeyword_0_7_or_DollarSignKeyword_0_2_or_EqualsSignKeyword_0_1_or_FullStopKeyword_0_3_or_HyphenMinusKeyword_0_6_or_NumberSignKeyword_0_0_or_PlusSignKeyword_0_5_or__Keyword_0_4__a = new AlternativeAlias(true, true, new TokenAlias(false, false, grammarAccess.getRandomEntryAccess().getAmpersandKeyword_0_7()), new TokenAlias(false, false, grammarAccess.getRandomEntryAccess().getDollarSignKeyword_0_2()), new TokenAlias(false, false, grammarAccess.getRandomEntryAccess().getEqualsSignKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getRandomEntryAccess().getFullStopKeyword_0_3()), new TokenAlias(false, false, grammarAccess.getRandomEntryAccess().getHyphenMinusKeyword_0_6()), new TokenAlias(false, false, grammarAccess.getRandomEntryAccess().getNumberSignKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getRandomEntryAccess().getPlusSignKeyword_0_5()), new TokenAlias(false, false, grammarAccess.getRandomEntryAccess().get_Keyword_0_4()));
		match_variable_RightParenthesisKeyword_2_q = new TokenAlias(false, true, grammarAccess.getVariableAccess().getRightParenthesisKeyword_2());
		match_variable___AmpersandKeyword_0_10_or_AsteriskKeyword_0_8_or_DollarSignKeyword_0_3_or_EqualsSignKeyword_0_2_or_FullStopKeyword_0_4_or_HyphenMinusKeyword_0_7_or_LeftParenthesisKeyword_0_0_or_NumberSignKeyword_0_1_or_PlusSignKeyword_0_6_or_ReverseSolidusKeyword_0_11_or_SolidusKeyword_0_9_or__Keyword_0_5__a = new AlternativeAlias(true, true, new TokenAlias(false, false, grammarAccess.getVariableAccess().getAmpersandKeyword_0_10()), new TokenAlias(false, false, grammarAccess.getVariableAccess().getAsteriskKeyword_0_8()), new TokenAlias(false, false, grammarAccess.getVariableAccess().getDollarSignKeyword_0_3()), new TokenAlias(false, false, grammarAccess.getVariableAccess().getEqualsSignKeyword_0_2()), new TokenAlias(false, false, grammarAccess.getVariableAccess().getFullStopKeyword_0_4()), new TokenAlias(false, false, grammarAccess.getVariableAccess().getHyphenMinusKeyword_0_7()), new TokenAlias(false, false, grammarAccess.getVariableAccess().getLeftParenthesisKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getVariableAccess().getNumberSignKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getVariableAccess().getPlusSignKeyword_0_6()), new TokenAlias(false, false, grammarAccess.getVariableAccess().getReverseSolidusKeyword_0_11()), new TokenAlias(false, false, grammarAccess.getVariableAccess().getSolidusKeyword_0_9()), new TokenAlias(false, false, grammarAccess.getVariableAccess().get_Keyword_0_5()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if(ruleCall.getRule() == grammarAccess.getADC_COMRule())
			return getADC_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getADD_COMRule())
			return getADD_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getADRL_COMRule())
			return getADRL_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getADR_COMRule())
			return getADR_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getAND_COMRule())
			return getAND_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getASR_COMRule())
			return getASR_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getBIC_COMRule())
			return getBIC_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getBLX_COMRule())
			return getBLX_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getBL_COMRule())
			return getBL_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getBXJ_COMRule())
			return getBXJ_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getBX_COMRule())
			return getBX_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getB_COMRule())
			return getB_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getCLZ_COMRule())
			return getCLZ_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getCMN_COMRule())
			return getCMN_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getCMP_COMRule())
			return getCMP_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getEOR_COMRule())
			return getEOR_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getLDM_COMRule())
			return getLDM_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getLDR_COMRule())
			return getLDR_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getLSL_COMRule())
			return getLSL_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getLSR_COMRule())
			return getLSR_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getMLA_COMRule())
			return getMLA_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getMOV_COMRule())
			return getMOV_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getMRS_COMRule())
			return getMRS_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getMSR_COMRule())
			return getMSR_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getMUL_3R_COMRule())
			return getMUL_3R_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getMUL_4R_COMRule())
			return getMUL_4R_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getMVN_COMRule())
			return getMVN_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getORN_COMRule())
			return getORN_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getORR_COMRule())
			return getORR_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getPOP_COMRule())
			return getPOP_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getPUSH_COMRule())
			return getPUSH_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getROR_COMRule())
			return getROR_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getRRX_COMRule())
			return getRRX_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getRSB_COMRule())
			return getRSB_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getRSC_COMRule())
			return getRSC_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSBC_COMRule())
			return getSBC_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSMLAL_COMRule())
			return getSMLAL_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSMLAW_COMRule())
			return getSMLAW_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSMLA_COMRule())
			return getSMLA_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSMULL_COMRule())
			return getSMULL_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSMULW_COMRule())
			return getSMULW_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSMUL_COMRule())
			return getSMUL_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSTM_COMRule())
			return getSTM_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSTR_COMRule())
			return getSTR_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSUB_COMRule())
			return getSUB_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSVC_COMRule())
			return getSVC_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSWPB_COMRule())
			return getSWPB_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSWP_COMRule())
			return getSWP_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getTEQ_COMRule())
			return getTEQ_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getTST_COMRule())
			return getTST_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getUMLAL_COMRule())
			return getUMLAL_COMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getUMULL_COMRule())
			return getUMULL_COMToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ADC_COM:
	 * 	('adc' | 'ADC') CONDITION_SUFFIX?('s' | 'S')?
	 * ;
	 */
	protected String getADC_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "adc";
	}
	
	/**
	 * terminal ADD_COM:
	 * 	('add' | 'ADD') CONDITION_SUFFIX?('s' | 'S')?
	 * ;
	 */
	protected String getADD_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "add";
	}
	
	/**
	 * terminal ADRL_COM:
	 * 	('adrl' | 'ADRL') CONDITION_SUFFIX?('s' | 'S')?
	 * ;
	 */
	protected String getADRL_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "adrl";
	}
	
	/**
	 * terminal ADR_COM:
	 * 	('adr' | 'ADR') CONDITION_SUFFIX?('s' | 'S')?
	 * ;
	 */
	protected String getADR_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "adr";
	}
	
	/**
	 * terminal AND_COM:
	 * 	('and' | 'AND')CONDITION_SUFFIX?('s' | 'S')?
	 * ;
	 */
	protected String getAND_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "and";
	}
	
	/**
	 * terminal ASR_COM:
	 * 	('asr' | 'ASR')CONDITION_SUFFIX?('s' | 'S')?
	 * ;
	 */
	protected String getASR_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "asr";
	}
	
	/**
	 * terminal BIC_COM:
	 * 	('bic' | 'BIC')CONDITION_SUFFIX?('s' | 'S')?
	 * ;
	 */
	protected String getBIC_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "bic";
	}
	
	/**
	 * terminal BLX_COM:
	 * 	('blx' | 'BLX')CONDITION_SUFFIX?
	 * ;
	 */
	protected String getBLX_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "blx";
	}
	
	/**
	 * terminal BL_COM:
	 * 	('bl' | 'BL')CONDITION_SUFFIX?
	 * ;
	 */
	protected String getBL_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "bl";
	}
	
	/**
	 * terminal BXJ_COM:
	 * 	('bxj' | 'BXJ')CONDITION_SUFFIX?
	 * ;
	 */
	protected String getBXJ_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "bxj";
	}
	
	/**
	 * terminal BX_COM:
	 * 	('bx' | 'BX')CONDITION_SUFFIX?
	 * ;
	 */
	protected String getBX_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "bx";
	}
	
	/**
	 * terminal B_COM:
	 * 	('b' | 'B')CONDITION_SUFFIX?
	 * ;
	 */
	protected String getB_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "b";
	}
	
	/**
	 * terminal CLZ_COM:
	 * 	('clz' | 'CLZ')CONDITION_SUFFIX?
	 * ;
	 */
	protected String getCLZ_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "clz";
	}
	
	/**
	 * terminal CMN_COM:
	 * 	('cmn' | 'CMN')CONDITION_SUFFIX?
	 * ;
	 */
	protected String getCMN_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "cmn";
	}
	
	/**
	 * terminal CMP_COM:
	 * 	('cmp' | 'CMP')CONDITION_SUFFIX?
	 * ;
	 */
	protected String getCMP_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "cmp";
	}
	
	/**
	 * terminal EOR_COM:
	 * 	('eor' | 'EOR')CONDITION_SUFFIX?('s' | 'S')?
	 * ;
	 */
	protected String getEOR_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "eor";
	}
	
	/**
	 * terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal LDM_COM:
	 * 	('ldm' | 'LDM')CONDITION_SUFFIX?ADDRESING_MODE?
	 * ;
	 */
	protected String getLDM_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "ldm";
	}
	
	/**
	 * terminal LDR_COM:
	 * 	('ldr' | 'LDR')CONDITION_SUFFIX?(XY_LABEL)?
	 * ;
	 */
	protected String getLDR_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "ldr";
	}
	
	/**
	 * terminal LSL_COM:
	 * 	('lsl' | 'LSL')CONDITION_SUFFIX?('s' | 'S')?
	 * ;
	 */
	protected String getLSL_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "lsl";
	}
	
	/**
	 * terminal LSR_COM:
	 * 	('lsr' | 'LSR')CONDITION_SUFFIX?('s' | 'S')?
	 * ;
	 */
	protected String getLSR_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "lsr";
	}
	
	/**
	 * terminal MLA_COM:
	 * 	('mla' | 'MLA')CONDITION_SUFFIX?('s' | 'S')?
	 * ;
	 */
	protected String getMLA_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "mla";
	}
	
	/**
	 * terminal MOV_COM:
	 * 	('mov' | 'MOV')CONDITION_SUFFIX?('s' | 'S')?
	 * ;
	 */
	protected String getMOV_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "mov";
	}
	
	/**
	 * terminal MRS_COM:
	 * 	('mrs' | 'MRS') CONDITION_SUFFIX?
	 * ;
	 */
	protected String getMRS_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "mrs";
	}
	
	/**
	 * terminal MSR_COM:
	 * 	('msr' | 'MSR') CONDITION_SUFFIX?
	 * ;
	 */
	protected String getMSR_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "msr";
	}
	
	/**
	 * terminal MUL_3R_COM:
	 * 	('mul' | 'MUL')(CONDITION_SUFFIX)?(('s' | 'S'))?
	 * ;
	 */
	protected String getMUL_3R_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "mul";
	}
	
	/**
	 * terminal MUL_4R_COM:
	 * 	('mls' | 'MLS')CONDITION_SUFFIX?
	 * ;
	 */
	protected String getMUL_4R_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "mls";
	}
	
	/**
	 * terminal MVN_COM:
	 * 	('mvn' | 'MVN')CONDITION_SUFFIX?('s' | 'S')?
	 * ;
	 */
	protected String getMVN_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "mvn";
	}
	
	/**
	 * terminal ORN_COM:
	 * 	('orn' | 'ORN')CONDITION_SUFFIX?('s' | 'S')?
	 * ;
	 */
	protected String getORN_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "orn";
	}
	
	/**
	 * terminal ORR_COM:
	 * 	('orr' | 'ORR')CONDITION_SUFFIX?('s' | 'S')?
	 * ;
	 */
	protected String getORR_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "orr";
	}
	
	/**
	 * terminal POP_COM:
	 * 	('pop' | 'POP')CONDITION_SUFFIX?
	 * ;
	 */
	protected String getPOP_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "pop";
	}
	
	/**
	 * terminal PUSH_COM:
	 * 	('push' | 'PUSH')CONDITION_SUFFIX?
	 * ;
	 */
	protected String getPUSH_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "push";
	}
	
	/**
	 * terminal ROR_COM:
	 * 	('ror' | 'ROR')CONDITION_SUFFIX?('s' | 'S')?
	 * ;
	 */
	protected String getROR_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "ror";
	}
	
	/**
	 * terminal RRX_COM:
	 * 	('rrx' | 'RRX')CONDITION_SUFFIX?('s' | 'S')?
	 * ;
	 */
	protected String getRRX_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "rrx";
	}
	
	/**
	 * terminal RSB_COM:
	 * 	('rsb' | 'RSB') CONDITION_SUFFIX?('s' | 'S')?
	 * ;
	 */
	protected String getRSB_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "rsb";
	}
	
	/**
	 * terminal RSC_COM:
	 * 	('rsc' | 'RSC') CONDITION_SUFFIX?('s' | 'S')?
	 * ;
	 */
	protected String getRSC_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "rsc";
	}
	
	/**
	 * terminal SBC_COM:
	 * 	('sbc' | 'SBC') CONDITION_SUFFIX?('s' | 'S')?
	 * ;
	 */
	protected String getSBC_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "sbc";
	}
	
	/**
	 * terminal SMLAL_COM:
	 * 	('smlal' | 'SMLAL')CONDITION_SUFFIX?('s' | 'S')?
	 * ;
	 */
	protected String getSMLAL_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "smlal";
	}
	
	/**
	 * terminal SMLAW_COM:
	 * 	('smlaw' | 'SMLAW')XY_LABEL XY_LABEL CONDITION_SUFFIX?
	 * ;
	 */
	protected String getSMLAW_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "smlawb";
	}
	
	/**
	 * terminal SMLA_COM:
	 * 	('smla' | 'SMLA')XY_LABEL XY_LABEL CONDITION_SUFFIX?
	 * ;
	 */
	protected String getSMLA_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "smlab";
	}
	
	/**
	 * terminal SMULL_COM:
	 * 	('smull' | 'SMULL')CONDITION_SUFFIX?('s' | 'S')?
	 * ;
	 */
	protected String getSMULL_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "smull";
	}
	
	/**
	 * terminal SMULW_COM:
	 * 	('smulw' | 'SMULW')XY_LABEL XY_LABEL CONDITION_SUFFIX?
	 * ;
	 */
	protected String getSMULW_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "smulwb";
	}
	
	/**
	 * terminal SMUL_COM:
	 * 	('smul' | 'SMUL')XY_LABEL XY_LABEL CONDITION_SUFFIX?
	 * ;
	 */
	protected String getSMUL_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "smulb";
	}
	
	/**
	 * terminal STM_COM:
	 * 	('stm' | 'STM')CONDITION_SUFFIX?ADDRESING_MODE?
	 * ;
	 */
	protected String getSTM_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "stm";
	}
	
	/**
	 * terminal STR_COM:
	 * 	('str' | 'STR')CONDITION_SUFFIX?(XY_LABEL)?
	 * ;
	 */
	protected String getSTR_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "str";
	}
	
	/**
	 * terminal SUB_COM:
	 * 	('sub' | 'SUB') CONDITION_SUFFIX?('s' | 'S')?
	 * ;
	 */
	protected String getSUB_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "sub";
	}
	
	/**
	 * terminal SVC_COM:
	 * 	('svc' | 'SVC')CONDITION_SUFFIX?
	 * ;
	 */
	protected String getSVC_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "svc";
	}
	
	/**
	 * terminal SWPB_COM:
	 * 	( 'swpb' | 'SWPB')CONDITION_SUFFIX?
	 * ;
	 */
	protected String getSWPB_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "swpb";
	}
	
	/**
	 * terminal SWP_COM:
	 * 	('swp' | 'SWP' )CONDITION_SUFFIX? 
	 * ;
	 */
	protected String getSWP_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "swp";
	}
	
	/**
	 * terminal TEQ_COM:
	 * 	('teq' | 'TEQ')CONDITION_SUFFIX?
	 * ;
	 */
	protected String getTEQ_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "teq";
	}
	
	/**
	 * terminal TST_COM:
	 * 	('tst' | 'TST')CONDITION_SUFFIX?
	 * ;
	 */
	protected String getTST_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "tst";
	}
	
	/**
	 * terminal UMLAL_COM:
	 * 	('umlal' | 'UMLAL')CONDITION_SUFFIX?('s' | 'S')?
	 * ;
	 */
	protected String getUMLAL_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "umlal";
	}
	
	/**
	 * terminal UMULL_COM:
	 * 	('umull' | 'UMULL')CONDITION_SUFFIX?('s' | 'S')?
	 * ;
	 */
	protected String getUMULL_COMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "umull";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_Ccode_AmpersandAmpersandKeyword_0_2_5_0_1_or_VerticalLineVerticalLineKeyword_0_2_5_0_0.equals(syntax))
				emit_Ccode_AmpersandAmpersandKeyword_0_2_5_0_1_or_VerticalLineVerticalLineKeyword_0_2_5_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Ccode_DefinedKeyword_0_2_1_q.equals(syntax))
				emit_Ccode_DefinedKeyword_0_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Ccode_DefinedKeyword_0_2_5_1_q.equals(syntax))
				emit_Ccode_DefinedKeyword_0_2_5_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Ccode_DividedKeyword_13_1_1_or_UnifiedKeyword_13_1_0.equals(syntax))
				emit_Ccode_DividedKeyword_13_1_1_or_UnifiedKeyword_13_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Ccode_LeftCurlyBracketKeyword_14_1_q.equals(syntax))
				emit_Ccode_LeftCurlyBracketKeyword_14_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Ccode_LeftCurlyBracketKeyword_15_1_q.equals(syntax))
				emit_Ccode_LeftCurlyBracketKeyword_15_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Ccode_LeftParenthesisKeyword_0_2_0_q.equals(syntax))
				emit_Ccode_LeftParenthesisKeyword_0_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Ccode_LeftParenthesisKeyword_0_2_2_q.equals(syntax))
				emit_Ccode_LeftParenthesisKeyword_0_2_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Ccode_LeftParenthesisKeyword_0_2_5_2_q.equals(syntax))
				emit_Ccode_LeftParenthesisKeyword_0_2_5_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Ccode_ReverseSolidusKeyword_0_0_q.equals(syntax))
				emit_Ccode_ReverseSolidusKeyword_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Ccode_ReverseSolidusKeyword_17_0_q.equals(syntax))
				emit_Ccode_ReverseSolidusKeyword_17_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Ccode_ReverseSolidusKeyword_19_0_q.equals(syntax))
				emit_Ccode_ReverseSolidusKeyword_19_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Ccode_ReverseSolidusKeyword_1_0_q.equals(syntax))
				emit_Ccode_ReverseSolidusKeyword_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Ccode_RightCurlyBracketKeyword_14_4_q.equals(syntax))
				emit_Ccode_RightCurlyBracketKeyword_14_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Ccode_RightCurlyBracketKeyword_15_4_q.equals(syntax))
				emit_Ccode_RightCurlyBracketKeyword_15_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Ccode_RightParenthesisKeyword_0_2_4_q.equals(syntax))
				emit_Ccode_RightParenthesisKeyword_0_2_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Ccode_RightParenthesisKeyword_0_2_5_4_q.equals(syntax))
				emit_Ccode_RightParenthesisKeyword_0_2_5_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Ccode_RightParenthesisKeyword_0_2_6_q.equals(syntax))
				emit_Ccode_RightParenthesisKeyword_0_2_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Ccode___CommaKeyword_4_1_1_0_FullStopKeyword_4_1_1_1_0__a.equals(syntax))
				emit_Ccode___CommaKeyword_4_1_1_0_FullStopKeyword_4_1_1_1_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Ccode___CommaKeyword_5_1_1_0_FullStopKeyword_5_1_1_1_0__a.equals(syntax))
				emit_Ccode___CommaKeyword_5_1_1_0_FullStopKeyword_5_1_1_1_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Ccode___FullStopKeyword_4_1_1_1_0_CommaKeyword_4_1_1_0__a.equals(syntax))
				emit_Ccode___FullStopKeyword_4_1_1_1_0_CommaKeyword_4_1_1_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Ccode___FullStopKeyword_5_1_1_1_0_CommaKeyword_5_1_1_0__a.equals(syntax))
				emit_Ccode___FullStopKeyword_5_1_1_1_0_CommaKeyword_5_1_1_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_REGISTER_ReverseSolidusKeyword_42_0_q.equals(syntax))
				emit_REGISTER_ReverseSolidusKeyword_42_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_bkpt_instr_BKPTKeyword_0_1_or_BkptKeyword_0_0.equals(syntax))
				emit_bkpt_instr_BKPTKeyword_0_1_or_BkptKeyword_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_definition_ColonKeyword_2_0_q.equals(syntax))
				emit_definition_ColonKeyword_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_definition_RightParenthesisKeyword_3_q.equals(syntax))
				emit_definition_RightParenthesisKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_definition___AmpersandKeyword_0_10_or_AsteriskKeyword_0_8_or_ColonKeyword_0_11_or_DollarSignKeyword_0_3_or_EqualsSignKeyword_0_2_or_FullStopKeyword_0_4_or_HyphenMinusKeyword_0_7_or_LeftParenthesisKeyword_0_0_or_NumberSignKeyword_0_1_or_PlusSignKeyword_0_6_or_ReverseSolidusKeyword_0_12_or_SolidusKeyword_0_9_or__Keyword_0_5__a.equals(syntax))
				emit_definition___AmpersandKeyword_0_10_or_AsteriskKeyword_0_8_or_ColonKeyword_0_11_or_DollarSignKeyword_0_3_or_EqualsSignKeyword_0_2_or_FullStopKeyword_0_4_or_HyphenMinusKeyword_0_7_or_LeftParenthesisKeyword_0_0_or_NumberSignKeyword_0_1_or_PlusSignKeyword_0_6_or_ReverseSolidusKeyword_0_12_or_SolidusKeyword_0_9_or__Keyword_0_5__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_description___NumberSignKeyword_0_1_or_PercentSignKeyword_0_0__q.equals(syntax))
				emit_description___NumberSignKeyword_0_1_or_PercentSignKeyword_0_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_flexible_offset___HyphenMinusKeyword_1_1_0_0_or_PlusSignKeyword_1_1_0_1__q.equals(syntax))
				emit_flexible_offset___HyphenMinusKeyword_1_1_0_0_or_PlusSignKeyword_1_1_0_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_immediate_label_LeftParenthesisKeyword_2_1_1_q.equals(syntax))
				emit_immediate_label_LeftParenthesisKeyword_2_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_immediate_label_ReverseSolidusKeyword_2_0_q.equals(syntax))
				emit_immediate_label_ReverseSolidusKeyword_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_immediate_label_RightParenthesisKeyword_2_1_4_q.equals(syntax))
				emit_immediate_label_RightParenthesisKeyword_2_1_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_immediate_label___AsteriskKeyword_2_1_3_0_3_or_HyphenMinusKeyword_2_1_3_0_2_or_PlusSignKeyword_2_1_3_0_1_or_SolidusKeyword_2_1_3_0_4_or_VerticalLineKeyword_2_1_3_0_0__p.equals(syntax))
				emit_immediate_label___AsteriskKeyword_2_1_3_0_3_or_HyphenMinusKeyword_2_1_3_0_2_or_PlusSignKeyword_2_1_3_0_1_or_SolidusKeyword_2_1_3_0_4_or_VerticalLineKeyword_2_1_3_0_0__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_immediate_label___DollarSignKeyword_2_1_0_2_or_EqualsSignKeyword_2_1_0_1_or_FullStopKeyword_2_1_0_3_or_NumberSignKeyword_2_1_0_0_or__Keyword_2_1_0_4__q.equals(syntax))
				emit_immediate_label___DollarSignKeyword_2_1_0_2_or_EqualsSignKeyword_2_1_0_1_or_FullStopKeyword_2_1_0_3_or_NumberSignKeyword_2_1_0_0_or__Keyword_2_1_0_4__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ldm_instr_CircumflexAccentKeyword_1_8_q.equals(syntax))
				emit_ldm_instr_CircumflexAccentKeyword_1_8_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ldm_instr_ExclamationMarkKeyword_1_1_q.equals(syntax))
				emit_ldm_instr_ExclamationMarkKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ldr_str_irpre_instr_ExclamationMarkKeyword_1_1_0_3_2_q.equals(syntax))
				emit_ldr_str_irpre_instr_ExclamationMarkKeyword_1_1_0_3_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ldr_str_irpre_instr___HyphenMinusKeyword_1_1_0_3_0_1_1_or_PlusSignKeyword_1_1_0_3_0_1_0__q.equals(syntax))
				emit_ldr_str_irpre_instr___HyphenMinusKeyword_1_1_0_3_0_1_1_or_PlusSignKeyword_1_1_0_3_0_1_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ldr_str_irpsot_instr_NumberSignKeyword_1_6_q.equals(syntax))
				emit_ldr_str_irpsot_instr_NumberSignKeyword_1_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ldr_str_irpsot_instr___HyphenMinusKeyword_1_7_1_or_PlusSignKeyword_1_7_0__q.equals(syntax))
				emit_ldr_str_irpsot_instr___HyphenMinusKeyword_1_7_1_or_PlusSignKeyword_1_7_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ldr_str_rpost_instr___HyphenMinusKeyword_1_6_1_or_PlusSignKeyword_1_6_0__q.equals(syntax))
				emit_ldr_str_rpost_instr___HyphenMinusKeyword_1_6_1_or_PlusSignKeyword_1_6_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ldr_str_spre_instr_ExclamationMarkKeyword_1_11_q.equals(syntax))
				emit_ldr_str_spre_instr_ExclamationMarkKeyword_1_11_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ldr_str_spre_instr___HyphenMinusKeyword_1_5_1_or_PlusSignKeyword_1_5_0__q.equals(syntax))
				emit_ldr_str_spre_instr___HyphenMinusKeyword_1_5_1_or_PlusSignKeyword_1_5_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_numeric_backward_forward___BKeyword_1_1_2_or_BKeyword_1_1_3_or_FKeyword_1_1_0_or_FKeyword_1_1_1__q.equals(syntax))
				emit_numeric_backward_forward___BKeyword_1_1_2_or_BKeyword_1_1_3_or_FKeyword_1_1_0_or_FKeyword_1_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_opsh_ReverseSolidusKeyword_0_q.equals(syntax))
				emit_opsh_ReverseSolidusKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_push_pop_instr_PlusSignKeyword_2_1_0_q.equals(syntax))
				emit_push_pop_instr_PlusSignKeyword_2_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_push_pop_instr_PlusSignKeyword_3_2_0_q.equals(syntax))
				emit_push_pop_instr_PlusSignKeyword_3_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_randomEntry___AmpersandKeyword_0_7_or_DollarSignKeyword_0_2_or_EqualsSignKeyword_0_1_or_FullStopKeyword_0_3_or_HyphenMinusKeyword_0_6_or_NumberSignKeyword_0_0_or_PlusSignKeyword_0_5_or__Keyword_0_4__a.equals(syntax))
				emit_randomEntry___AmpersandKeyword_0_7_or_DollarSignKeyword_0_2_or_EqualsSignKeyword_0_1_or_FullStopKeyword_0_3_or_HyphenMinusKeyword_0_6_or_NumberSignKeyword_0_0_or_PlusSignKeyword_0_5_or__Keyword_0_4__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_variable_RightParenthesisKeyword_2_q.equals(syntax))
				emit_variable_RightParenthesisKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_variable___AmpersandKeyword_0_10_or_AsteriskKeyword_0_8_or_DollarSignKeyword_0_3_or_EqualsSignKeyword_0_2_or_FullStopKeyword_0_4_or_HyphenMinusKeyword_0_7_or_LeftParenthesisKeyword_0_0_or_NumberSignKeyword_0_1_or_PlusSignKeyword_0_6_or_ReverseSolidusKeyword_0_11_or_SolidusKeyword_0_9_or__Keyword_0_5__a.equals(syntax))
				emit_variable___AmpersandKeyword_0_10_or_AsteriskKeyword_0_8_or_DollarSignKeyword_0_3_or_EqualsSignKeyword_0_2_or_FullStopKeyword_0_4_or_HyphenMinusKeyword_0_7_or_LeftParenthesisKeyword_0_0_or_NumberSignKeyword_0_1_or_PlusSignKeyword_0_6_or_ReverseSolidusKeyword_0_11_or_SolidusKeyword_0_9_or__Keyword_0_5__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '||' | '&&'
	 *
	 * This ambiguous syntax occurs at:
	 *     expression2=variable ')'? (ambiguity) 'defined'? '('? expression2=variable
	 *     expression=variable ')'? (ambiguity) 'defined'? '('? expression2=variable
	 */
	protected void emit_Ccode_AmpersandAmpersandKeyword_0_2_5_0_1_or_VerticalLineVerticalLineKeyword_0_2_5_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'defined'?
	 *
	 * This ambiguous syntax occurs at:
	 *     code?='elif' '('? (ambiguity) '('? expression=variable
	 *     code?='error' '('? (ambiguity) '('? expression=variable
	 *     code?='if' '('? (ambiguity) '('? expression=variable
	 *     code?='ifdef' '('? (ambiguity) '('? expression=variable
	 *     code?='ifndef' '('? (ambiguity) '('? expression=variable
	 *     code?='include' '('? (ambiguity) '('? expression=variable
	 *     code?='line' '('? (ambiguity) '('? expression=variable
	 *     code?='pragma' '('? (ambiguity) '('? expression=variable
	 *     code?='undef' '('? (ambiguity) '('? expression=variable
	 */
	protected void emit_Ccode_DefinedKeyword_0_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'defined'?
	 *
	 * This ambiguous syntax occurs at:
	 *     expression2=variable ')'? ('||' | '&&') (ambiguity) '('? expression2=variable
	 *     expression=variable ')'? ('||' | '&&') (ambiguity) '('? expression2=variable
	 */
	protected void emit_Ccode_DefinedKeyword_0_2_5_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'unified' | 'divided'
	 *
	 * This ambiguous syntax occurs at:
	 *     code?='syntax' (ambiguity) (rule end)
	 */
	protected void emit_Ccode_DividedKeyword_13_1_1_or_UnifiedKeyword_13_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '{'?
	 *
	 * This ambiguous syntax occurs at:
	 *     code?='save' (ambiguity) reglist+=ID
	 */
	protected void emit_Ccode_LeftCurlyBracketKeyword_14_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '{'?
	 *
	 * This ambiguous syntax occurs at:
	 *     code?='save' (ambiguity) register+=REGISTER
	 */
	protected void emit_Ccode_LeftCurlyBracketKeyword_15_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('?
	 *
	 * This ambiguous syntax occurs at:
	 *     code?='elif' (ambiguity) 'defined'? '('? expression=variable
	 *     code?='error' (ambiguity) 'defined'? '('? expression=variable
	 *     code?='if' (ambiguity) 'defined'? '('? expression=variable
	 *     code?='ifdef' (ambiguity) 'defined'? '('? expression=variable
	 *     code?='ifndef' (ambiguity) 'defined'? '('? expression=variable
	 *     code?='include' (ambiguity) 'defined'? '('? expression=variable
	 *     code?='line' (ambiguity) 'defined'? '('? expression=variable
	 *     code?='pragma' (ambiguity) 'defined'? '('? expression=variable
	 *     code?='undef' (ambiguity) 'defined'? '('? expression=variable
	 */
	protected void emit_Ccode_LeftParenthesisKeyword_0_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('?
	 *
	 * This ambiguous syntax occurs at:
	 *     code?='elif' '('? 'defined'? (ambiguity) expression=variable
	 *     code?='error' '('? 'defined'? (ambiguity) expression=variable
	 *     code?='if' '('? 'defined'? (ambiguity) expression=variable
	 *     code?='ifdef' '('? 'defined'? (ambiguity) expression=variable
	 *     code?='ifndef' '('? 'defined'? (ambiguity) expression=variable
	 *     code?='include' '('? 'defined'? (ambiguity) expression=variable
	 *     code?='line' '('? 'defined'? (ambiguity) expression=variable
	 *     code?='pragma' '('? 'defined'? (ambiguity) expression=variable
	 *     code?='undef' '('? 'defined'? (ambiguity) expression=variable
	 */
	protected void emit_Ccode_LeftParenthesisKeyword_0_2_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('?
	 *
	 * This ambiguous syntax occurs at:
	 *     expression2=variable ')'? ('||' | '&&') 'defined'? (ambiguity) expression2=variable
	 *     expression=variable ')'? ('||' | '&&') 'defined'? (ambiguity) expression2=variable
	 */
	protected void emit_Ccode_LeftParenthesisKeyword_0_2_5_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '\'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) hash?='#'
	 */
	protected void emit_Ccode_ReverseSolidusKeyword_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '\'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) code?='Content:'
	 *     (rule start) (ambiguity) code?='START:'
	 *     (rule start) (ambiguity) code?='STOP:'
	 *     (rule start) (ambiguity) code?='break:'
	 *     (rule start) (ambiguity) code?='exit_main:'
	 *     (rule start) (ambiguity) code?='loop:'
	 *     (rule start) (ambiguity) code?='main1:'
	 *     (rule start) (ambiguity) code?='prompt:'
	 *     (rule start) (ambiguity) code?='start:'
	 *     (rule start) (ambiguity) code?='stop:'
	 *     (rule start) (ambiguity) code?='title:'
	 */
	protected void emit_Ccode_ReverseSolidusKeyword_17_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '\'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) variable+=ID
	 *     (rule start) (ambiguity) variableINT+=myINT
	 */
	protected void emit_Ccode_ReverseSolidusKeyword_19_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '\'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) hash?='#'
	 */
	protected void emit_Ccode_ReverseSolidusKeyword_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '}'?
	 *
	 * This ambiguous syntax occurs at:
	 *     reglist+=ID (ambiguity) (rule end)
	 *     reglistNum+=myINT (ambiguity) (rule end)
	 */
	protected void emit_Ccode_RightCurlyBracketKeyword_14_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '}'?
	 *
	 * This ambiguous syntax occurs at:
	 *     register+=REGISTER (ambiguity) (rule end)
	 */
	protected void emit_Ccode_RightCurlyBracketKeyword_15_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ')'?
	 *
	 * This ambiguous syntax occurs at:
	 *     expression=variable (ambiguity) ')'? (rule end)
	 *     expression=variable (ambiguity) ('||' | '&&') 'defined'? '('? expression2=variable
	 */
	protected void emit_Ccode_RightParenthesisKeyword_0_2_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ')'?
	 *
	 * This ambiguous syntax occurs at:
	 *     expression2=variable (ambiguity) ')'? (rule end)
	 *     expression2=variable (ambiguity) ('||' | '&&') 'defined'? '('? expression2=variable
	 */
	protected void emit_Ccode_RightParenthesisKeyword_0_2_5_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ')'?
	 *
	 * This ambiguous syntax occurs at:
	 *     expression2=variable ')'? (ambiguity) (rule end)
	 *     expression=variable ')'? (ambiguity) (rule end)
	 */
	protected void emit_Ccode_RightParenthesisKeyword_0_2_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (',' '.')*
	 *
	 * This ambiguous syntax occurs at:
	 *     expression+=variable (ambiguity) (rule end)
	 *     expression2+=variable (ambiguity) (rule end)
	 */
	protected void emit_Ccode___CommaKeyword_4_1_1_0_FullStopKeyword_4_1_1_1_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (',' '.')*
	 *
	 * This ambiguous syntax occurs at:
	 *     expression+=variable (ambiguity) (rule end)
	 *     expression2+=variable (ambiguity) (rule end)
	 */
	protected void emit_Ccode___CommaKeyword_5_1_1_0_FullStopKeyword_5_1_1_1_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('.' ',')*
	 *
	 * This ambiguous syntax occurs at:
	 *     expression+=variable ',' (ambiguity) expression2+=variable
	 *     expression2+=variable ',' (ambiguity) expression2+=variable
	 */
	protected void emit_Ccode___FullStopKeyword_4_1_1_1_0_CommaKeyword_4_1_1_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('.' ',')*
	 *
	 * This ambiguous syntax occurs at:
	 *     expression+=variable ',' (ambiguity) expression2+=variable
	 *     expression2+=variable ',' (ambiguity) expression2+=variable
	 */
	protected void emit_Ccode___FullStopKeyword_5_1_1_1_0_CommaKeyword_5_1_1_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '\'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ID (rule start)
	 */
	protected void emit_REGISTER_ReverseSolidusKeyword_42_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'bkpt' | 'BKPT'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) immediate_label+=immediate_label
	 */
	protected void emit_bkpt_instr_BKPTKeyword_0_1_or_BkptKeyword_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ':'?
	 *
	 * This ambiguous syntax occurs at:
	 *     variableABC=ID (ambiguity) ')'? (rule end)
	 *     variableHex=HEX (ambiguity) ')'? (rule end)
	 *     variableInt=myINT (ambiguity) ')'? (rule end)
	 *     variableString=STRING (ambiguity) ')'? (rule end)
	 */
	protected void emit_definition_ColonKeyword_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ')'?
	 *
	 * This ambiguous syntax occurs at:
	 *     defABC=ID (ambiguity) (rule end)
	 *     defHex=HEX (ambiguity) (rule end)
	 *     defInt=myINT (ambiguity) (rule end)
	 *     defString=STRING (ambiguity) (rule end)
	 *     variableABC=ID ':'? (ambiguity) (rule end)
	 *     variableHex=HEX ':'? (ambiguity) (rule end)
	 *     variableInt=myINT ':'? (ambiguity) (rule end)
	 *     variableString=STRING ':'? (ambiguity) (rule end)
	 */
	protected void emit_definition_RightParenthesisKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         '(' | 
	  *         '#' | 
	  *         '=' | 
	  *         '$' | 
	  *         '.' | 
	  *         '_' | 
	  *         '+' | 
	  *         '-' | 
	  *         '*' | 
	  *         '/' | 
	  *         '&' | 
	  *         ':' | 
	  *         '\'
	  *     )*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) variableABC=ID
	 *     (rule start) (ambiguity) variableHex=HEX
	 *     (rule start) (ambiguity) variableInt=myINT
	 *     (rule start) (ambiguity) variableString=STRING
	 */
	protected void emit_definition___AmpersandKeyword_0_10_or_AsteriskKeyword_0_8_or_ColonKeyword_0_11_or_DollarSignKeyword_0_3_or_EqualsSignKeyword_0_2_or_FullStopKeyword_0_4_or_HyphenMinusKeyword_0_7_or_LeftParenthesisKeyword_0_0_or_NumberSignKeyword_0_1_or_PlusSignKeyword_0_6_or_ReverseSolidusKeyword_0_12_or_SolidusKeyword_0_9_or__Keyword_0_5__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('%' | '#')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) description+=ID
	 *     (rule start) (ambiguity) int+=myINT
	 *     (rule start) (ambiguity) string+=STRING
	 */
	protected void emit_description___NumberSignKeyword_0_1_or_PercentSignKeyword_0_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('-' | '+')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ',' (ambiguity) register+=REGISTER
	 */
	protected void emit_flexible_offset___HyphenMinusKeyword_1_1_0_0_or_PlusSignKeyword_1_1_0_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '\'? ('#' | '=' | '$' | '.' | '_')? (ambiguity) label=ID
	 *     (rule start) '\'? ('#' | '=' | '$' | '.' | '_')? (ambiguity) num2=myINT
	 */
	protected void emit_immediate_label_LeftParenthesisKeyword_2_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '\'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ('#' | '=' | '$' | '.' | '_')? '('? label=ID
	 *     (rule start) (ambiguity) ('#' | '=' | '$' | '.' | '_')? '('? num2=myINT
	 */
	protected void emit_immediate_label_ReverseSolidusKeyword_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ')'?
	 *
	 * This ambiguous syntax occurs at:
	 *     label2=ID (ambiguity) (rule end)
	 *     label=ID (ambiguity) (rule end)
	 *     num2=myINT (ambiguity) (rule end)
	 *     num=myINT (ambiguity) (rule end)
	 */
	protected void emit_immediate_label_RightParenthesisKeyword_2_1_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('|' | '+' | '-' | '*' | '/')+
	 *
	 * This ambiguous syntax occurs at:
	 *     label2=ID (ambiguity) label2=ID
	 *     label2=ID (ambiguity) num=myINT
	 *     label=ID (ambiguity) label2=ID
	 *     label=ID (ambiguity) num=myINT
	 *     num2=myINT (ambiguity) label2=ID
	 *     num2=myINT (ambiguity) num=myINT
	 *     num=myINT (ambiguity) label2=ID
	 *     num=myINT (ambiguity) num=myINT
	 */
	protected void emit_immediate_label___AsteriskKeyword_2_1_3_0_3_or_HyphenMinusKeyword_2_1_3_0_2_or_PlusSignKeyword_2_1_3_0_1_or_SolidusKeyword_2_1_3_0_4_or_VerticalLineKeyword_2_1_3_0_0__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('#' | '=' | '$' | '.' | '_')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '\'? (ambiguity) '('? label=ID
	 *     (rule start) '\'? (ambiguity) '('? num2=myINT
	 */
	protected void emit_immediate_label___DollarSignKeyword_2_1_0_2_or_EqualsSignKeyword_2_1_0_1_or_FullStopKeyword_2_1_0_3_or_NumberSignKeyword_2_1_0_0_or__Keyword_2_1_0_4__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '^'?
	 *
	 * This ambiguous syntax occurs at:
	 *     register+=REGISTER '}' (ambiguity) (rule end)
	 */
	protected void emit_ldm_instr_CircumflexAccentKeyword_1_8_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '!'?
	 *
	 * This ambiguous syntax occurs at:
	 *     register+=REGISTER (ambiguity) ',' '{' register+=REGISTER
	 */
	protected void emit_ldm_instr_ExclamationMarkKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '!'?
	 *
	 * This ambiguous syntax occurs at:
	 *     immediate_label+=immediate_label ']' (ambiguity) ',' immediate_label+=immediate_label
	 *     immediate_label+=immediate_label ']' (ambiguity) (rule end)
	 *     register+=REGISTER ']' (ambiguity) ',' immediate_label+=immediate_label
	 *     register+=REGISTER ']' (ambiguity) (rule end)
	 */
	protected void emit_ldr_str_irpre_instr_ExclamationMarkKeyword_1_1_0_3_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('+' | '-')?
	 *
	 * This ambiguous syntax occurs at:
	 *     register+=REGISTER ',' (ambiguity) immediate_label+=immediate_label
	 *     register+=REGISTER ',' (ambiguity) register+=REGISTER
	 */
	protected void emit_ldr_str_irpre_instr___HyphenMinusKeyword_1_1_0_3_0_1_1_or_PlusSignKeyword_1_1_0_3_0_1_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '#'?
	 *
	 * This ambiguous syntax occurs at:
	 *     register+=REGISTER ']' ',' (ambiguity) ('+' | '-')? immediate_label+=immediate_label
	 *     register+=REGISTER ']' ',' (ambiguity) ('+' | '-')? register+=REGISTER
	 */
	protected void emit_ldr_str_irpsot_instr_NumberSignKeyword_1_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('+' | '-')?
	 *
	 * This ambiguous syntax occurs at:
	 *     register+=REGISTER ']' ',' '#'? (ambiguity) immediate_label+=immediate_label
	 *     register+=REGISTER ']' ',' '#'? (ambiguity) register+=REGISTER
	 */
	protected void emit_ldr_str_irpsot_instr___HyphenMinusKeyword_1_7_1_or_PlusSignKeyword_1_7_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('+' | '-')?
	 *
	 * This ambiguous syntax occurs at:
	 *     register+=REGISTER ']' ',' (ambiguity) register+=REGISTER
	 */
	protected void emit_ldr_str_rpost_instr___HyphenMinusKeyword_1_6_1_or_PlusSignKeyword_1_6_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '!'?
	 *
	 * This ambiguous syntax occurs at:
	 *     immediate_label+=immediate_label ']' (ambiguity) (rule end)
	 */
	protected void emit_ldr_str_spre_instr_ExclamationMarkKeyword_1_11_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('+' | '-')?
	 *
	 * This ambiguous syntax occurs at:
	 *     register+=REGISTER ',' (ambiguity) register+=REGISTER
	 */
	protected void emit_ldr_str_spre_instr___HyphenMinusKeyword_1_5_1_or_PlusSignKeyword_1_5_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('f' | 'F' | 'b' | 'B')?
	 *
	 * This ambiguous syntax occurs at:
	 *     int=myINT (ambiguity) (rule end)
	 */
	protected void emit_numeric_backward_forward___BKeyword_1_1_2_or_BKeyword_1_1_3_or_FKeyword_1_1_0_or_FKeyword_1_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '\'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) BAREL_SHIFT_REGISTER?='ASR'
	 *     (rule start) (ambiguity) BAREL_SHIFT_REGISTER?='LSL'
	 *     (rule start) (ambiguity) BAREL_SHIFT_REGISTER?='LSR'
	 *     (rule start) (ambiguity) BAREL_SHIFT_REGISTER?='ROR'
	 *     (rule start) (ambiguity) BAREL_SHIFT_REGISTER?='asr'
	 *     (rule start) (ambiguity) BAREL_SHIFT_REGISTER?='lsl'
	 *     (rule start) (ambiguity) BAREL_SHIFT_REGISTER?='lsr'
	 *     (rule start) (ambiguity) BAREL_SHIFT_REGISTER?='ror'
	 *     (rule start) (ambiguity) BAREL_SHIFT_REGISTER?=ID
	 */
	protected void emit_opsh_ReverseSolidusKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '+'?
	 *
	 * This ambiguous syntax occurs at:
	 *     register+=REGISTER (ambiguity) ',' register+=REGISTER
	 *     register+=REGISTER (ambiguity) '}' (rule end)
	 */
	protected void emit_push_pop_instr_PlusSignKeyword_2_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '+'?
	 *
	 * This ambiguous syntax occurs at:
	 *     register+=REGISTER (ambiguity) ',' register+=REGISTER
	 *     register+=REGISTER (ambiguity) '}' (rule end)
	 */
	protected void emit_push_pop_instr_PlusSignKeyword_3_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         '#' | 
	  *         '=' | 
	  *         '$' | 
	  *         '.' | 
	  *         '_' | 
	  *         '+' | 
	  *         '-' | 
	  *         '&'
	  *     )*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) entryABC=ID
	 *     (rule start) (ambiguity) entryHex=HEX
	 *     (rule start) (ambiguity) entryInt=myINT
	 *     (rule start) (ambiguity) entryString=STRING
	 */
	protected void emit_randomEntry___AmpersandKeyword_0_7_or_DollarSignKeyword_0_2_or_EqualsSignKeyword_0_1_or_FullStopKeyword_0_3_or_HyphenMinusKeyword_0_6_or_NumberSignKeyword_0_0_or_PlusSignKeyword_0_5_or__Keyword_0_4__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ')'?
	 *
	 * This ambiguous syntax occurs at:
	 *     variableABC=ID (ambiguity) (rule end)
	 *     variableHex=HEX (ambiguity) (rule end)
	 *     variableInt=myINT (ambiguity) (rule end)
	 *     variableString=STRING (ambiguity) (rule end)
	 */
	protected void emit_variable_RightParenthesisKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         '(' | 
	  *         '#' | 
	  *         '=' | 
	  *         '$' | 
	  *         '.' | 
	  *         '_' | 
	  *         '+' | 
	  *         '-' | 
	  *         '*' | 
	  *         '/' | 
	  *         '&' | 
	  *         '\'
	  *     )*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) variableABC=ID
	 *     (rule start) (ambiguity) variableHex=HEX
	 *     (rule start) (ambiguity) variableInt=myINT
	 *     (rule start) (ambiguity) variableString=STRING
	 */
	protected void emit_variable___AmpersandKeyword_0_10_or_AsteriskKeyword_0_8_or_DollarSignKeyword_0_3_or_EqualsSignKeyword_0_2_or_FullStopKeyword_0_4_or_HyphenMinusKeyword_0_7_or_LeftParenthesisKeyword_0_0_or_NumberSignKeyword_0_1_or_PlusSignKeyword_0_6_or_ReverseSolidusKeyword_0_11_or_SolidusKeyword_0_9_or__Keyword_0_5__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
